use axum::{Json, extract::State};
use serde::Serialize;
use std::sync::Arc;
use uuid::Uuid;

use crate::core::state::AppState;

/// C·∫•u tr√∫c tr·∫£ v·ªÅ cho t·ª´ng module kh·∫£ d·ª•ng
#[derive(Serialize)]
pub struct AvailableModule {
    pub module_name: String,      // T√™n k·ªπ thu·∫≠t, v√≠ d·ª•: 'user'
    pub display_name: String,     // T√™n hi·ªÉn th·ªã, v√≠ d·ª•: 'Qu·∫£n l√Ω ng∆∞·ªùi d√πng'
}

/// Handler GET /available-modules
/// Truy v·∫•n b·∫£ng available_module v√† tr·∫£ v·ªÅ danh s√°ch module c√≥ th·ªÉ g√°n cho tenant
pub async fn get_available_modules(
    State(state): State<Arc<AppState>>,
) -> Result<Json<Vec<AvailableModule>>, (axum::http::StatusCode, String)> {
    // üëâ L·∫•y pool t·ª´ ShardManager (d√πng nil() n·∫øu l√† b·∫£ng to√†n c·ª•c)
    let pool = state.shard.get_pool_for_tenant(&Uuid::nil());

    let rows = sqlx::query_as!(
        AvailableModule,
        r#"
        SELECT module_name, display_name
        FROM available_module
        ORDER BY display_name
        "#
    )
    .fetch_all(pool)
    .await
    .map_err(|e| (
        axum::http::StatusCode::INTERNAL_SERVER_ERROR,
        e.to_string()
    ))?;

    Ok(Json(rows))
}
