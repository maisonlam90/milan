use serde::{Deserialize, Serialize};
use uuid::Uuid;

/// ðŸ“¥ Dá»¯ liá»‡u Ä‘Äƒng kÃ½ tÃ i khoáº£n (client gá»­i lÃªn)
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct RegisterDto {
    /// ðŸŽ¯ Tenant hiá»‡n táº¡i (Ä‘a-tenant)
    pub tenant_id: Uuid,
    pub email: String,
    pub password: String,
    pub name: String,
}

impl RegisterDto {
    /// Chuáº©n hoÃ¡ dá»¯ liá»‡u Ä‘áº§u vÃ o:
    /// - email: trim + lowercase (khá»›p unique index (tenant_id, lower(email)))
    /// - name : trim
    pub fn clean(self) -> Self {
        let RegisterDto {
            tenant_id,
            email,
            password,
            name,
        } = self;

        Self {
            tenant_id,
            email: email.trim().to_lowercase(),
            password,
            name: name.trim().to_string(),
        }
    }

    /// Kiá»ƒm tra há»£p lá»‡ cÆ¡ báº£n Ä‘á»ƒ trÃ¡nh rÃ¡c Ä‘á»• vÃ o DB
    pub fn validate(&self) -> Result<(), String> {
        if self.email.is_empty() {
            return Err("Email khÃ´ng Ä‘Æ°á»£c Ä‘á»ƒ trá»‘ng".into());
        }
        if !self.email.contains('@') || !self.email.contains('.') {
            return Err("Email khÃ´ng Ä‘Ãºng Ä‘á»‹nh dáº¡ng cÆ¡ báº£n".into());
        }
        if self.password.len() < 6 {
            return Err("Máº­t kháº©u tá»‘i thiá»ƒu 6 kÃ½ tá»±".into());
        }
        if self.name.trim().is_empty() {
            return Err("TÃªn khÃ´ng Ä‘Æ°á»£c Ä‘á»ƒ trá»‘ng".into());
        }
        Ok(())
    }
}

/// ðŸ“¥ Dá»¯ liá»‡u Ä‘Äƒng nháº­p
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct LoginDto {
    pub email: String,
    pub password: String,
    /// ðŸ†• Slug Ä‘á»‹nh danh tenant (vÃ­ dá»¥: "mailan.net")
    pub tenant_slug: String,
}

impl LoginDto {
    /// Chuáº©n hoÃ¡:
    /// - email: trim + lowercase
    /// - tenant_slug: trim + lowercase Ä‘á»ƒ so sÃ¡nh nháº¥t quÃ¡n
    pub fn clean(self) -> Self {
        let LoginDto {
            email,
            password,
            tenant_slug,
        } = self;

        Self {
            email: email.trim().to_lowercase(),
            password,
            tenant_slug: tenant_slug.trim().to_lowercase(),
        }
    }

    pub fn validate(&self) -> Result<(), String> {
        if self.email.is_empty() || !self.email.contains('@') {
            return Err("Email Ä‘Äƒng nháº­p khÃ´ng há»£p lá»‡".into());
        }
        if self.password.is_empty() {
            return Err("Máº­t kháº©u khÃ´ng Ä‘Æ°á»£c Ä‘á»ƒ trá»‘ng".into());
        }
        if self.tenant_slug.trim().is_empty() {
            return Err("Tenant slug khÃ´ng Ä‘Æ°á»£c Ä‘á»ƒ trá»‘ng".into());
        }
        Ok(())
    }
}
