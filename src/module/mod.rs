pub mod user;
pub mod tenant;
pub mod acl;
pub mod available; // üëà Cho ph√©p module router g·ªçi ƒë∆∞·ª£c handler get_available_modules

// Ghi module vao tenant available_module
use sqlx::PgPool;
use user::metadata as user_metadata; // Import metadata c·ªßa module user

/// H√†m ƒë·ªìng b·ªô metadata c·ªßa t·∫•t c·∫£ module v√†o b·∫£ng `available_module`
/// - Ch·∫°y khi kh·ªüi ƒë·ªông h·ªá th·ªëng
/// - Insert ho·∫∑c update t√™n, m√¥ t·∫£, UI metadata c·ªßa module
pub async fn sync_available_modules(pool: &PgPool) -> Result<(), sqlx::Error> {
    // T·∫≠p h·ª£p t·∫•t c·∫£ metadata module
    let modules = vec![
        user_metadata::metadata(),
        // Th√™m module kh√°c: payment_metadata::metadata(),...
    ];

    // Ghi v√†o b·∫£ng available_module
    for m in modules {
        sqlx::query!(
            r#"
            INSERT INTO available_module (module_name, display_name, description, metadata)
            VALUES ($1, $2, $3, $4)
            ON CONFLICT (module_name)
            DO UPDATE SET display_name = EXCLUDED.display_name,
                          description = EXCLUDED.description,
                          metadata = EXCLUDED.metadata
            "#,
            m.name,
            m.display_name,
            m.description,
            m.metadata
        )
        .execute(pool)
        .await?;
    }

    Ok(())
}