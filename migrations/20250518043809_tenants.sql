-- ============================
-- üì¶ C·∫•u tr√∫c b·∫£ng h·ªá th·ªëng ƒëa tenant + ACL (Contextual RBAC)
-- ============================

-- B·∫£ng tenant ch·ª©a th√¥ng tin t·ªï ch·ª©c v√† shard t∆∞∆°ng ·ª©ng
CREATE TABLE IF NOT EXISTS tenant (
    tenant_id UUID PRIMARY KEY,
    name TEXT NOT NULL,
    slug TEXT UNIQUE NOT NULL,
    shard_id TEXT NOT NULL,
    created_at TIMESTAMPTZ DEFAULT now()
);

-- B·∫£ng tenant_module √°nh x·∫° tenant v·ªõi c√°c module m√† h·ªç s·ª≠ d·ª•ng
CREATE TABLE IF NOT EXISTS tenant_module (
    tenant_id UUID NOT NULL,
    module_name TEXT NOT NULL,
    config_json JSONB DEFAULT '{}',
    enabled_at TIMESTAMPTZ DEFAULT now(),
    PRIMARY KEY (tenant_id, module_name)
);

-- B·∫£ng available_module l∆∞u danh s√°ch c√°c module h·ªá th·ªëng c√≥ th·ªÉ b·∫≠t cho tenant
CREATE TABLE IF NOT EXISTS available_module (
    module_name TEXT PRIMARY KEY,
    display_name TEXT NOT NULL,
    description TEXT,
    metadata JSONB DEFAULT '{}'
);

-- ============================
-- üîê ACL chu·∫©n RBAC m·ªü r·ªông theo tenant
-- ============================

CREATE TABLE IF NOT EXISTS roles (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    tenant_id UUID NOT NULL,
    name TEXT NOT NULL,
    module TEXT,
    UNIQUE(tenant_id, name)
);

CREATE TABLE IF NOT EXISTS permissions (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    resource TEXT NOT NULL,
    action TEXT NOT NULL,
    label TEXT NOT NULL,
    UNIQUE(resource, action)
);

CREATE TABLE IF NOT EXISTS role_permissions (
    role_id UUID NOT NULL,
    permission_id UUID NOT NULL,
    PRIMARY KEY (role_id, permission_id),
    FOREIGN KEY (role_id) REFERENCES roles(id) ON DELETE CASCADE,
    FOREIGN KEY (permission_id) REFERENCES permissions(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS user_roles (
    user_id UUID NOT NULL,
    role_id UUID NOT NULL,
    tenant_id UUID NOT NULL,
    PRIMARY KEY (user_id, role_id),
    FOREIGN KEY (role_id) REFERENCES roles(id) ON DELETE CASCADE
);

-- ============================
-- üîç Ch·ªâ m·ª•c v√† d·ªØ li·ªáu m·∫∑c ƒë·ªãnh
-- ============================

CREATE INDEX IF NOT EXISTS idx_tenant_module_tenant_id ON tenant_module (tenant_id);

-- ‚úÖ T·∫°o tenant h·ªá th·ªëng m·∫∑c ƒë·ªãnh
INSERT INTO tenant (tenant_id, name, slug, shard_id)
VALUES (
  '00000000-0000-0000-0000-000000000000',
  'System Admin Tenant',
  'mailan.net',
  'admin-cluster'
)
ON CONFLICT DO NOTHING;

-- ‚úÖ T·∫°o user admin h·ªá th·ªëng (n·∫øu b·∫£ng users ƒë√£ t·ªìn t·∫°i)
INSERT INTO users (tenant_id, user_id, email, password_hash, name, created_at)
VALUES (
  '00000000-0000-0000-0000-000000000000',
  gen_random_uuid(),
  'admin@mailan.net',
  '$2b$12$KFP4bYhbxzhVPcjYME9PTutOJihMrdoqLf8g9do7d9b0om2v6szbO',
  'System Admin',
  now()
)
ON CONFLICT DO NOTHING;

-- ‚úÖ T·∫°o quy·ªÅn c∆° b·∫£n cho module user
INSERT INTO permissions (resource, action, label)
VALUES 
  ('user', 'read', 'Xem danh s√°ch ng∆∞·ªùi d√πng'),
  ('user', 'create', 'T·∫°o ng∆∞·ªùi d√πng m·ªõi'),
  ('user', 'update', 'C·∫≠p nh·∫≠t ng∆∞·ªùi d√πng'),
  ('user', 'delete', 'Xo√° ng∆∞·ªùi d√πng'),
  ('user', 'assign_role', 'G√°n vai tr√≤ cho ng∆∞·ªùi d√πng')
ON CONFLICT DO NOTHING;

-- ‚úÖ T·∫°o role admin to√†n c·ª•c cho tenant h·ªá th·ªëng
INSERT INTO roles (tenant_id, name, module)
VALUES (
  '00000000-0000-0000-0000-000000000000',
  'admin',
  'user'
)
ON CONFLICT DO NOTHING;

-- ‚úÖ G√°n to√†n b·ªô quy·ªÅn user.* v√†o role admin
INSERT INTO role_permissions (role_id, permission_id)
SELECT
  r.id,
  p.id
FROM roles r
JOIN permissions p ON p.resource = 'user'
WHERE r.name = 'admin' AND r.tenant_id = '00000000-0000-0000-0000-000000000000'
ON CONFLICT DO NOTHING;

-- ‚úÖ G√°n role admin cho user n·∫øu t·ªìn t·∫°i
INSERT INTO user_roles (user_id, role_id, tenant_id)
SELECT
  u.user_id,
  r.id,
  u.tenant_id
FROM users u
JOIN roles r ON r.name = 'admin' AND r.tenant_id = u.tenant_id
WHERE u.email = 'admin@example.com' AND u.tenant_id = '00000000-0000-0000-0000-000000000000'
ON CONFLICT DO NOTHING;
