-- ============================================================
-- üìÑ INVOICE MODULE ‚Äî CREATE (Based on Odoo 19 account.move)
-- ============================================================
-- Reference: Odoo 19 addons/account/models/account_move.py
-- Model: account.move (invoice/bill)
-- Model: account.move.line (invoice lines)
-- Model: account.payment (payments)
-- ============================================================

SET TIME ZONE 'UTC';

-- ------------------------------------------------------------
-- 1) H√ìA ƒê∆†N CH√çNH (account_move)
-- ------------------------------------------------------------
CREATE TABLE account_move (
    tenant_id UUID NOT NULL,                                   -- üîë shard key
    id        UUID NOT NULL DEFAULT gen_random_uuid(),         -- üîë id h√≥a ƒë∆°n
    
    -- Th√¥ng tin c∆° b·∫£n
    name                VARCHAR(255),                           -- S·ªë h√≥a ƒë∆°n (INV/001, BILL/001, etc.)
    move_type           VARCHAR(50) NOT NULL,                   -- out_invoice, in_invoice, out_refund, in_refund, entry
    partner_id          UUID NOT NULL,                          -- Kh√°ch h√†ng/Nh√† cung c·∫•p (contact_id)
    
    -- Tr·∫°ng th√°i
    state               VARCHAR(50) NOT NULL DEFAULT 'draft',   -- draft, posted, cancel
    payment_state       VARCHAR(50) NOT NULL DEFAULT 'not_paid',-- not_paid, in_payment, paid, partial, reversed
    
    -- Ng√†y th√°ng
    invoice_date        DATE NOT NULL,                          -- Ng√†y h√≥a ƒë∆°n
    invoice_date_due    DATE,                                   -- Ng√†y ƒë·∫øn h·∫°n thanh to√°n
    date                DATE,                                   -- Ng√†y ghi s·ªï (accounting date)
    
    -- Tham chi·∫øu
    ref                 VARCHAR(255),                           -- Vendor reference / M√£ tham chi·∫øu
    payment_reference   VARCHAR(255),                           -- M√£ thanh to√°n
    
    -- Ti·ªÅn t·ªá & K·∫ø to√°n
    currency_id         VARCHAR(10) NOT NULL DEFAULT 'VND',     -- VND, USD, EUR, etc.
    journal_id          UUID,                                   -- S·ªï nh·∫≠t k√Ω k·∫ø to√°n
    fiscal_position_id  UUID,                                   -- V·ªã th·∫ø thu·∫ø (tax mapping)
    payment_term_id     UUID,                                   -- ƒêi·ªÅu kho·∫£n thanh to√°n
    
    -- S·ªë ti·ªÅn (stored computed fields)
    amount_untaxed      BIGINT NOT NULL DEFAULT 0,              -- T·ªïng tr∆∞·ªõc thu·∫ø
    amount_tax          BIGINT NOT NULL DEFAULT 0,              -- T·ªïng thu·∫ø
    amount_total        BIGINT NOT NULL DEFAULT 0,              -- T·ªïng c·ªông
    amount_residual     BIGINT NOT NULL DEFAULT 0,              -- C√≤n n·ª£
    
    -- Ghi ch√∫
    narration           TEXT,                                   -- Ghi ch√∫ (notes)
    
    -- Metadata
    created_at          TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at          TIMESTAMPTZ NOT NULL DEFAULT now(),
    
    -- IAM fields (ph√¢n quy·ªÅn)
    created_by          UUID NOT NULL,
    assignee_id         UUID,
    shared_with         UUID[] DEFAULT '{}',
    
    PRIMARY KEY (tenant_id, id)
);

-- Index t·ªëi ∆∞u
CREATE INDEX idx_account_move_tenant              ON account_move (tenant_id);
CREATE INDEX idx_account_move_tenant_name         ON account_move (tenant_id, name);
CREATE INDEX idx_account_move_tenant_partner      ON account_move (tenant_id, partner_id);
CREATE INDEX idx_account_move_tenant_state        ON account_move (tenant_id, state);
CREATE INDEX idx_account_move_tenant_payment_state ON account_move (tenant_id, payment_state);
CREATE INDEX idx_account_move_tenant_type         ON account_move (tenant_id, move_type);
CREATE INDEX idx_account_move_tenant_dates        ON account_move (tenant_id, invoice_date, invoice_date_due);

-- Index IAM
CREATE INDEX idx_account_move_created_by ON account_move(tenant_id, created_by);
CREATE INDEX idx_account_move_assignee   ON account_move(tenant_id, assignee_id);
CREATE INDEX idx_account_move_shared     ON account_move USING GIN(shared_with);

-- Trigger updated_at
CREATE OR REPLACE FUNCTION trg_account_move_set_updated_at()
RETURNS trigger LANGUAGE plpgsql AS $$
BEGIN
  NEW.updated_at := now();
  RETURN NEW;
END $$;

CREATE TRIGGER account_move_set_updated_at
BEFORE UPDATE ON account_move
FOR EACH ROW
EXECUTE FUNCTION trg_account_move_set_updated_at();

-- T·∫°o s·ªë h√≥a ƒë∆°n t·ª± ƒë·ªông (gi·ªëng loan)
CREATE TABLE IF NOT EXISTS invoice_counters_monthly (
  tenant_id  UUID NOT NULL,
  move_type  VARCHAR(50) NOT NULL,  -- out_invoice, in_invoice, etc.
  period_ym  INT  NOT NULL,          -- YYYYMM
  counter    BIGINT NOT NULL DEFAULT 0,
  updated_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  PRIMARY KEY (tenant_id, move_type, period_ym)
);

-- UNIQUE INDEX cho invoice number
CREATE UNIQUE INDEX IF NOT EXISTS uq_account_move_tenant_name
ON account_move (tenant_id, name) WHERE name IS NOT NULL;

-- ------------------------------------------------------------
-- 2) CHI TI·∫æT H√ìA ƒê∆†N (account_move_line)
-- ------------------------------------------------------------
CREATE TABLE account_move_line (
    tenant_id   UUID NOT NULL,
    id          UUID NOT NULL DEFAULT gen_random_uuid(),
    move_id     UUID NOT NULL,                                 -- FK to account_move
    
    -- Th√¥ng tin s·∫£n ph·∫©m/d·ªãch v·ª•
    name        TEXT NOT NULL,                                 -- M√¥ t·∫£ (description)
    product_id  UUID,                                          -- ID s·∫£n ph·∫©m (n·∫øu c√≥)
    
    -- S·ªë l∆∞·ª£ng & Gi√°
    quantity            NUMERIC(16,4) NOT NULL DEFAULT 1.0,    -- S·ªë l∆∞·ª£ng
    price_unit          BIGINT NOT NULL DEFAULT 0,             -- ƒê∆°n gi√°
    discount            NUMERIC(5,2) DEFAULT 0.00,             -- Gi·∫£m gi√° (%)
    
    -- S·ªë ti·ªÅn (stored computed)
    price_subtotal      BIGINT NOT NULL DEFAULT 0,             -- T·ªïng tr∆∞·ªõc thu·∫ø
    price_total         BIGINT NOT NULL DEFAULT 0,             -- T·ªïng sau thu·∫ø
    
    -- K·∫ø to√°n
    account_id          UUID,                                  -- T√†i kho·∫£n k·∫ø to√°n
    analytic_distribution JSONB,                               -- Ph√¢n b·ªï chi ph√≠ ph√¢n t√≠ch
    
    -- Metadata
    created_at  TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at  TIMESTAMPTZ NOT NULL DEFAULT now(),
    
    -- IAM fields
    created_by   UUID NOT NULL,
    
    PRIMARY KEY (tenant_id, id),
    
    CONSTRAINT fk_account_move_line_move
      FOREIGN KEY (tenant_id, move_id)
      REFERENCES account_move (tenant_id, id)
      ON DELETE CASCADE
);

-- Index t·ªëi ∆∞u
CREATE INDEX idx_account_move_line_tenant     ON account_move_line (tenant_id);
CREATE INDEX idx_account_move_line_move       ON account_move_line (tenant_id, move_id);
CREATE INDEX idx_account_move_line_product    ON account_move_line (tenant_id, product_id);
CREATE INDEX idx_account_move_line_account    ON account_move_line (tenant_id, account_id);

-- GIN index for analytic_distribution
CREATE INDEX idx_account_move_line_analytic ON account_move_line USING GIN(analytic_distribution);

-- Trigger updated_at
CREATE OR REPLACE FUNCTION trg_account_move_line_set_updated_at()
RETURNS trigger LANGUAGE plpgsql AS $$
BEGIN
  NEW.updated_at := now();
  RETURN NEW;
END $$;

CREATE TRIGGER account_move_line_set_updated_at
BEFORE UPDATE ON account_move_line
FOR EACH ROW
EXECUTE FUNCTION trg_account_move_line_set_updated_at();

-- ------------------------------------------------------------
-- 3) THU·∫æ (account_tax)
-- ------------------------------------------------------------
CREATE TABLE account_tax (
    tenant_id   UUID NOT NULL,
    id          UUID NOT NULL DEFAULT gen_random_uuid(),
    
    name                VARCHAR(255) NOT NULL,                 -- T√™n thu·∫ø (VAT 10%, VAT 5%, etc.)
    amount_type         VARCHAR(50) NOT NULL DEFAULT 'percent',-- percent, fixed, division
    amount              NUMERIC(16,4) NOT NULL DEFAULT 0,      -- T·ª∑ l·ªá % ho·∫∑c s·ªë ti·ªÅn
    
    -- Lo·∫°i thu·∫ø
    type_tax_use        VARCHAR(50) NOT NULL DEFAULT 'sale',   -- sale, purchase, none
    price_include       BOOLEAN DEFAULT FALSE,                 -- Gi√° ƒë√£ bao g·ªìm thu·∫ø
    
    -- T√†i kho·∫£n
    account_id          UUID,                                  -- T√†i kho·∫£n thu·∫ø
    refund_account_id   UUID,                                  -- T√†i kho·∫£n thu·∫ø ho√†n tr·∫£
    
    -- Metadata
    active      BOOLEAN DEFAULT TRUE,
    created_at  TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at  TIMESTAMPTZ NOT NULL DEFAULT now(),
    created_by  UUID NOT NULL,
    
    PRIMARY KEY (tenant_id, id)
);

CREATE INDEX idx_account_tax_tenant ON account_tax (tenant_id);
CREATE INDEX idx_account_tax_type   ON account_tax (tenant_id, type_tax_use);

-- ------------------------------------------------------------
-- 4) B·∫¢NG LI√äN K·∫æT: INVOICE LINE <-> TAX (Many-to-Many)
-- ------------------------------------------------------------
CREATE TABLE account_move_line_tax_rel (
    tenant_id           UUID NOT NULL,
    move_line_id        UUID NOT NULL,
    tax_id              UUID NOT NULL,
    
    PRIMARY KEY (tenant_id, move_line_id, tax_id),
    
    CONSTRAINT fk_move_line_tax_line
      FOREIGN KEY (tenant_id, move_line_id)
      REFERENCES account_move_line (tenant_id, id)
      ON DELETE CASCADE,
      
    CONSTRAINT fk_move_line_tax_tax
      FOREIGN KEY (tenant_id, tax_id)
      REFERENCES account_tax (tenant_id, id)
      ON DELETE CASCADE
);

CREATE INDEX idx_move_line_tax_line ON account_move_line_tax_rel (tenant_id, move_line_id);
CREATE INDEX idx_move_line_tax_tax  ON account_move_line_tax_rel (tenant_id, tax_id);

-- ------------------------------------------------------------
-- 5) THANH TO√ÅN (account_payment)
-- ------------------------------------------------------------
CREATE TABLE account_payment (
    tenant_id   UUID NOT NULL,
    id          UUID NOT NULL DEFAULT gen_random_uuid(),
    
    -- Th√¥ng tin thanh to√°n
    payment_type        VARCHAR(50) NOT NULL,                  -- inbound, outbound
    partner_type        VARCHAR(50) NOT NULL,                  -- customer, supplier
    partner_id          UUID NOT NULL,                         -- Kh√°ch h√†ng/Nh√† cung c·∫•p
    
    amount              BIGINT NOT NULL,                       -- S·ªë ti·ªÅn
    payment_date        DATE NOT NULL,                         -- Ng√†y thanh to√°n
    currency_id         VARCHAR(10) NOT NULL DEFAULT 'VND',
    
    -- Ph∆∞∆°ng th·ª©c & S·ªï
    payment_method_id   UUID,                                  -- Ph∆∞∆°ng th·ª©c thanh to√°n
    journal_id          UUID,                                  -- S·ªï ng√¢n h√†ng/ti·ªÅn m·∫∑t
    
    -- Tham chi·∫øu
    communication       TEXT,                                  -- Memo / Th√¥ng tin thanh to√°n
    ref                 VARCHAR(255),                          -- M√£ tham chi·∫øu
    
    -- Tr·∫°ng th√°i
    state               VARCHAR(50) NOT NULL DEFAULT 'draft',  -- draft, posted, sent, reconciled, cancelled
    
    -- Metadata
    created_at  TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at  TIMESTAMPTZ NOT NULL DEFAULT now(),
    created_by  UUID NOT NULL,
    
    PRIMARY KEY (tenant_id, id)
);

CREATE INDEX idx_account_payment_tenant     ON account_payment (tenant_id);
CREATE INDEX idx_account_payment_partner    ON account_payment (tenant_id, partner_id);
CREATE INDEX idx_account_payment_date       ON account_payment (tenant_id, payment_date);
CREATE INDEX idx_account_payment_state      ON account_payment (tenant_id, state);

-- Trigger updated_at
CREATE OR REPLACE FUNCTION trg_account_payment_set_updated_at()
RETURNS trigger LANGUAGE plpgsql AS $$
BEGIN
  NEW.updated_at := now();
  RETURN NEW;
END $$;

CREATE TRIGGER account_payment_set_updated_at
BEFORE UPDATE ON account_payment
FOR EACH ROW
EXECUTE FUNCTION trg_account_payment_set_updated_at();

-- ------------------------------------------------------------
-- 6) LI√äN K·∫æT: INVOICE <-> PAYMENT (Many-to-Many)
-- ------------------------------------------------------------
CREATE TABLE account_move_payment_rel (
    tenant_id   UUID NOT NULL,
    move_id     UUID NOT NULL,
    payment_id  UUID NOT NULL,
    amount      BIGINT NOT NULL DEFAULT 0,                     -- S·ªë ti·ªÅn thanh to√°n cho invoice n√†y
    
    PRIMARY KEY (tenant_id, move_id, payment_id),
    
    CONSTRAINT fk_move_payment_move
      FOREIGN KEY (tenant_id, move_id)
      REFERENCES account_move (tenant_id, id)
      ON DELETE CASCADE,
      
    CONSTRAINT fk_move_payment_payment
      FOREIGN KEY (tenant_id, payment_id)
      REFERENCES account_payment (tenant_id, id)
      ON DELETE CASCADE
);

CREATE INDEX idx_move_payment_move    ON account_move_payment_rel (tenant_id, move_id);
CREATE INDEX idx_move_payment_payment ON account_move_payment_rel (tenant_id, payment_id);

-- ------------------------------------------------------------
-- 7) ƒêI·ªÄU KHO·∫¢N THANH TO√ÅN (account_payment_term)
-- ------------------------------------------------------------
CREATE TABLE account_payment_term (
    tenant_id   UUID NOT NULL,
    id          UUID NOT NULL DEFAULT gen_random_uuid(),
    
    name        VARCHAR(255) NOT NULL,                         -- T√™n (Net 30, Net 60, etc.)
    note        TEXT,                                          -- M√¥ t·∫£
    
    -- Metadata
    active      BOOLEAN DEFAULT TRUE,
    created_at  TIMESTAMPTZ NOT NULL DEFAULT now(),
    created_by  UUID NOT NULL,
    
    PRIMARY KEY (tenant_id, id)
);

CREATE INDEX idx_payment_term_tenant ON account_payment_term (tenant_id);

-- ------------------------------------------------------------
-- 8) CHI TI·∫æT ƒêI·ªÄU KHO·∫¢N THANH TO√ÅN (account_payment_term_line)
-- ------------------------------------------------------------
CREATE TABLE account_payment_term_line (
    tenant_id           UUID NOT NULL,
    id                  UUID NOT NULL DEFAULT gen_random_uuid(),
    payment_term_id     UUID NOT NULL,
    
    value               VARCHAR(50) NOT NULL DEFAULT 'balance', -- percent, balance, fixed
    value_amount        NUMERIC(16,4) DEFAULT 0,                -- Gi√° tr·ªã (% ho·∫∑c s·ªë ti·ªÅn)
    nb_days             INT DEFAULT 0,                          -- S·ªë ng√†y
    
    PRIMARY KEY (tenant_id, id),
    
    CONSTRAINT fk_payment_term_line_term
      FOREIGN KEY (tenant_id, payment_term_id)
      REFERENCES account_payment_term (tenant_id, id)
      ON DELETE CASCADE
);

CREATE INDEX idx_payment_term_line_term ON account_payment_term_line (tenant_id, payment_term_id);

-- ------------------------------------------------------------
-- 9) S·ªî NH·∫¨T K√ù K·∫æ TO√ÅN (account_journal)
-- ------------------------------------------------------------
CREATE TABLE account_journal (
    tenant_id   UUID NOT NULL,
    id          UUID NOT NULL DEFAULT gen_random_uuid(),
    
    name        VARCHAR(255) NOT NULL,                         -- T√™n s·ªï
    code        VARCHAR(50) NOT NULL,                          -- M√£ s·ªï (INV, BILL, BANK, CASH)
    type        VARCHAR(50) NOT NULL,                          -- sale, purchase, cash, bank, general
    
    currency_id VARCHAR(10) DEFAULT 'VND',
    
    -- Metadata
    active      BOOLEAN DEFAULT TRUE,
    created_at  TIMESTAMPTZ NOT NULL DEFAULT now(),
    created_by  UUID NOT NULL,
    
    PRIMARY KEY (tenant_id, id)
);

CREATE INDEX idx_account_journal_tenant ON account_journal (tenant_id);
CREATE INDEX idx_account_journal_type   ON account_journal (tenant_id, type);
CREATE UNIQUE INDEX idx_account_journal_code ON account_journal (tenant_id, code);

-- ------------------------------------------------------------
-- 10) PH∆Ø∆†NG TH·ª®C THANH TO√ÅN (account_payment_method)
-- ------------------------------------------------------------
CREATE TABLE account_payment_method (
    tenant_id   UUID NOT NULL,
    id          UUID NOT NULL DEFAULT gen_random_uuid(),
    
    name        VARCHAR(255) NOT NULL,                         -- T√™n (Cash, Bank Transfer, etc.)
    code        VARCHAR(50) NOT NULL,                          -- M√£ (manual, electronic, check)
    payment_type VARCHAR(50) NOT NULL,                         -- inbound, outbound
    
    -- Metadata
    active      BOOLEAN DEFAULT TRUE,
    created_at  TIMESTAMPTZ NOT NULL DEFAULT now(),
    created_by  UUID NOT NULL,
    
    PRIMARY KEY (tenant_id, id)
);

CREATE INDEX idx_payment_method_tenant ON account_payment_method (tenant_id);
CREATE INDEX idx_payment_method_type   ON account_payment_method (tenant_id, payment_type);

-- ------------------------------------------------------------
-- 11) V·ªä TH·∫æ THU·∫æ (account_fiscal_position) - Tax Mapping
-- ------------------------------------------------------------
CREATE TABLE account_fiscal_position (
    tenant_id   UUID NOT NULL,
    id          UUID NOT NULL DEFAULT gen_random_uuid(),
    
    name        VARCHAR(255) NOT NULL,                         -- T√™n
    note        TEXT,                                          -- M√¥ t·∫£
    
    -- Metadata
    active      BOOLEAN DEFAULT TRUE,
    created_at  TIMESTAMPTZ NOT NULL DEFAULT now(),
    created_by  UUID NOT NULL,
    
    PRIMARY KEY (tenant_id, id)
);

CREATE INDEX idx_fiscal_position_tenant ON account_fiscal_position (tenant_id);

-- ============================================================
-- üìä VIEWS & FUNCTIONS
-- ============================================================

-- View: Danh s√°ch invoice v·ªõi th√¥ng tin partner
CREATE OR REPLACE VIEW v_account_move_list AS
SELECT 
    am.tenant_id,
    am.id,
    am.name,
    am.move_type,
    am.partner_id,
    c.name AS partner_name,
    am.state,
    am.payment_state,
    am.invoice_date,
    am.invoice_date_due,
    am.amount_untaxed,
    am.amount_tax,
    am.amount_total,
    am.amount_residual,
    am.currency_id,
    am.created_at,
    am.updated_at
FROM account_move am
LEFT JOIN contact c ON am.tenant_id = c.tenant_id AND am.partner_id = c.id;

-- ============================================================
-- ‚úÖ DONE: Invoice Module Database Schema
-- ============================================================
-- Tables created:
-- 1. account_move (invoice/bill)
-- 2. account_move_line (invoice lines)
-- 3. account_tax (taxes)
-- 4. account_move_line_tax_rel (line <-> tax)
-- 5. account_payment (payments)
-- 6. account_move_payment_rel (invoice <-> payment)
-- 7. account_payment_term (payment terms)
-- 8. account_payment_term_line (payment term lines)
-- 9. account_journal (journals)
-- 10. account_payment_method (payment methods)
-- 11. account_fiscal_position (fiscal positions)
-- ============================================================

