name: Build and Push to GHCR

on:
  push:
    branches: ["main"]

jobs:
  push-ghcr:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Giải mã yugabyte.crt từ secret (optional)
        run: |
          if [ -n "${{ secrets.YUGA_CRT_B64 }}" ]; then
            echo "${{ secrets.YUGA_CRT_B64 }}" | base64 -d > yugabyte.crt
            echo "Wrote yugabyte.crt"
          else
            echo "No YUGA_CRT_B64 provided, skipping."
          fi

      - name: Build frontend (Tailux)
        run: |
          cd src/frontend/demo
          yarn install --frozen-lockfile
          yarn build
          cd ../../..

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Cài Rust & sqlx-cli
        run: |
          rustup default 1.89.0
          cargo install sqlx-cli --version 0.8.3 --no-default-features --features postgres

      - name: Chuẩn bị sqlx-data.json cho SQLX_OFFLINE
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/sqlx
        run: |
          sudo apt update
          sudo apt install -y postgresql libpq-dev
          sudo service postgresql start
          psql -U postgres -c 'CREATE DATABASE sqlx;'
          cargo sqlx prepare --workspace

      - name: Build and push image to GHCR
        run: |
          IMAGE_NAME=ghcr.io/${{ github.repository_owner }}/milan:latest
          docker build \
            --build-arg SQLX_OFFLINE=true \
            -t $IMAGE_NAME .
          docker push $IMAGE_NAME
