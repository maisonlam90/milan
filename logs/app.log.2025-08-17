2025-08-17T07:08:53.455292Z  WARN sqlx_postgres::options::parse: ignoring unrecognized connect parameter key=ssl value=true
2025-08-17T07:08:53.667769Z DEBUG rustls::client::hs: No cached session for DnsName("ap-southeast-1.e4c6174f-6538-4e47-93bf-0a2503819047.aws.yugabyte.cloud")    
2025-08-17T07:08:53.670548Z DEBUG rustls::client::hs: Not resuming any session    
2025-08-17T07:08:53.778006Z DEBUG rustls::client::hs: Using ciphersuite TLS13_AES_256_GCM_SHA384    
2025-08-17T07:08:53.779401Z DEBUG rustls::client::tls13: Not resuming    
2025-08-17T07:08:53.781598Z DEBUG rustls::client::tls13: TLS1.3 encrypted extensions: []    
2025-08-17T07:08:53.782004Z DEBUG rustls::client::hs: ALPN protocol is None    
2025-08-17T07:08:53.782106Z DEBUG rustls::client::tls13: Got CertificateRequest CertificateRequestPayloadTLS13 { context: , extensions: [SignatureAlgorithms([ECDSA_NISTP256_SHA256, ECDSA_NISTP384_SHA384, ECDSA_NISTP521_SHA512, ED25519, ED448, Unknown(2057), Unknown(2058), Unknown(2059), RSA_PSS_SHA256, RSA_PSS_SHA384, RSA_PSS_SHA512, RSA_PKCS1_SHA256, RSA_PKCS1_SHA384, RSA_PKCS1_SHA512, Unknown(771), Unknown(769)]), AuthorityNames([DistinguishedName(305b31153013060355040a130c597567616279746520496e633142304006035504030c392a2e65346336313734662d363533382d346534372d393362662d3061323530333831393034372e6177732e79756761627974652e636c6f7564), DistinguishedName(30818b310b3009060355040613025553310b3009060355040813024341311230100603550407130953756e6e7976616c6531153013060355040a130c597567616279746520496e6331173015060355040b130e597567616279746520436c6f7564312b302906035504031322597567616279746520436c6f7564205375626f7264696e6174652043412070726f64), DistinguishedName(308184310b3009060355040613025553310b3009060355040813024341311230100603550407130953756e6e7976616c6531153013060355040a130c597567616279746520496e6331173015060355040b130e597567616279746520436c6f7564312430220603550403131b597567616279746520436c6f756420526f6f742043412070726f64)])] }    
2025-08-17T07:08:53.782470Z DEBUG rustls::client::common: Client auth requested but no cert/sigscheme available    
2025-08-17T07:08:54.121946Z DEBUG sqlx::query: summary="INSERT INTO available_module (module_name, ‚Ä¶" db.statement="\n\nINSERT INTO\n  available_module (module_name, display_name, description, metadata)\nVALUES\n  ($1, $2, $3, $4) ON CONFLICT (module_name) DO\nUPDATE\nSET\n  display_name = EXCLUDED.display_name,\n  description = EXCLUDED.description,\n  metadata = EXCLUDED.metadata\n" rows_affected=1 rows_returned=0 elapsed=148.871527ms elapsed_secs=0.148871527
2025-08-17T07:09:46.686842Z DEBUG sqlx::query: summary="SELECT tenant_id, shard_id FROM ‚Ä¶" db.statement="\n\nSELECT\n  tenant_id,\n  shard_id\nFROM\n  tenant\nWHERE\n  slug = $1\n" rows_affected=0 rows_returned=1 elapsed=128.823045ms elapsed_secs=0.128823045
2025-08-17T07:09:46.908325Z DEBUG rustls::client::hs: No cached session for DnsName("ap-southeast-1.e4c6174f-6538-4e47-93bf-0a2503819047.aws.yugabyte.cloud")    
2025-08-17T07:09:46.909989Z DEBUG rustls::client::hs: Not resuming any session    
2025-08-17T07:09:47.008572Z DEBUG rustls::client::hs: Using ciphersuite TLS13_AES_256_GCM_SHA384    
2025-08-17T07:09:47.008930Z DEBUG rustls::client::tls13: Not resuming    
2025-08-17T07:09:47.010742Z DEBUG rustls::client::tls13: TLS1.3 encrypted extensions: []    
2025-08-17T07:09:47.011019Z DEBUG rustls::client::hs: ALPN protocol is None    
2025-08-17T07:09:47.011197Z DEBUG rustls::client::tls13: Got CertificateRequest CertificateRequestPayloadTLS13 { context: , extensions: [SignatureAlgorithms([ECDSA_NISTP256_SHA256, ECDSA_NISTP384_SHA384, ECDSA_NISTP521_SHA512, ED25519, ED448, Unknown(2057), Unknown(2058), Unknown(2059), RSA_PSS_SHA256, RSA_PSS_SHA384, RSA_PSS_SHA512, RSA_PKCS1_SHA256, RSA_PKCS1_SHA384, RSA_PKCS1_SHA512, Unknown(771), Unknown(769)]), AuthorityNames([DistinguishedName(305b31153013060355040a130c597567616279746520496e633142304006035504030c392a2e65346336313734662d363533382d346534372d393362662d3061323530333831393034372e6177732e79756761627974652e636c6f7564), DistinguishedName(30818b310b3009060355040613025553310b3009060355040813024341311230100603550407130953756e6e7976616c6531153013060355040a130c597567616279746520496e6331173015060355040b130e597567616279746520436c6f7564312b302906035504031322597567616279746520436c6f7564205375626f7264696e6174652043412070726f64), DistinguishedName(308184310b3009060355040613025553310b3009060355040813024341311230100603550407130953756e6e7976616c6531153013060355040a130c597567616279746520496e6331173015060355040b130e597567616279746520436c6f7564312430220603550403131b597567616279746520436c6f756420526f6f742043412070726f64)])] }    
2025-08-17T07:09:47.011298Z DEBUG rustls::client::common: Client auth requested but no cert/sigscheme available    
2025-08-17T07:09:47.310279Z DEBUG sqlx::query: summary="SELECT tenant_id, user_id, email, ‚Ä¶" db.statement="\n\nSELECT\n  tenant_id,\n  user_id,\n  email,\n  name,\n  password_hash\nFROM\n  users\nWHERE\n  email = $1\n  AND tenant_id = $2\n" rows_affected=0 rows_returned=1 elapsed=152.217523ms elapsed_secs=0.152217523
2025-08-17T07:09:48.223855Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T07:09:48.239537Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T07:09:48.430357Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=138.489609ms elapsed_secs=0.138489609
2025-08-17T07:09:48.444315Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=162.003607ms elapsed_secs=0.162003607
2025-08-17T07:09:48.452261Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T07:09:48.546984Z DEBUG rustls::client::hs: No cached session for DnsName("ap-southeast-1.e4c6174f-6538-4e47-93bf-0a2503819047.aws.yugabyte.cloud")    
2025-08-17T07:09:48.548125Z DEBUG rustls::client::hs: Not resuming any session    
2025-08-17T07:09:48.563707Z DEBUG rustls::client::hs: No cached session for DnsName("ap-southeast-1.e4c6174f-6538-4e47-93bf-0a2503819047.aws.yugabyte.cloud")    
2025-08-17T07:09:48.564039Z DEBUG rustls::client::hs: Not resuming any session    
2025-08-17T07:09:48.657227Z DEBUG rustls::client::hs: Using ciphersuite TLS13_AES_256_GCM_SHA384    
2025-08-17T07:09:48.657830Z DEBUG rustls::client::tls13: Not resuming    
2025-08-17T07:09:48.658388Z DEBUG rustls::client::tls13: TLS1.3 encrypted extensions: []    
2025-08-17T07:09:48.658681Z DEBUG rustls::client::hs: ALPN protocol is None    
2025-08-17T07:09:48.658756Z DEBUG rustls::client::tls13: Got CertificateRequest CertificateRequestPayloadTLS13 { context: , extensions: [SignatureAlgorithms([ECDSA_NISTP256_SHA256, ECDSA_NISTP384_SHA384, ECDSA_NISTP521_SHA512, ED25519, ED448, Unknown(2057), Unknown(2058), Unknown(2059), RSA_PSS_SHA256, RSA_PSS_SHA384, RSA_PSS_SHA512, RSA_PKCS1_SHA256, RSA_PKCS1_SHA384, RSA_PKCS1_SHA512, Unknown(771), Unknown(769)]), AuthorityNames([DistinguishedName(305b31153013060355040a130c597567616279746520496e633142304006035504030c392a2e65346336313734662d363533382d346534372d393362662d3061323530333831393034372e6177732e79756761627974652e636c6f7564), DistinguishedName(30818b310b3009060355040613025553310b3009060355040813024341311230100603550407130953756e6e7976616c6531153013060355040a130c597567616279746520496e6331173015060355040b130e597567616279746520436c6f7564312b302906035504031322597567616279746520436c6f7564205375626f7264696e6174652043412070726f64), DistinguishedName(308184310b3009060355040613025553310b3009060355040813024341311230100603550407130953756e6e7976616c6531153013060355040a130c597567616279746520496e6331173015060355040b130e597567616279746520436c6f7564312430220603550403131b597567616279746520436c6f756420526f6f742043412070726f64)])] }    
2025-08-17T07:09:48.658990Z DEBUG rustls::client::common: Client auth requested but no cert/sigscheme available    
2025-08-17T07:09:48.659573Z DEBUG rustls::client::hs: Using ciphersuite TLS13_AES_256_GCM_SHA384    
2025-08-17T07:09:48.659656Z DEBUG rustls::client::tls13: Not resuming    
2025-08-17T07:09:48.659984Z DEBUG rustls::client::tls13: TLS1.3 encrypted extensions: []    
2025-08-17T07:09:48.660029Z DEBUG rustls::client::hs: ALPN protocol is None    
2025-08-17T07:09:48.660065Z DEBUG rustls::client::tls13: Got CertificateRequest CertificateRequestPayloadTLS13 { context: , extensions: [SignatureAlgorithms([ECDSA_NISTP256_SHA256, ECDSA_NISTP384_SHA384, ECDSA_NISTP521_SHA512, ED25519, ED448, Unknown(2057), Unknown(2058), Unknown(2059), RSA_PSS_SHA256, RSA_PSS_SHA384, RSA_PSS_SHA512, RSA_PKCS1_SHA256, RSA_PKCS1_SHA384, RSA_PKCS1_SHA512, Unknown(771), Unknown(769)]), AuthorityNames([DistinguishedName(305b31153013060355040a130c597567616279746520496e633142304006035504030c392a2e65346336313734662d363533382d346534372d393362662d3061323530333831393034372e6177732e79756761627974652e636c6f7564), DistinguishedName(30818b310b3009060355040613025553310b3009060355040813024341311230100603550407130953756e6e7976616c6531153013060355040a130c597567616279746520496e6331173015060355040b130e597567616279746520436c6f7564312b302906035504031322597567616279746520436c6f7564205375626f7264696e6174652043412070726f64), DistinguishedName(308184310b3009060355040613025553310b3009060355040813024341311230100603550407130953756e6e7976616c6531153013060355040a130c597567616279746520496e6331173015060355040b130e597567616279746520436c6f7564312430220603550403131b597567616279746520436c6f756420526f6f742043412070726f64)])] }    
2025-08-17T07:09:48.660246Z DEBUG rustls::client::common: Client auth requested but no cert/sigscheme available    
2025-08-17T07:09:48.971025Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=169.649458ms elapsed_secs=0.169649458
2025-08-17T07:09:48.980085Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T07:09:49.000618Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=199.177018ms elapsed_secs=0.199177018
2025-08-17T07:09:49.085694Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=52.090815ms elapsed_secs=0.052090815
2025-08-17T07:09:49.258218Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=119.684496ms elapsed_secs=0.119684496
2025-08-17T07:09:52.649534Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T07:09:52.653737Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T07:09:52.840042Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=135.704724ms elapsed_secs=0.135704724
2025-08-17T07:09:52.877985Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=168.252898ms elapsed_secs=0.168252898
2025-08-17T07:09:52.882381Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T07:09:52.986049Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=51.321676ms elapsed_secs=0.051321676
2025-08-17T07:09:53.021539Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=132.809363ms elapsed_secs=0.132809363
2025-08-17T07:09:53.027254Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T07:09:53.125779Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=48.481364ms elapsed_secs=0.048481364
2025-08-17T07:09:53.228724Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=51.373097ms elapsed_secs=0.051373097
2025-08-17T07:11:06.235085Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T07:11:06.248022Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T07:11:06.849850Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T07:11:07.040063Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=135.616143ms elapsed_secs=0.135616143
2025-08-17T07:11:07.136355Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=48.081492ms elapsed_secs=0.048081492
2025-08-17T07:11:07.139598Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T07:11:07.242034Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=50.354971ms elapsed_secs=0.050354971
2025-08-17T07:11:07.346158Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=51.659251ms elapsed_secs=0.051659251
2025-08-17T07:13:26.528523Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T07:13:26.532511Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T07:15:22.165042Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T07:15:22.167165Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T07:15:52.406983Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T07:15:52.420108Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T07:15:53.061041Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T07:15:53.163333Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=50.344972ms elapsed_secs=0.050344972
2025-08-17T07:15:53.262183Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=48.558262ms elapsed_secs=0.048558262
2025-08-17T07:15:53.265310Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T07:15:53.363979Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=48.940186ms elapsed_secs=0.048940186
2025-08-17T07:15:53.472256Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=51.86148ms elapsed_secs=0.05186148
2025-08-17T07:16:09.270690Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T07:16:09.274391Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T07:16:10.946439Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T07:16:11.065557Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=58.050042ms elapsed_secs=0.058050042
2025-08-17T07:16:11.093384Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T07:16:11.185398Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=64.923863ms elapsed_secs=0.064923863
2025-08-17T07:16:11.209071Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=51.487756ms elapsed_secs=0.051487756
2025-08-17T07:16:11.328067Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=54.556039ms elapsed_secs=0.054556039
2025-08-17T07:16:35.627227Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T07:16:35.629739Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T07:16:41.813082Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T07:16:41.816400Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T07:21:11.808244Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T07:21:11.813857Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T07:21:13.412867Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T07:21:13.516611Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=50.518475ms elapsed_secs=0.050518475
2025-08-17T07:21:13.534543Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T07:21:13.621940Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=55.157431ms elapsed_secs=0.055157431
2025-08-17T07:21:13.651662Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=50.136661ms elapsed_secs=0.050136661
2025-08-17T07:21:13.784062Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=71.331824ms elapsed_secs=0.071331824
2025-08-17T07:21:46.315850Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T07:21:46.427385Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=55.067099ms elapsed_secs=0.055067099
2025-08-17T07:21:46.431419Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T07:21:46.648224Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=151.510235ms elapsed_secs=0.151510235
2025-08-17T07:21:47.635727Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T07:21:47.815119Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=1 rows_returned=1 elapsed=127.223454ms elapsed_secs=0.127223454
2025-08-17T07:21:47.819949Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T07:21:48.021168Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=1 rows_returned=1 elapsed=141.907415ms elapsed_secs=0.141907415
2025-08-17T07:23:16.474484Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T07:23:16.577811Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=50.226153ms elapsed_secs=0.050226153
2025-08-17T07:23:16.580321Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T07:23:16.684548Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=50.796638ms elapsed_secs=0.050796638
2025-08-17T07:23:35.685501Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /create
2025-08-17T07:23:35.897687Z DEBUG sqlx::query: summary="INSERT INTO loan_contract ( ‚Ä¶" db.statement="\n\nINSERT INTO\n  loan_contract (\n    tenant_id,\n    contact_id,\n    name,\n    principal,\n    interest_rate,\n    term_months,\n    date_start,\n    date_end,\n    collateral_description,\n    collateral_value,\n    storage_fee_rate,\n    storage_fee,\n    current_principal,\n    current_interest,\n    accumulated_interest,\n    total_paid_interest,\n    total_settlement_amount,\n    state\n  )\nVALUES\n  (\n    $1,\n    $2,\n    $3,\n    $4,\n    $5,\n    $6,\n    $7,\n    $8,\n    $9,\n    $10,\n    $11,\n    $12,\n    $13,\n    $14,\n    $15,\n    $16,\n    $17,\n    $18\n  )\nRETURNING\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\n" rows_affected=0 rows_returned=1 elapsed=104.590847ms elapsed_secs=0.104590847
2025-08-17T07:23:36.022711Z DEBUG sqlx::query: summary="INSERT INTO loan_transaction ( ‚Ä¶" db.statement="\n\nINSERT INTO\n  loan_transaction (\n    contract_id,\n    tenant_id,\n    contact_id,\n    transaction_type,\n    amount,\n    \"date\",\n    note\n  )\nVALUES\n  ($1, $2, $3, $4, $5, $6, $7)\n" rows_affected=1 rows_returned=0 elapsed=118.383312ms elapsed_secs=0.118383312
2025-08-17T07:23:36.074579Z DEBUG sqlx::query: summary="COMMIT" db.statement="" rows_affected=0 rows_returned=0 elapsed=49.53377ms elapsed_secs=0.04953377
2025-08-17T07:23:36.082050Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /02088c0d-6941-4a7d-8da8-4213f5c0f5d2
2025-08-17T07:23:36.099761Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T07:23:36.201577Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=48.892946ms elapsed_secs=0.048892946
2025-08-17T07:23:36.247056Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=103.176032ms elapsed_secs=0.103176032
2025-08-17T07:23:36.454752Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=1 rows_returned=1 elapsed=149.716971ms elapsed_secs=0.149716971
2025-08-17T07:23:36.460313Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /02088c0d-6941-4a7d-8da8-4213f5c0f5d2
2025-08-17T07:23:36.615934Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=97.88459ms elapsed_secs=0.09788459
2025-08-17T07:23:36.814717Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=1 rows_returned=1 elapsed=145.935308ms elapsed_secs=0.145935308
2025-08-17T07:27:18.200379Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T07:27:18.203485Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T07:27:18.821068Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T07:27:19.019162Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=140.353041ms elapsed_secs=0.140353041
2025-08-17T07:27:19.118912Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=47.860783ms elapsed_secs=0.047860783
2025-08-17T07:27:19.126204Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T07:27:19.231764Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=48.860338ms elapsed_secs=0.048860338
2025-08-17T07:27:19.330029Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=48.864085ms elapsed_secs=0.048864085
2025-08-17T07:27:36.956773Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T07:27:36.959508Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T07:27:37.453869Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T07:27:37.561498Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=54.09088ms elapsed_secs=0.05409088
2025-08-17T07:27:37.662731Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=52.689429ms elapsed_secs=0.052689429
2025-08-17T07:27:37.676405Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T07:27:37.778725Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=48.552818ms elapsed_secs=0.048552818
2025-08-17T07:27:37.881007Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=49.815522ms elapsed_secs=0.049815522
2025-08-17T07:30:30.302995Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T07:30:30.305098Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T07:30:30.814574Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T07:30:30.927256Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=58.280246ms elapsed_secs=0.058280246
2025-08-17T07:30:31.027703Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=49.346169ms elapsed_secs=0.049346169
2025-08-17T07:30:31.035019Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T07:30:31.134360Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=48.593568ms elapsed_secs=0.048593568
2025-08-17T07:30:31.233940Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=49.899584ms elapsed_secs=0.049899584
2025-08-17T07:30:37.194601Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T07:30:37.197290Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T07:30:38.817647Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T07:30:38.930179Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=57.644958ms elapsed_secs=0.057644958
2025-08-17T07:30:38.963431Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T07:30:39.037485Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=56.074577ms elapsed_secs=0.056074577
2025-08-17T07:30:39.088410Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=62.638362ms elapsed_secs=0.062638362
2025-08-17T07:30:39.197203Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=50.965548ms elapsed_secs=0.050965548
2025-08-17T07:31:27.879920Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T07:31:27.887188Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T07:31:29.369969Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats
2025-08-17T07:31:29.499121Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T07:31:29.529975Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats
2025-08-17T07:31:29.609050Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=53.497605ms elapsed_secs=0.053497605
2025-08-17T07:31:29.629438Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T07:31:29.710861Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=51.021156ms elapsed_secs=0.051021156
2025-08-17T07:31:29.749458Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=60.315736ms elapsed_secs=0.060315736
2025-08-17T07:31:29.849116Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=49.651888ms elapsed_secs=0.049651888
2025-08-17T07:32:00.992526Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T07:32:00.993905Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T07:32:02.472230Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats
2025-08-17T07:32:02.604113Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T07:32:02.633245Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats
2025-08-17T07:32:02.714839Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T07:32:02.726328Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=55.344023ms elapsed_secs=0.055344023
2025-08-17T07:32:02.822985Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=51.128824ms elapsed_secs=0.051128824
2025-08-17T07:32:02.903102Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=126.616782ms elapsed_secs=0.126616782
2025-08-17T07:32:02.963264Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=75.001222ms elapsed_secs=0.075001222
2025-08-17T07:46:15.277522Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T07:46:15.278669Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T07:46:17.596518Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T07:46:17.713266Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=52.861623ms elapsed_secs=0.052861623
2025-08-17T07:46:17.738944Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T07:46:17.768058Z DEBUG rustls::common_state: Sending warning alert CloseNotify    
2025-08-17T07:46:17.820461Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=54.949302ms elapsed_secs=0.054949302
2025-08-17T07:46:17.862464Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=49.150691ms elapsed_secs=0.049150691
2025-08-17T07:46:17.876072Z DEBUG rustls::common_state: Sending warning alert CloseNotify    
2025-08-17T07:46:17.913403Z DEBUG rustls::common_state: Sending warning alert CloseNotify    
2025-08-17T07:46:17.963239Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=50.029671ms elapsed_secs=0.050029671
2025-08-17T07:46:18.014876Z DEBUG rustls::common_state: Sending warning alert CloseNotify    
2025-08-17T07:47:22.771586Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T07:47:22.774744Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T07:47:24.845362Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T07:47:24.977843Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T07:47:25.071950Z DEBUG rustls::client::hs: No cached session for DnsName("ap-southeast-1.e4c6174f-6538-4e47-93bf-0a2503819047.aws.yugabyte.cloud")    
2025-08-17T07:47:25.073493Z DEBUG rustls::client::hs: Not resuming any session    
2025-08-17T07:47:25.165137Z DEBUG rustls::client::hs: No cached session for DnsName("ap-southeast-1.e4c6174f-6538-4e47-93bf-0a2503819047.aws.yugabyte.cloud")    
2025-08-17T07:47:25.168616Z DEBUG rustls::client::hs: Not resuming any session    
2025-08-17T07:47:25.199051Z DEBUG rustls::client::hs: Using ciphersuite TLS13_AES_256_GCM_SHA384    
2025-08-17T07:47:25.199579Z DEBUG rustls::client::tls13: Not resuming    
2025-08-17T07:47:25.200207Z DEBUG rustls::client::tls13: TLS1.3 encrypted extensions: []    
2025-08-17T07:47:25.200617Z DEBUG rustls::client::hs: ALPN protocol is None    
2025-08-17T07:47:25.200716Z DEBUG rustls::client::tls13: Got CertificateRequest CertificateRequestPayloadTLS13 { context: , extensions: [SignatureAlgorithms([ECDSA_NISTP256_SHA256, ECDSA_NISTP384_SHA384, ECDSA_NISTP521_SHA512, ED25519, ED448, Unknown(2057), Unknown(2058), Unknown(2059), RSA_PSS_SHA256, RSA_PSS_SHA384, RSA_PSS_SHA512, RSA_PKCS1_SHA256, RSA_PKCS1_SHA384, RSA_PKCS1_SHA512, Unknown(771), Unknown(769)]), AuthorityNames([DistinguishedName(305b31153013060355040a130c597567616279746520496e633142304006035504030c392a2e65346336313734662d363533382d346534372d393362662d3061323530333831393034372e6177732e79756761627974652e636c6f7564), DistinguishedName(30818b310b3009060355040613025553310b3009060355040813024341311230100603550407130953756e6e7976616c6531153013060355040a130c597567616279746520496e6331173015060355040b130e597567616279746520436c6f7564312b302906035504031322597567616279746520436c6f7564205375626f7264696e6174652043412070726f64), DistinguishedName(308184310b3009060355040613025553310b3009060355040813024341311230100603550407130953756e6e7976616c6531153013060355040a130c597567616279746520496e6331173015060355040b130e597567616279746520436c6f7564312430220603550403131b597567616279746520436c6f756420526f6f742043412070726f64)])] }    
2025-08-17T07:47:25.201033Z DEBUG rustls::client::common: Client auth requested but no cert/sigscheme available    
2025-08-17T07:47:25.270554Z DEBUG rustls::client::hs: Using ciphersuite TLS13_AES_256_GCM_SHA384    
2025-08-17T07:47:25.271132Z DEBUG rustls::client::tls13: Not resuming    
2025-08-17T07:47:25.271671Z DEBUG rustls::client::tls13: TLS1.3 encrypted extensions: []    
2025-08-17T07:47:25.272326Z DEBUG rustls::client::hs: ALPN protocol is None    
2025-08-17T07:47:25.273827Z DEBUG rustls::client::tls13: Got CertificateRequest CertificateRequestPayloadTLS13 { context: , extensions: [SignatureAlgorithms([ECDSA_NISTP256_SHA256, ECDSA_NISTP384_SHA384, ECDSA_NISTP521_SHA512, ED25519, ED448, Unknown(2057), Unknown(2058), Unknown(2059), RSA_PSS_SHA256, RSA_PSS_SHA384, RSA_PSS_SHA512, RSA_PKCS1_SHA256, RSA_PKCS1_SHA384, RSA_PKCS1_SHA512, Unknown(771), Unknown(769)]), AuthorityNames([DistinguishedName(305b31153013060355040a130c597567616279746520496e633142304006035504030c392a2e65346336313734662d363533382d346534372d393362662d3061323530333831393034372e6177732e79756761627974652e636c6f7564), DistinguishedName(30818b310b3009060355040613025553310b3009060355040813024341311230100603550407130953756e6e7976616c6531153013060355040a130c597567616279746520496e6331173015060355040b130e597567616279746520436c6f7564312b302906035504031322597567616279746520436c6f7564205375626f7264696e6174652043412070726f64), DistinguishedName(308184310b3009060355040613025553310b3009060355040813024341311230100603550407130953756e6e7976616c6531153013060355040a130c597567616279746520496e6331173015060355040b130e597567616279746520436c6f7564312430220603550403131b597567616279746520436c6f756420526f6f742043412070726f64)])] }    
2025-08-17T07:47:25.274109Z DEBUG rustls::client::common: Client auth requested but no cert/sigscheme available    
2025-08-17T07:47:25.530549Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=174.414201ms elapsed_secs=0.174414201
2025-08-17T07:47:25.583878Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=172.329808ms elapsed_secs=0.172329808
2025-08-17T07:47:25.641604Z DEBUG rustls::client::hs: No cached session for DnsName("ap-southeast-1.e4c6174f-6538-4e47-93bf-0a2503819047.aws.yugabyte.cloud")    
2025-08-17T07:47:25.650204Z DEBUG rustls::client::hs: Not resuming any session    
2025-08-17T07:47:25.705271Z DEBUG rustls::client::hs: No cached session for DnsName("ap-southeast-1.e4c6174f-6538-4e47-93bf-0a2503819047.aws.yugabyte.cloud")    
2025-08-17T07:47:25.708453Z DEBUG rustls::client::hs: Not resuming any session    
2025-08-17T07:47:25.751860Z DEBUG rustls::client::hs: Using ciphersuite TLS13_AES_256_GCM_SHA384    
2025-08-17T07:47:25.752201Z DEBUG rustls::client::tls13: Not resuming    
2025-08-17T07:47:25.752738Z DEBUG rustls::client::tls13: TLS1.3 encrypted extensions: []    
2025-08-17T07:47:25.752820Z DEBUG rustls::client::hs: ALPN protocol is None    
2025-08-17T07:47:25.752861Z DEBUG rustls::client::tls13: Got CertificateRequest CertificateRequestPayloadTLS13 { context: , extensions: [SignatureAlgorithms([ECDSA_NISTP256_SHA256, ECDSA_NISTP384_SHA384, ECDSA_NISTP521_SHA512, ED25519, ED448, Unknown(2057), Unknown(2058), Unknown(2059), RSA_PSS_SHA256, RSA_PSS_SHA384, RSA_PSS_SHA512, RSA_PKCS1_SHA256, RSA_PKCS1_SHA384, RSA_PKCS1_SHA512, Unknown(771), Unknown(769)]), AuthorityNames([DistinguishedName(305b31153013060355040a130c597567616279746520496e633142304006035504030c392a2e65346336313734662d363533382d346534372d393362662d3061323530333831393034372e6177732e79756761627974652e636c6f7564), DistinguishedName(30818b310b3009060355040613025553310b3009060355040813024341311230100603550407130953756e6e7976616c6531153013060355040a130c597567616279746520496e6331173015060355040b130e597567616279746520436c6f7564312b302906035504031322597567616279746520436c6f7564205375626f7264696e6174652043412070726f64), DistinguishedName(308184310b3009060355040613025553310b3009060355040813024341311230100603550407130953756e6e7976616c6531153013060355040a130c597567616279746520496e6331173015060355040b130e597567616279746520436c6f7564312430220603550403131b597567616279746520436c6f756420526f6f742043412070726f64)])] }    
2025-08-17T07:47:25.752900Z DEBUG rustls::client::common: Client auth requested but no cert/sigscheme available    
2025-08-17T07:47:25.815217Z DEBUG rustls::client::hs: Using ciphersuite TLS13_AES_256_GCM_SHA384    
2025-08-17T07:47:25.815719Z DEBUG rustls::client::tls13: Not resuming    
2025-08-17T07:47:25.816719Z DEBUG rustls::client::tls13: TLS1.3 encrypted extensions: []    
2025-08-17T07:47:25.816815Z DEBUG rustls::client::hs: ALPN protocol is None    
2025-08-17T07:47:25.816931Z DEBUG rustls::client::tls13: Got CertificateRequest CertificateRequestPayloadTLS13 { context: , extensions: [SignatureAlgorithms([ECDSA_NISTP256_SHA256, ECDSA_NISTP384_SHA384, ECDSA_NISTP521_SHA512, ED25519, ED448, Unknown(2057), Unknown(2058), Unknown(2059), RSA_PSS_SHA256, RSA_PSS_SHA384, RSA_PSS_SHA512, RSA_PKCS1_SHA256, RSA_PKCS1_SHA384, RSA_PKCS1_SHA512, Unknown(771), Unknown(769)]), AuthorityNames([DistinguishedName(305b31153013060355040a130c597567616279746520496e633142304006035504030c392a2e65346336313734662d363533382d346534372d393362662d3061323530333831393034372e6177732e79756761627974652e636c6f7564), DistinguishedName(30818b310b3009060355040613025553310b3009060355040813024341311230100603550407130953756e6e7976616c6531153013060355040a130c597567616279746520496e6331173015060355040b130e597567616279746520436c6f7564312b302906035504031322597567616279746520436c6f7564205375626f7264696e6174652043412070726f64), DistinguishedName(308184310b3009060355040613025553310b3009060355040813024341311230100603550407130953756e6e7976616c6531153013060355040a130c597567616279746520496e6331173015060355040b130e597567616279746520436c6f7564312430220603550403131b597567616279746520436c6f756420526f6f742043412070726f64)])] }    
2025-08-17T07:47:25.817655Z DEBUG rustls::client::common: Client auth requested but no cert/sigscheme available    
2025-08-17T07:47:26.054687Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=160.795218ms elapsed_secs=0.160795218
2025-08-17T07:47:26.124404Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=162.179915ms elapsed_secs=0.162179915
2025-08-17T07:49:30.203371Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T07:49:30.206822Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T07:49:32.119489Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8
2025-08-17T07:49:32.285097Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T07:49:32.310269Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8
2025-08-17T07:49:32.394058Z DEBUG sqlx::query: summary="SELECT to_char(date, 'YYYY-MM') as ‚Ä¶" db.statement="\n\nSELECT\n  to_char(date, 'YYYY-MM') as \"month!\",\n  SUM(\n    CASE\n      WHEN transaction_type IN ('disbursement', 'additional') THEN amount\n      ELSE 0\n    END\n  ) :: numeric as \"total_issued?\",\n  SUM(\n    CASE\n      WHEN transaction_type IN ('principal', 'interest') THEN amount\n      ELSE 0\n    END\n  ) :: numeric as \"total_repaid?\"\nFROM\n  loan_transaction\nWHERE\n  tenant_id = $1\nGROUP BY\n  1\nORDER BY\n  1\n" rows_affected=1 rows_returned=1 elapsed=175.010392ms elapsed_secs=0.175010392
2025-08-17T07:49:32.400751Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=60.653834ms elapsed_secs=0.060653834
2025-08-17T07:49:32.405658Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T07:49:32.505736Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=52.682871ms elapsed_secs=0.052682871
2025-08-17T07:49:32.539987Z DEBUG sqlx::query: summary="SELECT to_char(date, 'YYYY-MM') as ‚Ä¶" db.statement="\n\nSELECT\n  to_char(date, 'YYYY-MM') as \"month!\",\n  SUM(\n    CASE\n      WHEN transaction_type IN ('disbursement', 'additional') THEN amount\n      ELSE 0\n    END\n  ) :: numeric as \"total_issued?\",\n  SUM(\n    CASE\n      WHEN transaction_type IN ('principal', 'interest') THEN amount\n      ELSE 0\n    END\n  ) :: numeric as \"total_repaid?\"\nFROM\n  loan_transaction\nWHERE\n  tenant_id = $1\nGROUP BY\n  1\nORDER BY\n  1\n" rows_affected=1 rows_returned=1 elapsed=155.340817ms elapsed_secs=0.155340817
2025-08-17T07:49:32.616141Z DEBUG rustls::client::hs: No cached session for DnsName("ap-southeast-1.e4c6174f-6538-4e47-93bf-0a2503819047.aws.yugabyte.cloud")    
2025-08-17T07:49:32.619400Z DEBUG rustls::client::hs: Not resuming any session    
2025-08-17T07:49:32.722156Z DEBUG rustls::client::hs: Using ciphersuite TLS13_AES_256_GCM_SHA384    
2025-08-17T07:49:32.722416Z DEBUG rustls::client::tls13: Not resuming    
2025-08-17T07:49:32.724526Z DEBUG rustls::client::tls13: TLS1.3 encrypted extensions: []    
2025-08-17T07:49:32.725031Z DEBUG rustls::client::hs: ALPN protocol is None    
2025-08-17T07:49:32.725146Z DEBUG rustls::client::tls13: Got CertificateRequest CertificateRequestPayloadTLS13 { context: , extensions: [SignatureAlgorithms([ECDSA_NISTP256_SHA256, ECDSA_NISTP384_SHA384, ECDSA_NISTP521_SHA512, ED25519, ED448, Unknown(2057), Unknown(2058), Unknown(2059), RSA_PSS_SHA256, RSA_PSS_SHA384, RSA_PSS_SHA512, RSA_PKCS1_SHA256, RSA_PKCS1_SHA384, RSA_PKCS1_SHA512, Unknown(771), Unknown(769)]), AuthorityNames([DistinguishedName(305b31153013060355040a130c597567616279746520496e633142304006035504030c392a2e65346336313734662d363533382d346534372d393362662d3061323530333831393034372e6177732e79756761627974652e636c6f7564), DistinguishedName(30818b310b3009060355040613025553310b3009060355040813024341311230100603550407130953756e6e7976616c6531153013060355040a130c597567616279746520496e6331173015060355040b130e597567616279746520436c6f7564312b302906035504031322597567616279746520436c6f7564205375626f7264696e6174652043412070726f64), DistinguishedName(308184310b3009060355040613025553310b3009060355040813024341311230100603550407130953756e6e7976616c6531153013060355040a130c597567616279746520496e6331173015060355040b130e597567616279746520436c6f7564312430220603550403131b597567616279746520436c6f756420526f6f742043412070726f64)])] }    
2025-08-17T07:49:32.727230Z DEBUG rustls::client::common: Client auth requested but no cert/sigscheme available    
2025-08-17T07:49:33.039424Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=177.154652ms elapsed_secs=0.177154652
2025-08-17T07:49:33.208286Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=122.902948ms elapsed_secs=0.122902948
2025-08-17T07:49:39.249283Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8&day=17
2025-08-17T07:49:39.353328Z DEBUG sqlx::query: summary="SELECT to_char(date, 'YYYY-MM') as ‚Ä¶" db.statement="\n\nSELECT\n  to_char(date, 'YYYY-MM') as \"month!\",\n  SUM(\n    CASE\n      WHEN transaction_type IN ('disbursement', 'additional') THEN amount\n      ELSE 0\n    END\n  ) :: numeric as \"total_issued?\",\n  SUM(\n    CASE\n      WHEN transaction_type IN ('principal', 'interest') THEN amount\n      ELSE 0\n    END\n  ) :: numeric as \"total_repaid?\"\nFROM\n  loan_transaction\nWHERE\n  tenant_id = $1\nGROUP BY\n  1\nORDER BY\n  1\n" rows_affected=1 rows_returned=1 elapsed=50.024346ms elapsed_secs=0.050024346
2025-08-17T07:51:29.459105Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T07:51:29.459230Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T07:51:31.518951Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8
2025-08-17T07:51:31.647728Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T07:51:31.698598Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8
2025-08-17T07:51:31.744926Z DEBUG sqlx::query: summary="SELECT to_char(date, 'YYYY-MM') as ‚Ä¶" db.statement="\n\nSELECT\n  to_char(date, 'YYYY-MM') as \"month!\",\n  SUM(\n    CASE\n      WHEN transaction_type IN ('disbursement', 'additional') THEN amount\n      ELSE 0\n    END\n  ) :: numeric as \"total_issued?\",\n  SUM(\n    CASE\n      WHEN transaction_type IN ('principal', 'interest') THEN amount\n      ELSE 0\n    END\n  ) :: numeric as \"total_repaid?\"\nFROM\n  loan_transaction\nWHERE\n  tenant_id = $1\nGROUP BY\n  1\nORDER BY\n  1\n" rows_affected=1 rows_returned=1 elapsed=167.497718ms elapsed_secs=0.167497718
2025-08-17T07:51:31.796002Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T07:51:31.848298Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=141.323566ms elapsed_secs=0.141323566
2025-08-17T07:51:31.905068Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=48.414893ms elapsed_secs=0.048414893
2025-08-17T07:51:31.942242Z DEBUG sqlx::query: summary="SELECT to_char(date, 'YYYY-MM') as ‚Ä¶" db.statement="\n\nSELECT\n  to_char(date, 'YYYY-MM') as \"month!\",\n  SUM(\n    CASE\n      WHEN transaction_type IN ('disbursement', 'additional') THEN amount\n      ELSE 0\n    END\n  ) :: numeric as \"total_issued?\",\n  SUM(\n    CASE\n      WHEN transaction_type IN ('principal', 'interest') THEN amount\n      ELSE 0\n    END\n  ) :: numeric as \"total_repaid?\"\nFROM\n  loan_transaction\nWHERE\n  tenant_id = $1\nGROUP BY\n  1\nORDER BY\n  1\n" rows_affected=1 rows_returned=1 elapsed=172.377162ms elapsed_secs=0.172377162
2025-08-17T07:51:32.016081Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=58.162799ms elapsed_secs=0.058162799
2025-08-17T07:51:32.026556Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=118.197982ms elapsed_secs=0.118197982
2025-08-17T07:51:40.139916Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8&day=17
2025-08-17T07:51:40.236200Z DEBUG sqlx::query: summary="SELECT to_char(date, 'YYYY-MM') as ‚Ä¶" db.statement="\n\nSELECT\n  to_char(date, 'YYYY-MM') as \"month!\",\n  SUM(\n    CASE\n      WHEN transaction_type IN ('disbursement', 'additional') THEN amount\n      ELSE 0\n    END\n  ) :: numeric as \"total_issued?\",\n  SUM(\n    CASE\n      WHEN transaction_type IN ('principal', 'interest') THEN amount\n      ELSE 0\n    END\n  ) :: numeric as \"total_repaid?\"\nFROM\n  loan_transaction\nWHERE\n  tenant_id = $1\nGROUP BY\n  1\nORDER BY\n  1\n" rows_affected=1 rows_returned=1 elapsed=47.758354ms elapsed_secs=0.047758354
2025-08-17T07:51:47.023350Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025
2025-08-17T07:51:47.205525Z DEBUG sqlx::query: summary="SELECT to_char(date, 'YYYY-MM') as ‚Ä¶" db.statement="\n\nSELECT\n  to_char(date, 'YYYY-MM') as \"month!\",\n  SUM(\n    CASE\n      WHEN transaction_type IN ('disbursement', 'additional') THEN amount\n      ELSE 0\n    END\n  ) :: numeric as \"total_issued?\",\n  SUM(\n    CASE\n      WHEN transaction_type IN ('principal', 'interest') THEN amount\n      ELSE 0\n    END\n  ) :: numeric as \"total_repaid?\"\nFROM\n  loan_transaction\nWHERE\n  tenant_id = $1\nGROUP BY\n  1\nORDER BY\n  1\n" rows_affected=1 rows_returned=1 elapsed=135.107526ms elapsed_secs=0.135107526
2025-08-17T07:52:09.832142Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T07:52:09.835022Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T07:52:11.921090Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8
2025-08-17T07:52:12.055033Z DEBUG sqlx::query: summary="SELECT to_char(date, 'YYYY-MM') as ‚Ä¶" db.statement="\n\nSELECT\n  to_char(date, 'YYYY-MM') as \"month!\",\n  SUM(\n    CASE\n      WHEN transaction_type IN ('disbursement', 'additional') THEN amount\n      ELSE 0\n    END\n  ) :: numeric as \"total_issued?\",\n  SUM(\n    CASE\n      WHEN transaction_type IN ('principal', 'interest') THEN amount\n      ELSE 0\n    END\n  ) :: numeric as \"total_repaid?\"\nFROM\n  loan_transaction\nWHERE\n  tenant_id = $1\nGROUP BY\n  1\nORDER BY\n  1\n" rows_affected=1 rows_returned=1 elapsed=59.063366ms elapsed_secs=0.059063366
2025-08-17T07:52:12.093212Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T07:52:12.100578Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8
2025-08-17T07:52:12.184950Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T07:52:12.224253Z DEBUG sqlx::query: summary="SELECT to_char(date, 'YYYY-MM') as ‚Ä¶" db.statement="\n\nSELECT\n  to_char(date, 'YYYY-MM') as \"month!\",\n  SUM(\n    CASE\n      WHEN transaction_type IN ('disbursement', 'additional') THEN amount\n      ELSE 0\n    END\n  ) :: numeric as \"total_issued?\",\n  SUM(\n    CASE\n      WHEN transaction_type IN ('principal', 'interest') THEN amount\n      ELSE 0\n    END\n  ) :: numeric as \"total_repaid?\"\nFROM\n  loan_transaction\nWHERE\n  tenant_id = $1\nGROUP BY\n  1\nORDER BY\n  1\n" rows_affected=1 rows_returned=1 elapsed=50.205987ms elapsed_secs=0.050205987
2025-08-17T07:52:12.291701Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=48.294717ms elapsed_secs=0.048294717
2025-08-17T07:52:12.308397Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=151.730798ms elapsed_secs=0.151730798
2025-08-17T07:52:12.389653Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=45.64877ms elapsed_secs=0.04564877
2025-08-17T07:52:12.469069Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=107.048476ms elapsed_secs=0.107048476
2025-08-17T07:52:14.865937Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8&day=17
2025-08-17T07:52:14.990525Z DEBUG sqlx::query: summary="SELECT to_char(date, 'YYYY-MM') as ‚Ä¶" db.statement="\n\nSELECT\n  to_char(date, 'YYYY-MM') as \"month!\",\n  SUM(\n    CASE\n      WHEN transaction_type IN ('disbursement', 'additional') THEN amount\n      ELSE 0\n    END\n  ) :: numeric as \"total_issued?\",\n  SUM(\n    CASE\n      WHEN transaction_type IN ('principal', 'interest') THEN amount\n      ELSE 0\n    END\n  ) :: numeric as \"total_repaid?\"\nFROM\n  loan_transaction\nWHERE\n  tenant_id = $1\nGROUP BY\n  1\nORDER BY\n  1\n" rows_affected=1 rows_returned=1 elapsed=55.553255ms elapsed_secs=0.055553255
2025-08-17T07:52:41.593225Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T07:52:41.804809Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=149.877129ms elapsed_secs=0.149877129
2025-08-17T07:52:41.810516Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T07:52:42.019040Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=147.631926ms elapsed_secs=0.147631926
2025-08-17T07:53:02.514500Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /create
2025-08-17T07:53:02.761402Z DEBUG sqlx::query: summary="INSERT INTO loan_contract ( ‚Ä¶" db.statement="\n\nINSERT INTO\n  loan_contract (\n    tenant_id,\n    contact_id,\n    name,\n    principal,\n    interest_rate,\n    term_months,\n    date_start,\n    date_end,\n    collateral_description,\n    collateral_value,\n    storage_fee_rate,\n    storage_fee,\n    current_principal,\n    current_interest,\n    accumulated_interest,\n    total_paid_interest,\n    total_settlement_amount,\n    state\n  )\nVALUES\n  (\n    $1,\n    $2,\n    $3,\n    $4,\n    $5,\n    $6,\n    $7,\n    $8,\n    $9,\n    $10,\n    $11,\n    $12,\n    $13,\n    $14,\n    $15,\n    $16,\n    $17,\n    $18\n  )\nRETURNING\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\n" rows_affected=0 rows_returned=1 elapsed=132.489284ms elapsed_secs=0.132489284
2025-08-17T07:53:02.864242Z DEBUG sqlx::query: summary="INSERT INTO loan_transaction ( ‚Ä¶" db.statement="\n\nINSERT INTO\n  loan_transaction (\n    contract_id,\n    tenant_id,\n    contact_id,\n    transaction_type,\n    amount,\n    \"date\",\n    note\n  )\nVALUES\n  ($1, $2, $3, $4, $5, $6, $7)\n" rows_affected=1 rows_returned=0 elapsed=98.738309ms elapsed_secs=0.098738309
2025-08-17T07:53:02.913761Z DEBUG sqlx::query: summary="COMMIT" db.statement="" rows_affected=0 rows_returned=0 elapsed=47.853037ms elapsed_secs=0.047853037
2025-08-17T07:53:02.930397Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /1c91cf36-9488-4fb0-9af6-43ec17364c22
2025-08-17T07:53:02.952782Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T07:53:03.126844Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=134.576861ms elapsed_secs=0.134576861
2025-08-17T07:53:03.163239Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=150.312058ms elapsed_secs=0.150312058
2025-08-17T07:53:03.317722Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=1 rows_returned=1 elapsed=127.931368ms elapsed_secs=0.127931368
2025-08-17T07:53:03.321591Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /1c91cf36-9488-4fb0-9af6-43ec17364c22
2025-08-17T07:53:03.511627Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=130.06601ms elapsed_secs=0.13006601
2025-08-17T07:53:03.713794Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=1 rows_returned=1 elapsed=142.904316ms elapsed_secs=0.142904316
2025-08-17T07:53:06.042042Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8
2025-08-17T07:53:06.175224Z DEBUG sqlx::query: summary="SELECT to_char(date, 'YYYY-MM') as ‚Ä¶" db.statement="\n\nSELECT\n  to_char(date, 'YYYY-MM') as \"month!\",\n  SUM(\n    CASE\n      WHEN transaction_type IN ('disbursement', 'additional') THEN amount\n      ELSE 0\n    END\n  ) :: numeric as \"total_issued?\",\n  SUM(\n    CASE\n      WHEN transaction_type IN ('principal', 'interest') THEN amount\n      ELSE 0\n    END\n  ) :: numeric as \"total_repaid?\"\nFROM\n  loan_transaction\nWHERE\n  tenant_id = $1\nGROUP BY\n  1\nORDER BY\n  1\n" rows_affected=1 rows_returned=1 elapsed=54.07131ms elapsed_secs=0.05407131
2025-08-17T07:53:06.195297Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8
2025-08-17T07:53:06.303170Z DEBUG sqlx::query: summary="SELECT to_char(date, 'YYYY-MM') as ‚Ä¶" db.statement="\n\nSELECT\n  to_char(date, 'YYYY-MM') as \"month!\",\n  SUM(\n    CASE\n      WHEN transaction_type IN ('disbursement', 'additional') THEN amount\n      ELSE 0\n    END\n  ) :: numeric as \"total_issued?\",\n  SUM(\n    CASE\n      WHEN transaction_type IN ('principal', 'interest') THEN amount\n      ELSE 0\n    END\n  ) :: numeric as \"total_repaid?\"\nFROM\n  loan_transaction\nWHERE\n  tenant_id = $1\nGROUP BY\n  1\nORDER BY\n  1\n" rows_affected=1 rows_returned=1 elapsed=50.644142ms elapsed_secs=0.050644142
2025-08-17T07:53:11.634795Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T07:53:11.639528Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T07:53:12.263802Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8
2025-08-17T07:53:12.329563Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T07:53:12.362271Z DEBUG sqlx::query: summary="SELECT to_char(date, 'YYYY-MM') as ‚Ä¶" db.statement="\n\nSELECT\n  to_char(date, 'YYYY-MM') as \"month!\",\n  SUM(\n    CASE\n      WHEN transaction_type IN ('disbursement', 'additional') THEN amount\n      ELSE 0\n    END\n  ) :: numeric as \"total_issued?\",\n  SUM(\n    CASE\n      WHEN transaction_type IN ('principal', 'interest') THEN amount\n      ELSE 0\n    END\n  ) :: numeric as \"total_repaid?\"\nFROM\n  loan_transaction\nWHERE\n  tenant_id = $1\nGROUP BY\n  1\nORDER BY\n  1\n" rows_affected=1 rows_returned=1 elapsed=48.144064ms elapsed_secs=0.048144064
2025-08-17T07:53:12.365518Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8
2025-08-17T07:53:12.433544Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=51.94378ms elapsed_secs=0.05194378
2025-08-17T07:53:12.469240Z DEBUG sqlx::query: summary="SELECT to_char(date, 'YYYY-MM') as ‚Ä¶" db.statement="\n\nSELECT\n  to_char(date, 'YYYY-MM') as \"month!\",\n  SUM(\n    CASE\n      WHEN transaction_type IN ('disbursement', 'additional') THEN amount\n      ELSE 0\n    END\n  ) :: numeric as \"total_issued?\",\n  SUM(\n    CASE\n      WHEN transaction_type IN ('principal', 'interest') THEN amount\n      ELSE 0\n    END\n  ) :: numeric as \"total_repaid?\"\nFROM\n  loan_transaction\nWHERE\n  tenant_id = $1\nGROUP BY\n  1\nORDER BY\n  1\n" rows_affected=1 rows_returned=1 elapsed=52.915925ms elapsed_secs=0.052915925
2025-08-17T07:53:12.544591Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=50.411564ms elapsed_secs=0.050411564
2025-08-17T07:53:12.550808Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T07:53:12.660311Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=51.955516ms elapsed_secs=0.051955516
2025-08-17T07:53:12.762938Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=46.490713ms elapsed_secs=0.046490713
2025-08-17T07:53:21.052686Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T07:53:21.056303Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T07:53:23.076900Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8
2025-08-17T07:53:23.207033Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T07:53:23.223844Z DEBUG sqlx::query: summary="SELECT to_char(date, 'YYYY-MM') as ‚Ä¶" db.statement="\n\nSELECT\n  to_char(date, 'YYYY-MM') as \"month!\",\n  SUM(\n    CASE\n      WHEN transaction_type IN ('disbursement', 'additional') THEN amount\n      ELSE 0\n    END\n  ) :: numeric as \"total_issued?\",\n  SUM(\n    CASE\n      WHEN transaction_type IN ('principal', 'interest') THEN amount\n      ELSE 0\n    END\n  ) :: numeric as \"total_repaid?\"\nFROM\n  loan_transaction\nWHERE\n  tenant_id = $1\nGROUP BY\n  1\nORDER BY\n  1\n" rows_affected=1 rows_returned=1 elapsed=64.459683ms elapsed_secs=0.064459683
2025-08-17T07:53:23.248896Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8
2025-08-17T07:53:23.312404Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=49.824316ms elapsed_secs=0.049824316
2025-08-17T07:53:23.345445Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T07:53:23.374281Z DEBUG sqlx::query: summary="SELECT to_char(date, 'YYYY-MM') as ‚Ä¶" db.statement="\n\nSELECT\n  to_char(date, 'YYYY-MM') as \"month!\",\n  SUM(\n    CASE\n      WHEN transaction_type IN ('disbursement', 'additional') THEN amount\n      ELSE 0\n    END\n  ) :: numeric as \"total_issued?\",\n  SUM(\n    CASE\n      WHEN transaction_type IN ('principal', 'interest') THEN amount\n      ELSE 0\n    END\n  ) :: numeric as \"total_repaid?\"\nFROM\n  loan_transaction\nWHERE\n  tenant_id = $1\nGROUP BY\n  1\nORDER BY\n  1\n" rows_affected=1 rows_returned=1 elapsed=51.889039ms elapsed_secs=0.051889039
2025-08-17T07:53:23.421496Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=49.635249ms elapsed_secs=0.049635249
2025-08-17T07:53:23.459996Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=53.748156ms elapsed_secs=0.053748156
2025-08-17T07:53:23.566537Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=50.946433ms elapsed_secs=0.050946433
2025-08-17T07:53:25.055754Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8&day=17
2025-08-17T07:53:25.176229Z DEBUG sqlx::query: summary="SELECT to_char(date, 'YYYY-MM') as ‚Ä¶" db.statement="\n\nSELECT\n  to_char(date, 'YYYY-MM') as \"month!\",\n  SUM(\n    CASE\n      WHEN transaction_type IN ('disbursement', 'additional') THEN amount\n      ELSE 0\n    END\n  ) :: numeric as \"total_issued?\",\n  SUM(\n    CASE\n      WHEN transaction_type IN ('principal', 'interest') THEN amount\n      ELSE 0\n    END\n  ) :: numeric as \"total_repaid?\"\nFROM\n  loan_transaction\nWHERE\n  tenant_id = $1\nGROUP BY\n  1\nORDER BY\n  1\n" rows_affected=1 rows_returned=1 elapsed=50.27039ms elapsed_secs=0.05027039
2025-08-17T07:54:10.240421Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8
2025-08-17T07:54:10.361888Z DEBUG sqlx::query: summary="SELECT to_char(date, 'YYYY-MM') as ‚Ä¶" db.statement="\n\nSELECT\n  to_char(date, 'YYYY-MM') as \"month!\",\n  SUM(\n    CASE\n      WHEN transaction_type IN ('disbursement', 'additional') THEN amount\n      ELSE 0\n    END\n  ) :: numeric as \"total_issued?\",\n  SUM(\n    CASE\n      WHEN transaction_type IN ('principal', 'interest') THEN amount\n      ELSE 0\n    END\n  ) :: numeric as \"total_repaid?\"\nFROM\n  loan_transaction\nWHERE\n  tenant_id = $1\nGROUP BY\n  1\nORDER BY\n  1\n" rows_affected=1 rows_returned=1 elapsed=53.306548ms elapsed_secs=0.053306548
2025-08-17T07:54:11.538974Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025
2025-08-17T07:54:11.662086Z DEBUG sqlx::query: summary="SELECT to_char(date, 'YYYY-MM') as ‚Ä¶" db.statement="\n\nSELECT\n  to_char(date, 'YYYY-MM') as \"month!\",\n  SUM(\n    CASE\n      WHEN transaction_type IN ('disbursement', 'additional') THEN amount\n      ELSE 0\n    END\n  ) :: numeric as \"total_issued?\",\n  SUM(\n    CASE\n      WHEN transaction_type IN ('principal', 'interest') THEN amount\n      ELSE 0\n    END\n  ) :: numeric as \"total_repaid?\"\nFROM\n  loan_transaction\nWHERE\n  tenant_id = $1\nGROUP BY\n  1\nORDER BY\n  1\n" rows_affected=1 rows_returned=1 elapsed=55.497126ms elapsed_secs=0.055497126
2025-08-17T07:54:27.778978Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T07:54:27.876942Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=47.693739ms elapsed_secs=0.047693739
2025-08-17T07:54:27.880808Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T07:54:27.984095Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=48.903639ms elapsed_secs=0.048903639
2025-08-17T07:54:46.206924Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /create
2025-08-17T07:54:46.365187Z DEBUG sqlx::query: summary="INSERT INTO loan_contract ( ‚Ä¶" db.statement="\n\nINSERT INTO\n  loan_contract (\n    tenant_id,\n    contact_id,\n    name,\n    principal,\n    interest_rate,\n    term_months,\n    date_start,\n    date_end,\n    collateral_description,\n    collateral_value,\n    storage_fee_rate,\n    storage_fee,\n    current_principal,\n    current_interest,\n    accumulated_interest,\n    total_paid_interest,\n    total_settlement_amount,\n    state\n  )\nVALUES\n  (\n    $1,\n    $2,\n    $3,\n    $4,\n    $5,\n    $6,\n    $7,\n    $8,\n    $9,\n    $10,\n    $11,\n    $12,\n    $13,\n    $14,\n    $15,\n    $16,\n    $17,\n    $18\n  )\nRETURNING\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\n" rows_affected=0 rows_returned=1 elapsed=54.381302ms elapsed_secs=0.054381302
2025-08-17T07:54:46.416614Z DEBUG sqlx::query: summary="INSERT INTO loan_transaction ( ‚Ä¶" db.statement="\n\nINSERT INTO\n  loan_transaction (\n    contract_id,\n    tenant_id,\n    contact_id,\n    transaction_type,\n    amount,\n    \"date\",\n    note\n  )\nVALUES\n  ($1, $2, $3, $4, $5, $6, $7)\n" rows_affected=1 rows_returned=0 elapsed=48.979066ms elapsed_secs=0.048979066
2025-08-17T07:54:46.476848Z DEBUG sqlx::query: summary="COMMIT" db.statement="" rows_affected=0 rows_returned=0 elapsed=57.294157ms elapsed_secs=0.057294157
2025-08-17T07:54:46.485008Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /f5370ad9-ceac-46e2-9ec5-2b2d99d22ef0
2025-08-17T07:54:46.501148Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T07:54:46.587193Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=48.653778ms elapsed_secs=0.048653778
2025-08-17T07:54:46.610007Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=49.081069ms elapsed_secs=0.049081069
2025-08-17T07:54:46.685456Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=1 rows_returned=1 elapsed=46.751222ms elapsed_secs=0.046751222
2025-08-17T07:54:46.688273Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /f5370ad9-ceac-46e2-9ec5-2b2d99d22ef0
2025-08-17T07:54:46.791340Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=50.354692ms elapsed_secs=0.050354692
2025-08-17T07:54:46.893374Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=1 rows_returned=1 elapsed=49.036548ms elapsed_secs=0.049036548
2025-08-17T07:54:48.348688Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8
2025-08-17T07:54:48.470284Z DEBUG sqlx::query: summary="SELECT to_char(date, 'YYYY-MM') as ‚Ä¶" db.statement="\n\nSELECT\n  to_char(date, 'YYYY-MM') as \"month!\",\n  SUM(\n    CASE\n      WHEN transaction_type IN ('disbursement', 'additional') THEN amount\n      ELSE 0\n    END\n  ) :: numeric as \"total_issued?\",\n  SUM(\n    CASE\n      WHEN transaction_type IN ('principal', 'interest') THEN amount\n      ELSE 0\n    END\n  ) :: numeric as \"total_repaid?\"\nFROM\n  loan_transaction\nWHERE\n  tenant_id = $1\nGROUP BY\n  1\nORDER BY\n  1\n" rows_affected=1 rows_returned=1 elapsed=52.898042ms elapsed_secs=0.052898042
2025-08-17T07:54:48.479851Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8
2025-08-17T07:54:48.603393Z DEBUG sqlx::query: summary="SELECT to_char(date, 'YYYY-MM') as ‚Ä¶" db.statement="\n\nSELECT\n  to_char(date, 'YYYY-MM') as \"month!\",\n  SUM(\n    CASE\n      WHEN transaction_type IN ('disbursement', 'additional') THEN amount\n      ELSE 0\n    END\n  ) :: numeric as \"total_issued?\",\n  SUM(\n    CASE\n      WHEN transaction_type IN ('principal', 'interest') THEN amount\n      ELSE 0\n    END\n  ) :: numeric as \"total_repaid?\"\nFROM\n  loan_transaction\nWHERE\n  tenant_id = $1\nGROUP BY\n  1\nORDER BY\n  1\n" rows_affected=1 rows_returned=1 elapsed=69.569651ms elapsed_secs=0.069569651
2025-08-17T07:54:51.464088Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T07:54:51.467312Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T07:54:52.042240Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8
2025-08-17T07:54:52.120557Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T07:54:52.140144Z DEBUG sqlx::query: summary="SELECT to_char(date, 'YYYY-MM') as ‚Ä¶" db.statement="\n\nSELECT\n  to_char(date, 'YYYY-MM') as \"month!\",\n  SUM(\n    CASE\n      WHEN transaction_type IN ('disbursement', 'additional') THEN amount\n      ELSE 0\n    END\n  ) :: numeric as \"total_issued?\",\n  SUM(\n    CASE\n      WHEN transaction_type IN ('principal', 'interest') THEN amount\n      ELSE 0\n    END\n  ) :: numeric as \"total_repaid?\"\nFROM\n  loan_transaction\nWHERE\n  tenant_id = $1\nGROUP BY\n  1\nORDER BY\n  1\n" rows_affected=1 rows_returned=1 elapsed=48.146817ms elapsed_secs=0.048146817
2025-08-17T07:54:52.145056Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8
2025-08-17T07:54:52.225186Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=50.375145ms elapsed_secs=0.050375145
2025-08-17T07:54:52.244382Z DEBUG sqlx::query: summary="SELECT to_char(date, 'YYYY-MM') as ‚Ä¶" db.statement="\n\nSELECT\n  to_char(date, 'YYYY-MM') as \"month!\",\n  SUM(\n    CASE\n      WHEN transaction_type IN ('disbursement', 'additional') THEN amount\n      ELSE 0\n    END\n  ) :: numeric as \"total_issued?\",\n  SUM(\n    CASE\n      WHEN transaction_type IN ('principal', 'interest') THEN amount\n      ELSE 0\n    END\n  ) :: numeric as \"total_repaid?\"\nFROM\n  loan_transaction\nWHERE\n  tenant_id = $1\nGROUP BY\n  1\nORDER BY\n  1\n" rows_affected=1 rows_returned=1 elapsed=52.082653ms elapsed_secs=0.052082653
2025-08-17T07:54:52.324013Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=48.764911ms elapsed_secs=0.048764911
2025-08-17T07:54:52.329457Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T07:54:52.441476Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=51.402846ms elapsed_secs=0.051402846
2025-08-17T07:54:52.544489Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=48.704986ms elapsed_secs=0.048704986
2025-08-17T07:54:55.368992Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025
2025-08-17T07:54:55.480627Z DEBUG sqlx::query: summary="SELECT to_char(date, 'YYYY-MM') as ‚Ä¶" db.statement="\n\nSELECT\n  to_char(date, 'YYYY-MM') as \"month!\",\n  SUM(\n    CASE\n      WHEN transaction_type IN ('disbursement', 'additional') THEN amount\n      ELSE 0\n    END\n  ) :: numeric as \"total_issued?\",\n  SUM(\n    CASE\n      WHEN transaction_type IN ('principal', 'interest') THEN amount\n      ELSE 0\n    END\n  ) :: numeric as \"total_repaid?\"\nFROM\n  loan_transaction\nWHERE\n  tenant_id = $1\nGROUP BY\n  1\nORDER BY\n  1\n" rows_affected=1 rows_returned=1 elapsed=50.708053ms elapsed_secs=0.050708053
2025-08-17T07:54:56.187051Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8
2025-08-17T07:54:56.289211Z DEBUG sqlx::query: summary="SELECT to_char(date, 'YYYY-MM') as ‚Ä¶" db.statement="\n\nSELECT\n  to_char(date, 'YYYY-MM') as \"month!\",\n  SUM(\n    CASE\n      WHEN transaction_type IN ('disbursement', 'additional') THEN amount\n      ELSE 0\n    END\n  ) :: numeric as \"total_issued?\",\n  SUM(\n    CASE\n      WHEN transaction_type IN ('principal', 'interest') THEN amount\n      ELSE 0\n    END\n  ) :: numeric as \"total_repaid?\"\nFROM\n  loan_transaction\nWHERE\n  tenant_id = $1\nGROUP BY\n  1\nORDER BY\n  1\n" rows_affected=1 rows_returned=1 elapsed=48.612989ms elapsed_secs=0.048612989
2025-08-17T07:54:58.295281Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8&day=17
2025-08-17T07:54:58.410030Z DEBUG sqlx::query: summary="SELECT to_char(date, 'YYYY-MM') as ‚Ä¶" db.statement="\n\nSELECT\n  to_char(date, 'YYYY-MM') as \"month!\",\n  SUM(\n    CASE\n      WHEN transaction_type IN ('disbursement', 'additional') THEN amount\n      ELSE 0\n    END\n  ) :: numeric as \"total_issued?\",\n  SUM(\n    CASE\n      WHEN transaction_type IN ('principal', 'interest') THEN amount\n      ELSE 0\n    END\n  ) :: numeric as \"total_repaid?\"\nFROM\n  loan_transaction\nWHERE\n  tenant_id = $1\nGROUP BY\n  1\nORDER BY\n  1\n" rows_affected=1 rows_returned=1 elapsed=50.69491ms elapsed_secs=0.05069491
2025-08-17T07:54:58.783469Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8
2025-08-17T07:54:58.890115Z DEBUG sqlx::query: summary="SELECT to_char(date, 'YYYY-MM') as ‚Ä¶" db.statement="\n\nSELECT\n  to_char(date, 'YYYY-MM') as \"month!\",\n  SUM(\n    CASE\n      WHEN transaction_type IN ('disbursement', 'additional') THEN amount\n      ELSE 0\n    END\n  ) :: numeric as \"total_issued?\",\n  SUM(\n    CASE\n      WHEN transaction_type IN ('principal', 'interest') THEN amount\n      ELSE 0\n    END\n  ) :: numeric as \"total_repaid?\"\nFROM\n  loan_transaction\nWHERE\n  tenant_id = $1\nGROUP BY\n  1\nORDER BY\n  1\n" rows_affected=1 rows_returned=1 elapsed=53.631402ms elapsed_secs=0.053631402
2025-08-17T07:55:05.660742Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T07:55:05.676470Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T07:55:07.722506Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8
2025-08-17T07:55:07.839605Z DEBUG sqlx::query: summary="SELECT to_char(date, 'YYYY-MM') as ‚Ä¶" db.statement="\n\nSELECT\n  to_char(date, 'YYYY-MM') as \"month!\",\n  SUM(\n    CASE\n      WHEN transaction_type IN ('disbursement', 'additional') THEN amount\n      ELSE 0\n    END\n  ) :: numeric as \"total_issued?\",\n  SUM(\n    CASE\n      WHEN transaction_type IN ('principal', 'interest') THEN amount\n      ELSE 0\n    END\n  ) :: numeric as \"total_repaid?\"\nFROM\n  loan_transaction\nWHERE\n  tenant_id = $1\nGROUP BY\n  1\nORDER BY\n  1\n" rows_affected=1 rows_returned=1 elapsed=52.137207ms elapsed_secs=0.052137207
2025-08-17T07:55:07.887297Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T07:55:07.896395Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8
2025-08-17T07:55:07.987120Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T07:55:07.997641Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=50.808029ms elapsed_secs=0.050808029
2025-08-17T07:55:08.010998Z DEBUG sqlx::query: summary="SELECT to_char(date, 'YYYY-MM') as ‚Ä¶" db.statement="\n\nSELECT\n  to_char(date, 'YYYY-MM') as \"month!\",\n  SUM(\n    CASE\n      WHEN transaction_type IN ('disbursement', 'additional') THEN amount\n      ELSE 0\n    END\n  ) :: numeric as \"total_issued?\",\n  SUM(\n    CASE\n      WHEN transaction_type IN ('principal', 'interest') THEN amount\n      ELSE 0\n    END\n  ) :: numeric as \"total_repaid?\"\nFROM\n  loan_transaction\nWHERE\n  tenant_id = $1\nGROUP BY\n  1\nORDER BY\n  1\n" rows_affected=1 rows_returned=1 elapsed=47.708806ms elapsed_secs=0.047708806
2025-08-17T07:55:08.097009Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=52.851ms elapsed_secs=0.052851
2025-08-17T07:55:08.105108Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=50.443505ms elapsed_secs=0.050443505
2025-08-17T07:55:08.196626Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=47.364654ms elapsed_secs=0.047364654
2025-08-17T07:55:14.603331Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8&day=17
2025-08-17T07:55:14.709123Z DEBUG sqlx::query: summary="SELECT to_char(date, 'YYYY-MM') as ‚Ä¶" db.statement="\n\nSELECT\n  to_char(date, 'YYYY-MM') as \"month!\",\n  SUM(\n    CASE\n      WHEN transaction_type IN ('disbursement', 'additional') THEN amount\n      ELSE 0\n    END\n  ) :: numeric as \"total_issued?\",\n  SUM(\n    CASE\n      WHEN transaction_type IN ('principal', 'interest') THEN amount\n      ELSE 0\n    END\n  ) :: numeric as \"total_repaid?\"\nFROM\n  loan_transaction\nWHERE\n  tenant_id = $1\nGROUP BY\n  1\nORDER BY\n  1\n" rows_affected=1 rows_returned=1 elapsed=53.202586ms elapsed_secs=0.053202586
2025-08-17T08:07:53.703994Z  WARN sqlx_postgres::options::parse: ignoring unrecognized connect parameter key=ssl value=true
2025-08-17T08:07:54.007914Z DEBUG rustls::client::hs: No cached session for DnsName("ap-southeast-1.e4c6174f-6538-4e47-93bf-0a2503819047.aws.yugabyte.cloud")    
2025-08-17T08:07:54.009531Z DEBUG rustls::client::hs: Not resuming any session    
2025-08-17T08:07:54.103883Z DEBUG rustls::client::hs: Using ciphersuite TLS13_AES_256_GCM_SHA384    
2025-08-17T08:07:54.104114Z DEBUG rustls::client::tls13: Not resuming    
2025-08-17T08:07:54.104336Z DEBUG rustls::client::tls13: TLS1.3 encrypted extensions: []    
2025-08-17T08:07:54.104921Z DEBUG rustls::client::hs: ALPN protocol is None    
2025-08-17T08:07:54.105024Z DEBUG rustls::client::tls13: Got CertificateRequest CertificateRequestPayloadTLS13 { context: , extensions: [SignatureAlgorithms([ECDSA_NISTP256_SHA256, ECDSA_NISTP384_SHA384, ECDSA_NISTP521_SHA512, ED25519, ED448, Unknown(2057), Unknown(2058), Unknown(2059), RSA_PSS_SHA256, RSA_PSS_SHA384, RSA_PSS_SHA512, RSA_PKCS1_SHA256, RSA_PKCS1_SHA384, RSA_PKCS1_SHA512, Unknown(771), Unknown(769)]), AuthorityNames([DistinguishedName(305b31153013060355040a130c597567616279746520496e633142304006035504030c392a2e65346336313734662d363533382d346534372d393362662d3061323530333831393034372e6177732e79756761627974652e636c6f7564), DistinguishedName(30818b310b3009060355040613025553310b3009060355040813024341311230100603550407130953756e6e7976616c6531153013060355040a130c597567616279746520496e6331173015060355040b130e597567616279746520436c6f7564312b302906035504031322597567616279746520436c6f7564205375626f7264696e6174652043412070726f64), DistinguishedName(308184310b3009060355040613025553310b3009060355040813024341311230100603550407130953756e6e7976616c6531153013060355040a130c597567616279746520496e6331173015060355040b130e597567616279746520436c6f7564312430220603550403131b597567616279746520436c6f756420526f6f742043412070726f64)])] }    
2025-08-17T08:07:54.105377Z DEBUG rustls::client::common: Client auth requested but no cert/sigscheme available    
2025-08-17T08:07:54.438661Z DEBUG sqlx::query: summary="INSERT INTO available_module (module_name, ‚Ä¶" db.statement="\n\nINSERT INTO\n  available_module (module_name, display_name, description, metadata)\nVALUES\n  ($1, $2, $3, $4) ON CONFLICT (module_name) DO\nUPDATE\nSET\n  display_name = EXCLUDED.display_name,\n  description = EXCLUDED.description,\n  metadata = EXCLUDED.metadata\n" rows_affected=1 rows_returned=0 elapsed=146.215571ms elapsed_secs=0.146215571
2025-08-17T08:08:01.014751Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T08:08:01.018230Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T08:08:01.563088Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8
2025-08-17T08:08:01.643254Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T08:08:01.774817Z DEBUG rustls::client::hs: No cached session for DnsName("ap-southeast-1.e4c6174f-6538-4e47-93bf-0a2503819047.aws.yugabyte.cloud")    
2025-08-17T08:08:01.775131Z DEBUG rustls::client::hs: Not resuming any session    
2025-08-17T08:08:01.780710Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN transaction_type IN ('disbursement', 'additional') THEN amount\n      ELSE 0\n    END\n  ) :: numeric as total_issued,\n  SUM(\n    CASE\n      WHEN transaction_type IN ('principal', 'interest') THEN amount\n      ELSE 0\n    END\n  ) :: numeric as total_repaid\nFROM\n  loan_transaction\nWHERE\n  tenant_id = $1\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=1 rows_returned=1 elapsed=168.86109ms elapsed_secs=0.16886109
2025-08-17T08:08:01.786018Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8
2025-08-17T08:08:01.874349Z DEBUG rustls::client::hs: Using ciphersuite TLS13_AES_256_GCM_SHA384    
2025-08-17T08:08:01.874979Z DEBUG rustls::client::tls13: Not resuming    
2025-08-17T08:08:01.877584Z DEBUG rustls::client::tls13: TLS1.3 encrypted extensions: []    
2025-08-17T08:08:01.878939Z DEBUG rustls::client::hs: ALPN protocol is None    
2025-08-17T08:08:01.879005Z DEBUG rustls::client::tls13: Got CertificateRequest CertificateRequestPayloadTLS13 { context: , extensions: [SignatureAlgorithms([ECDSA_NISTP256_SHA256, ECDSA_NISTP384_SHA384, ECDSA_NISTP521_SHA512, ED25519, ED448, Unknown(2057), Unknown(2058), Unknown(2059), RSA_PSS_SHA256, RSA_PSS_SHA384, RSA_PSS_SHA512, RSA_PKCS1_SHA256, RSA_PKCS1_SHA384, RSA_PKCS1_SHA512, Unknown(771), Unknown(769)]), AuthorityNames([DistinguishedName(305b31153013060355040a130c597567616279746520496e633142304006035504030c392a2e65346336313734662d363533382d346534372d393362662d3061323530333831393034372e6177732e79756761627974652e636c6f7564), DistinguishedName(30818b310b3009060355040613025553310b3009060355040813024341311230100603550407130953756e6e7976616c6531153013060355040a130c597567616279746520496e6331173015060355040b130e597567616279746520436c6f7564312b302906035504031322597567616279746520436c6f7564205375626f7264696e6174652043412070726f64), DistinguishedName(308184310b3009060355040613025553310b3009060355040813024341311230100603550407130953756e6e7976616c6531153013060355040a130c597567616279746520496e6331173015060355040b130e597567616279746520436c6f7564312430220603550403131b597567616279746520436c6f756420526f6f742043412070726f64)])] }    
2025-08-17T08:08:01.879040Z DEBUG rustls::client::common: Client auth requested but no cert/sigscheme available    
2025-08-17T08:08:01.988296Z DEBUG rustls::client::hs: No cached session for DnsName("ap-southeast-1.e4c6174f-6538-4e47-93bf-0a2503819047.aws.yugabyte.cloud")    
2025-08-17T08:08:01.989578Z DEBUG rustls::client::hs: Not resuming any session    
2025-08-17T08:08:02.085887Z DEBUG rustls::client::hs: Using ciphersuite TLS13_AES_256_GCM_SHA384    
2025-08-17T08:08:02.086124Z DEBUG rustls::client::tls13: Not resuming    
2025-08-17T08:08:02.086368Z DEBUG rustls::client::tls13: TLS1.3 encrypted extensions: []    
2025-08-17T08:08:02.086383Z DEBUG rustls::client::hs: ALPN protocol is None    
2025-08-17T08:08:02.086412Z DEBUG rustls::client::tls13: Got CertificateRequest CertificateRequestPayloadTLS13 { context: , extensions: [SignatureAlgorithms([ECDSA_NISTP256_SHA256, ECDSA_NISTP384_SHA384, ECDSA_NISTP521_SHA512, ED25519, ED448, Unknown(2057), Unknown(2058), Unknown(2059), RSA_PSS_SHA256, RSA_PSS_SHA384, RSA_PSS_SHA512, RSA_PKCS1_SHA256, RSA_PKCS1_SHA384, RSA_PKCS1_SHA512, Unknown(771), Unknown(769)]), AuthorityNames([DistinguishedName(305b31153013060355040a130c597567616279746520496e633142304006035504030c392a2e65346336313734662d363533382d346534372d393362662d3061323530333831393034372e6177732e79756761627974652e636c6f7564), DistinguishedName(30818b310b3009060355040613025553310b3009060355040813024341311230100603550407130953756e6e7976616c6531153013060355040a130c597567616279746520496e6331173015060355040b130e597567616279746520436c6f7564312b302906035504031322597567616279746520436c6f7564205375626f7264696e6174652043412070726f64), DistinguishedName(308184310b3009060355040613025553310b3009060355040813024341311230100603550407130953756e6e7976616c6531153013060355040a130c597567616279746520496e6331173015060355040b130e597567616279746520436c6f7564312430220603550403131b597567616279746520436c6f756420526f6f742043412070726f64)])] }    
2025-08-17T08:08:02.086823Z DEBUG rustls::client::common: Client auth requested but no cert/sigscheme available    
2025-08-17T08:08:02.208791Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=183.050724ms elapsed_secs=0.183050724
2025-08-17T08:08:02.383560Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=123.915128ms elapsed_secs=0.123915128
2025-08-17T08:08:02.397657Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T08:08:02.425714Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN transaction_type IN ('disbursement', 'additional') THEN amount\n      ELSE 0\n    END\n  ) :: numeric as total_issued,\n  SUM(\n    CASE\n      WHEN transaction_type IN ('principal', 'interest') THEN amount\n      ELSE 0\n    END\n  ) :: numeric as total_repaid\nFROM\n  loan_transaction\nWHERE\n  tenant_id = $1\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=1 rows_returned=1 elapsed=198.113581ms elapsed_secs=0.198113581
2025-08-17T08:08:02.503032Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=51.105379ms elapsed_secs=0.051105379
2025-08-17T08:08:02.596047Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=46.079808ms elapsed_secs=0.046079808
2025-08-17T08:08:09.942668Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T08:08:09.946390Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T08:08:11.374805Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8
2025-08-17T08:08:11.474696Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN transaction_type IN ('disbursement', 'additional') THEN amount\n      ELSE 0\n    END\n  ) :: numeric as total_issued,\n  SUM(\n    CASE\n      WHEN transaction_type IN ('principal', 'interest') THEN amount\n      ELSE 0\n    END\n  ) :: numeric as total_repaid\nFROM\n  loan_transaction\nWHERE\n  tenant_id = $1\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=1 rows_returned=1 elapsed=49.093957ms elapsed_secs=0.049093957
2025-08-17T08:08:11.497336Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T08:08:11.525899Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8
2025-08-17T08:08:11.606081Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=52.720945ms elapsed_secs=0.052720945
2025-08-17T08:08:11.617595Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T08:08:11.637741Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN transaction_type IN ('disbursement', 'additional') THEN amount\n      ELSE 0\n    END\n  ) :: numeric as total_issued,\n  SUM(\n    CASE\n      WHEN transaction_type IN ('principal', 'interest') THEN amount\n      ELSE 0\n    END\n  ) :: numeric as total_repaid\nFROM\n  loan_transaction\nWHERE\n  tenant_id = $1\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=1 rows_returned=1 elapsed=49.094563ms elapsed_secs=0.049094563
2025-08-17T08:08:11.738369Z DEBUG rustls::client::hs: No cached session for DnsName("ap-southeast-1.e4c6174f-6538-4e47-93bf-0a2503819047.aws.yugabyte.cloud")    
2025-08-17T08:08:11.740068Z DEBUG rustls::client::hs: Not resuming any session    
2025-08-17T08:08:11.797528Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=137.532431ms elapsed_secs=0.137532431
2025-08-17T08:08:11.843016Z DEBUG rustls::client::hs: Using ciphersuite TLS13_AES_256_GCM_SHA384    
2025-08-17T08:08:11.845656Z DEBUG rustls::client::tls13: Not resuming    
2025-08-17T08:08:11.858129Z DEBUG rustls::client::tls13: TLS1.3 encrypted extensions: []    
2025-08-17T08:08:11.860331Z DEBUG rustls::client::hs: ALPN protocol is None    
2025-08-17T08:08:11.862135Z DEBUG rustls::client::tls13: Got CertificateRequest CertificateRequestPayloadTLS13 { context: , extensions: [SignatureAlgorithms([ECDSA_NISTP256_SHA256, ECDSA_NISTP384_SHA384, ECDSA_NISTP521_SHA512, ED25519, ED448, Unknown(2057), Unknown(2058), Unknown(2059), RSA_PSS_SHA256, RSA_PSS_SHA384, RSA_PSS_SHA512, RSA_PKCS1_SHA256, RSA_PKCS1_SHA384, RSA_PKCS1_SHA512, Unknown(771), Unknown(769)]), AuthorityNames([DistinguishedName(305b31153013060355040a130c597567616279746520496e633142304006035504030c392a2e65346336313734662d363533382d346534372d393362662d3061323530333831393034372e6177732e79756761627974652e636c6f7564), DistinguishedName(30818b310b3009060355040613025553310b3009060355040813024341311230100603550407130953756e6e7976616c6531153013060355040a130c597567616279746520496e6331173015060355040b130e597567616279746520436c6f7564312b302906035504031322597567616279746520436c6f7564205375626f7264696e6174652043412070726f64), DistinguishedName(308184310b3009060355040613025553310b3009060355040813024341311230100603550407130953756e6e7976616c6531153013060355040a130c597567616279746520496e6331173015060355040b130e597567616279746520436c6f7564312430220603550403131b597567616279746520436c6f756420526f6f742043412070726f64)])] }    
2025-08-17T08:08:11.863714Z DEBUG rustls::client::common: Client auth requested but no cert/sigscheme available    
2025-08-17T08:08:12.162556Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=173.814094ms elapsed_secs=0.173814094
2025-08-17T08:08:12.342125Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=129.585002ms elapsed_secs=0.129585002
2025-08-17T08:08:15.065610Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8&day=17
2025-08-17T08:08:15.172167Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN transaction_type IN ('disbursement', 'additional') THEN amount\n      ELSE 0\n    END\n  ) :: numeric as total_issued,\n  SUM(\n    CASE\n      WHEN transaction_type IN ('principal', 'interest') THEN amount\n      ELSE 0\n    END\n  ) :: numeric as total_repaid\nFROM\n  loan_transaction\nWHERE\n  tenant_id = $1\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=1 rows_returned=1 elapsed=50.380166ms elapsed_secs=0.050380166
2025-08-17T08:22:17.588961Z  WARN sqlx_postgres::options::parse: ignoring unrecognized connect parameter key=ssl value=true
2025-08-17T08:22:17.811178Z DEBUG rustls::client::hs: No cached session for DnsName("ap-southeast-1.e4c6174f-6538-4e47-93bf-0a2503819047.aws.yugabyte.cloud")    
2025-08-17T08:22:17.811505Z DEBUG rustls::client::hs: Not resuming any session    
2025-08-17T08:22:17.904965Z DEBUG rustls::client::hs: Using ciphersuite TLS13_AES_256_GCM_SHA384    
2025-08-17T08:22:17.905413Z DEBUG rustls::client::tls13: Not resuming    
2025-08-17T08:22:17.906941Z DEBUG rustls::client::tls13: TLS1.3 encrypted extensions: []    
2025-08-17T08:22:17.907100Z DEBUG rustls::client::hs: ALPN protocol is None    
2025-08-17T08:22:17.907254Z DEBUG rustls::client::tls13: Got CertificateRequest CertificateRequestPayloadTLS13 { context: , extensions: [SignatureAlgorithms([ECDSA_NISTP256_SHA256, ECDSA_NISTP384_SHA384, ECDSA_NISTP521_SHA512, ED25519, ED448, Unknown(2057), Unknown(2058), Unknown(2059), RSA_PSS_SHA256, RSA_PSS_SHA384, RSA_PSS_SHA512, RSA_PKCS1_SHA256, RSA_PKCS1_SHA384, RSA_PKCS1_SHA512, Unknown(771), Unknown(769)]), AuthorityNames([DistinguishedName(305b31153013060355040a130c597567616279746520496e633142304006035504030c392a2e65346336313734662d363533382d346534372d393362662d3061323530333831393034372e6177732e79756761627974652e636c6f7564), DistinguishedName(30818b310b3009060355040613025553310b3009060355040813024341311230100603550407130953756e6e7976616c6531153013060355040a130c597567616279746520496e6331173015060355040b130e597567616279746520436c6f7564312b302906035504031322597567616279746520436c6f7564205375626f7264696e6174652043412070726f64), DistinguishedName(308184310b3009060355040613025553310b3009060355040813024341311230100603550407130953756e6e7976616c6531153013060355040a130c597567616279746520496e6331173015060355040b130e597567616279746520436c6f7564312430220603550403131b597567616279746520436c6f756420526f6f742043412070726f64)])] }    
2025-08-17T08:22:17.907672Z DEBUG rustls::client::common: Client auth requested but no cert/sigscheme available    
2025-08-17T08:22:18.286792Z DEBUG sqlx::query: summary="INSERT INTO available_module (module_name, ‚Ä¶" db.statement="\n\nINSERT INTO\n  available_module (module_name, display_name, description, metadata)\nVALUES\n  ($1, $2, $3, $4) ON CONFLICT (module_name) DO\nUPDATE\nSET\n  display_name = EXCLUDED.display_name,\n  description = EXCLUDED.description,\n  metadata = EXCLUDED.metadata\n" rows_affected=1 rows_returned=0 elapsed=144.324434ms elapsed_secs=0.144324434
2025-08-17T08:22:35.696220Z DEBUG sqlx::query: summary="SELECT tenant_id, shard_id FROM ‚Ä¶" db.statement="\n\nSELECT\n  tenant_id,\n  shard_id\nFROM\n  tenant\nWHERE\n  slug = $1\n" rows_affected=0 rows_returned=1 elapsed=117.125867ms elapsed_secs=0.117125867
2025-08-17T08:22:35.916396Z DEBUG rustls::client::hs: No cached session for DnsName("ap-southeast-1.e4c6174f-6538-4e47-93bf-0a2503819047.aws.yugabyte.cloud")    
2025-08-17T08:22:35.917394Z DEBUG rustls::client::hs: Not resuming any session    
2025-08-17T08:22:36.022409Z DEBUG rustls::client::hs: Using ciphersuite TLS13_AES_256_GCM_SHA384    
2025-08-17T08:22:36.023400Z DEBUG rustls::client::tls13: Not resuming    
2025-08-17T08:22:36.028363Z DEBUG rustls::client::tls13: TLS1.3 encrypted extensions: []    
2025-08-17T08:22:36.028877Z DEBUG rustls::client::hs: ALPN protocol is None    
2025-08-17T08:22:36.029120Z DEBUG rustls::client::tls13: Got CertificateRequest CertificateRequestPayloadTLS13 { context: , extensions: [SignatureAlgorithms([ECDSA_NISTP256_SHA256, ECDSA_NISTP384_SHA384, ECDSA_NISTP521_SHA512, ED25519, ED448, Unknown(2057), Unknown(2058), Unknown(2059), RSA_PSS_SHA256, RSA_PSS_SHA384, RSA_PSS_SHA512, RSA_PKCS1_SHA256, RSA_PKCS1_SHA384, RSA_PKCS1_SHA512, Unknown(771), Unknown(769)]), AuthorityNames([DistinguishedName(305b31153013060355040a130c597567616279746520496e633142304006035504030c392a2e65346336313734662d363533382d346534372d393362662d3061323530333831393034372e6177732e79756761627974652e636c6f7564), DistinguishedName(30818b310b3009060355040613025553310b3009060355040813024341311230100603550407130953756e6e7976616c6531153013060355040a130c597567616279746520496e6331173015060355040b130e597567616279746520436c6f7564312b302906035504031322597567616279746520436c6f7564205375626f7264696e6174652043412070726f64), DistinguishedName(308184310b3009060355040613025553310b3009060355040813024341311230100603550407130953756e6e7976616c6531153013060355040a130c597567616279746520496e6331173015060355040b130e597567616279746520436c6f7564312430220603550403131b597567616279746520436c6f756420526f6f742043412070726f64)])] }    
2025-08-17T08:22:36.030052Z DEBUG rustls::client::common: Client auth requested but no cert/sigscheme available    
2025-08-17T08:22:36.296478Z DEBUG sqlx::query: summary="SELECT tenant_id, user_id, email, ‚Ä¶" db.statement="\n\nSELECT\n  tenant_id,\n  user_id,\n  email,\n  name,\n  password_hash\nFROM\n  users\nWHERE\n  email = $1\n  AND tenant_id = $2\n" rows_affected=0 rows_returned=1 elapsed=147.907587ms elapsed_secs=0.147907587
2025-08-17T08:22:37.288073Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8
2025-08-17T08:22:37.363238Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T08:22:37.499379Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=1 rows_returned=1 elapsed=161.706625ms elapsed_secs=0.161706625
2025-08-17T08:22:37.502352Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8
2025-08-17T08:22:37.544016Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=132.624827ms elapsed_secs=0.132624827
2025-08-17T08:22:37.630129Z DEBUG rustls::client::hs: No cached session for DnsName("ap-southeast-1.e4c6174f-6538-4e47-93bf-0a2503819047.aws.yugabyte.cloud")    
2025-08-17T08:22:37.633453Z DEBUG rustls::client::hs: Not resuming any session    
2025-08-17T08:22:37.652674Z DEBUG rustls::client::hs: No cached session for DnsName("ap-southeast-1.e4c6174f-6538-4e47-93bf-0a2503819047.aws.yugabyte.cloud")    
2025-08-17T08:22:37.654606Z DEBUG rustls::client::hs: Not resuming any session    
2025-08-17T08:22:37.734490Z DEBUG rustls::client::hs: Using ciphersuite TLS13_AES_256_GCM_SHA384    
2025-08-17T08:22:37.737977Z DEBUG rustls::client::tls13: Not resuming    
2025-08-17T08:22:37.738822Z DEBUG rustls::client::tls13: TLS1.3 encrypted extensions: []    
2025-08-17T08:22:37.738886Z DEBUG rustls::client::hs: ALPN protocol is None    
2025-08-17T08:22:37.738934Z DEBUG rustls::client::tls13: Got CertificateRequest CertificateRequestPayloadTLS13 { context: , extensions: [SignatureAlgorithms([ECDSA_NISTP256_SHA256, ECDSA_NISTP384_SHA384, ECDSA_NISTP521_SHA512, ED25519, ED448, Unknown(2057), Unknown(2058), Unknown(2059), RSA_PSS_SHA256, RSA_PSS_SHA384, RSA_PSS_SHA512, RSA_PKCS1_SHA256, RSA_PKCS1_SHA384, RSA_PKCS1_SHA512, Unknown(771), Unknown(769)]), AuthorityNames([DistinguishedName(305b31153013060355040a130c597567616279746520496e633142304006035504030c392a2e65346336313734662d363533382d346534372d393362662d3061323530333831393034372e6177732e79756761627974652e636c6f7564), DistinguishedName(30818b310b3009060355040613025553310b3009060355040813024341311230100603550407130953756e6e7976616c6531153013060355040a130c597567616279746520496e6331173015060355040b130e597567616279746520436c6f7564312b302906035504031322597567616279746520436c6f7564205375626f7264696e6174652043412070726f64), DistinguishedName(308184310b3009060355040613025553310b3009060355040813024341311230100603550407130953756e6e7976616c6531153013060355040a130c597567616279746520496e6331173015060355040b130e597567616279746520436c6f7564312430220603550403131b597567616279746520436c6f756420526f6f742043412070726f64)])] }    
2025-08-17T08:22:37.739021Z DEBUG rustls::client::common: Client auth requested but no cert/sigscheme available    
2025-08-17T08:22:37.760191Z DEBUG rustls::client::hs: Using ciphersuite TLS13_AES_256_GCM_SHA384    
2025-08-17T08:22:37.760647Z DEBUG rustls::client::tls13: Not resuming    
2025-08-17T08:22:37.760906Z DEBUG rustls::client::tls13: TLS1.3 encrypted extensions: []    
2025-08-17T08:22:37.760987Z DEBUG rustls::client::hs: ALPN protocol is None    
2025-08-17T08:22:37.761564Z DEBUG rustls::client::tls13: Got CertificateRequest CertificateRequestPayloadTLS13 { context: , extensions: [SignatureAlgorithms([ECDSA_NISTP256_SHA256, ECDSA_NISTP384_SHA384, ECDSA_NISTP521_SHA512, ED25519, ED448, Unknown(2057), Unknown(2058), Unknown(2059), RSA_PSS_SHA256, RSA_PSS_SHA384, RSA_PSS_SHA512, RSA_PKCS1_SHA256, RSA_PKCS1_SHA384, RSA_PKCS1_SHA512, Unknown(771), Unknown(769)]), AuthorityNames([DistinguishedName(305b31153013060355040a130c597567616279746520496e633142304006035504030c392a2e65346336313734662d363533382d346534372d393362662d3061323530333831393034372e6177732e79756761627974652e636c6f7564), DistinguishedName(30818b310b3009060355040613025553310b3009060355040813024341311230100603550407130953756e6e7976616c6531153013060355040a130c597567616279746520496e6331173015060355040b130e597567616279746520436c6f7564312b302906035504031322597567616279746520436c6f7564205375626f7264696e6174652043412070726f64), DistinguishedName(308184310b3009060355040613025553310b3009060355040813024341311230100603550407130953756e6e7976616c6531153013060355040a130c597567616279746520496e6331173015060355040b130e597567616279746520436c6f7564312430220603550403131b597567616279746520436c6f756420526f6f742043412070726f64)])] }    
2025-08-17T08:22:37.762122Z DEBUG rustls::client::common: Client auth requested but no cert/sigscheme available    
2025-08-17T08:22:38.072031Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=178.1989ms elapsed_secs=0.1781989
2025-08-17T08:22:38.078033Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T08:22:38.110052Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=1 rows_returned=1 elapsed=216.867911ms elapsed_secs=0.216867911
2025-08-17T08:22:38.264800Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=136.841027ms elapsed_secs=0.136841027
2025-08-17T08:22:38.439079Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=128.583877ms elapsed_secs=0.128583877
2025-08-17T08:22:45.597784Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025
2025-08-17T08:22:45.822987Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=1 rows_returned=1 elapsed=168.182981ms elapsed_secs=0.168182981
2025-08-17T08:22:46.493484Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8
2025-08-17T08:22:46.607201Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=1 rows_returned=1 elapsed=51.55221ms elapsed_secs=0.05155221
2025-08-17T08:22:47.194685Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8&day=17
2025-08-17T08:22:47.291461Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=1 rows_returned=1 elapsed=46.545797ms elapsed_secs=0.046545797
2025-08-17T08:22:50.699311Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8
2025-08-17T08:22:50.905798Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=1 rows_returned=1 elapsed=150.978068ms elapsed_secs=0.150978068
2025-08-17T08:23:04.221092Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:23:04.422259Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=147.278542ms elapsed_secs=0.147278542
2025-08-17T08:23:04.431344Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:23:04.650724Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=149.66107ms elapsed_secs=0.14966107
2025-08-17T08:23:32.583484Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /create
2025-08-17T08:23:32.831421Z DEBUG sqlx::query: summary="INSERT INTO loan_contract ( ‚Ä¶" db.statement="\n\nINSERT INTO\n  loan_contract (\n    tenant_id,\n    contact_id,\n    name,\n    principal,\n    interest_rate,\n    term_months,\n    date_start,\n    date_end,\n    collateral_description,\n    collateral_value,\n    storage_fee_rate,\n    storage_fee,\n    current_principal,\n    current_interest,\n    accumulated_interest,\n    total_paid_interest,\n    total_settlement_amount,\n    state\n  )\nVALUES\n  (\n    $1,\n    $2,\n    $3,\n    $4,\n    $5,\n    $6,\n    $7,\n    $8,\n    $9,\n    $10,\n    $11,\n    $12,\n    $13,\n    $14,\n    $15,\n    $16,\n    $17,\n    $18\n  )\nRETURNING\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\n" rows_affected=0 rows_returned=1 elapsed=129.879859ms elapsed_secs=0.129879859
2025-08-17T08:23:32.934202Z DEBUG sqlx::query: summary="INSERT INTO loan_transaction ( ‚Ä¶" db.statement="\n\nINSERT INTO\n  loan_transaction (\n    contract_id,\n    tenant_id,\n    contact_id,\n    transaction_type,\n    amount,\n    \"date\",\n    note\n  )\nVALUES\n  ($1, $2, $3, $4, $5, $6, $7)\n" rows_affected=1 rows_returned=0 elapsed=96.109549ms elapsed_secs=0.096109549
2025-08-17T08:23:32.980430Z DEBUG sqlx::query: summary="COMMIT" db.statement="" rows_affected=0 rows_returned=0 elapsed=45.669828ms elapsed_secs=0.045669828
2025-08-17T08:23:32.985503Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /e48e0f6a-7636-47a7-b036-4c7fa41fa443
2025-08-17T08:23:33.009189Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:23:33.113116Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=48.815402ms elapsed_secs=0.048815402
2025-08-17T08:23:33.157979Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=123.629735ms elapsed_secs=0.123629735
2025-08-17T08:23:33.361291Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=1 rows_returned=1 elapsed=133.253258ms elapsed_secs=0.133253258
2025-08-17T08:23:33.369497Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /e48e0f6a-7636-47a7-b036-4c7fa41fa443
2025-08-17T08:23:33.520394Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=94.809537ms elapsed_secs=0.094809537
2025-08-17T08:23:33.703023Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=1 rows_returned=1 elapsed=128.647559ms elapsed_secs=0.128647559
2025-08-17T08:23:35.036308Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8
2025-08-17T08:23:35.131868Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=1 rows_returned=1 elapsed=46.880864ms elapsed_secs=0.046880864
2025-08-17T08:23:35.134281Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8
2025-08-17T08:23:35.233108Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=1 rows_returned=1 elapsed=48.77061ms elapsed_secs=0.04877061
2025-08-17T08:23:38.837043Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T08:23:38.839007Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T08:23:39.331254Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8
2025-08-17T08:23:39.388466Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T08:23:39.431745Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=1 rows_returned=1 elapsed=47.933795ms elapsed_secs=0.047933795
2025-08-17T08:23:39.438367Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8
2025-08-17T08:23:39.539186Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=1 rows_returned=1 elapsed=49.536606ms elapsed_secs=0.049536606
2025-08-17T08:23:39.585190Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=142.420131ms elapsed_secs=0.142420131
2025-08-17T08:23:39.781579Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=127.242357ms elapsed_secs=0.127242357
2025-08-17T08:23:39.788222Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T08:23:39.888499Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=47.685208ms elapsed_secs=0.047685208
2025-08-17T08:23:39.982123Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=48.065326ms elapsed_secs=0.048065326
2025-08-17T08:23:42.674831Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8&day=17
2025-08-17T08:23:42.780380Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=1 rows_returned=1 elapsed=49.39918ms elapsed_secs=0.04939918
2025-08-17T08:23:53.436041Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T08:23:53.439531Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T08:23:54.986990Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8
2025-08-17T08:23:55.093960Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=1 rows_returned=1 elapsed=53.962933ms elapsed_secs=0.053962933
2025-08-17T08:23:55.122809Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T08:23:55.193640Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8
2025-08-17T08:23:55.235786Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=48.680337ms elapsed_secs=0.048680337
2025-08-17T08:23:55.262827Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T08:23:55.292747Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=1 rows_returned=1 elapsed=46.72903ms elapsed_secs=0.04672903
2025-08-17T08:23:55.345865Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=55.153411ms elapsed_secs=0.055153411
2025-08-17T08:23:55.451655Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=135.179842ms elapsed_secs=0.135179842
2025-08-17T08:23:55.636174Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=132.501954ms elapsed_secs=0.132501954
2025-08-17T08:24:26.224715Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:24:26.389201Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=5 rows_returned=5 elapsed=115.059948ms elapsed_secs=0.115059948
2025-08-17T08:24:26.392944Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:24:26.585014Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=5 rows_returned=5 elapsed=129.995873ms elapsed_secs=0.129995873
2025-08-17T08:24:27.226156Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:24:27.227395Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /1c91cf36-9488-4fb0-9af6-43ec17364c22
2025-08-17T08:24:27.322029Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=45.842296ms elapsed_secs=0.045842296
2025-08-17T08:24:27.326268Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=48.607109ms elapsed_secs=0.048607109
2025-08-17T08:24:27.329286Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:24:27.434982Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=49.466953ms elapsed_secs=0.049466953
2025-08-17T08:24:27.503963Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=1 rows_returned=1 elapsed=125.288546ms elapsed_secs=0.125288546
2025-08-17T08:24:27.506737Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /1c91cf36-9488-4fb0-9af6-43ec17364c22
2025-08-17T08:24:27.604985Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=46.733542ms elapsed_secs=0.046733542
2025-08-17T08:24:27.706466Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=1 rows_returned=1 elapsed=47.835559ms elapsed_secs=0.047835559
2025-08-17T08:24:57.229708Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /1c91cf36-9488-4fb0-9af6-43ec17364c22/update
2025-08-17T08:24:57.458385Z DEBUG sqlx::query: summary="UPDATE loan_contract SET contact_id ‚Ä¶" db.statement="\n\nUPDATE\n  loan_contract\nSET\n  contact_id = $1,\n  name = $2,\n  principal = $3,\n  interest_rate = $4,\n  term_months = $5,\n  date_start = $6,\n  date_end = $7,\n  collateral_description = $8,\n  collateral_value = $9,\n  updated_at = NOW()\nWHERE\n  id = $10\n  AND tenant_id = $11\nRETURNING\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\n" rows_affected=0 rows_returned=1 elapsed=117.141015ms elapsed_secs=0.117141015
2025-08-17T08:24:57.564019Z DEBUG sqlx::query: summary="DELETE FROM loan_transaction WHERE ‚Ä¶" db.statement="\n\nDELETE FROM\n  loan_transaction\nWHERE\n  contract_id = $1\n  AND tenant_id = $2\n" rows_affected=1 rows_returned=0 elapsed=102.203353ms elapsed_secs=0.102203353
2025-08-17T08:24:57.666612Z DEBUG sqlx::query: summary="INSERT INTO loan_transaction ( ‚Ä¶" db.statement="\n\nINSERT INTO\n  loan_transaction (\n    contract_id,\n    tenant_id,\n    contact_id,\n    transaction_type,\n    amount,\n    \"date\",\n    note\n  )\nVALUES\n  ($1, $2, $3, $4, $5, $6, $7)\n" rows_affected=1 rows_returned=0 elapsed=99.675923ms elapsed_secs=0.099675923
2025-08-17T08:24:57.717258Z DEBUG sqlx::query: summary="COMMIT" db.statement="" rows_affected=0 rows_returned=0 elapsed=50.128807ms elapsed_secs=0.050128807
2025-08-17T08:24:57.725317Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /1c91cf36-9488-4fb0-9af6-43ec17364c22
2025-08-17T08:24:57.833296Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=48.771566ms elapsed_secs=0.048771566
2025-08-17T08:24:58.045582Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=1 rows_returned=1 elapsed=157.359263ms elapsed_secs=0.157359263
2025-08-17T08:24:59.903026Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8
2025-08-17T08:25:00.011286Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=2 rows_returned=2 elapsed=49.655443ms elapsed_secs=0.049655443
2025-08-17T08:25:00.013800Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8
2025-08-17T08:25:00.117871Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=2 rows_returned=2 elapsed=50.827966ms elapsed_secs=0.050827966
2025-08-17T08:25:02.919414Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T08:25:02.921457Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T08:25:03.467432Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8
2025-08-17T08:25:03.552091Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T08:25:03.569715Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=2 rows_returned=2 elapsed=46.618399ms elapsed_secs=0.046618399
2025-08-17T08:25:03.588029Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8
2025-08-17T08:25:03.656523Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=48.593359ms elapsed_secs=0.048593359
2025-08-17T08:25:03.693984Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=2 rows_returned=2 elapsed=50.692545ms elapsed_secs=0.050692545
2025-08-17T08:25:03.764409Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=54.577344ms elapsed_secs=0.054577344
2025-08-17T08:25:03.771767Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T08:25:03.873915Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=48.34002ms elapsed_secs=0.04834002
2025-08-17T08:25:03.967473Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=46.361349ms elapsed_secs=0.046361349
2025-08-17T08:25:11.490232Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T08:25:11.491973Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T08:25:12.906880Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8
2025-08-17T08:25:13.019356Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=2 rows_returned=2 elapsed=58.652891ms elapsed_secs=0.058652891
2025-08-17T08:25:13.023853Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T08:25:13.049952Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8
2025-08-17T08:25:13.125666Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=50.642836ms elapsed_secs=0.050642836
2025-08-17T08:25:13.141687Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T08:25:13.203092Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=2 rows_returned=2 elapsed=50.732943ms elapsed_secs=0.050732943
2025-08-17T08:25:13.272356Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=49.087875ms elapsed_secs=0.049087875
2025-08-17T08:25:13.287204Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=59.315221ms elapsed_secs=0.059315221
2025-08-17T08:25:13.399173Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=55.893636ms elapsed_secs=0.055893636
2025-08-17T08:27:52.527296Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8&range=monthly
2025-08-17T08:27:52.630341Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=2 rows_returned=2 elapsed=46.533594ms elapsed_secs=0.046533594
2025-08-17T08:28:01.698443Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T08:28:01.700561Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T08:28:02.238925Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8&range=monthly
2025-08-17T08:28:02.329185Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T08:28:02.335962Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=2 rows_returned=2 elapsed=46.669915ms elapsed_secs=0.046669915
2025-08-17T08:28:02.339309Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8&range=monthly
2025-08-17T08:28:02.428670Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=49.621423ms elapsed_secs=0.049621423
2025-08-17T08:28:02.450237Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=2 rows_returned=2 elapsed=59.38555ms elapsed_secs=0.05938555
2025-08-17T08:28:02.523501Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=46.167578ms elapsed_secs=0.046167578
2025-08-17T08:28:02.526399Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T08:28:02.625350Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=46.973676ms elapsed_secs=0.046973676
2025-08-17T08:28:02.724424Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=48.327458ms elapsed_secs=0.048327458
2025-08-17T08:28:07.022443Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8&day=17&range=daily
2025-08-17T08:28:07.178334Z DEBUG sqlx::query: summary="SELECT EXTRACT(DAY FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    DAY\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\n  AND EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) = $3\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=4 rows_returned=4 elapsed=97.486155ms elapsed_secs=0.097486155
2025-08-17T08:28:14.959657Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8&range=monthly
2025-08-17T08:28:15.073432Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=2 rows_returned=2 elapsed=57.001736ms elapsed_secs=0.057001736
2025-08-17T08:28:16.497301Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=yearly
2025-08-17T08:28:16.643593Z DEBUG sqlx::query: summary="SELECT EXTRACT(YEAR FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=1 rows_returned=1 elapsed=93.698701ms elapsed_secs=0.093698701
2025-08-17T08:28:18.315870Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8&range=monthly
2025-08-17T08:28:18.419886Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=2 rows_returned=2 elapsed=48.545779ms elapsed_secs=0.048545779
2025-08-17T08:28:26.156063Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8&day=17&range=daily
2025-08-17T08:28:26.260916Z DEBUG sqlx::query: summary="SELECT EXTRACT(DAY FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    DAY\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\n  AND EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) = $3\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=4 rows_returned=4 elapsed=52.122566ms elapsed_secs=0.052122566
2025-08-17T08:28:38.443844Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:28:38.612781Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=118.502274ms elapsed_secs=0.118502274
2025-08-17T08:28:38.615502Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:28:38.790022Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=119.03581ms elapsed_secs=0.11903581
2025-08-17T08:29:32.832935Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /create
2025-08-17T08:29:33.083035Z DEBUG sqlx::query: summary="INSERT INTO loan_contract ( ‚Ä¶" db.statement="\n\nINSERT INTO\n  loan_contract (\n    tenant_id,\n    contact_id,\n    name,\n    principal,\n    interest_rate,\n    term_months,\n    date_start,\n    date_end,\n    collateral_description,\n    collateral_value,\n    storage_fee_rate,\n    storage_fee,\n    current_principal,\n    current_interest,\n    accumulated_interest,\n    total_paid_interest,\n    total_settlement_amount,\n    state\n  )\nVALUES\n  (\n    $1,\n    $2,\n    $3,\n    $4,\n    $5,\n    $6,\n    $7,\n    $8,\n    $9,\n    $10,\n    $11,\n    $12,\n    $13,\n    $14,\n    $15,\n    $16,\n    $17,\n    $18\n  )\nRETURNING\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\n" rows_affected=0 rows_returned=1 elapsed=140.740984ms elapsed_secs=0.140740984
2025-08-17T08:29:33.187323Z DEBUG sqlx::query: summary="INSERT INTO loan_transaction ( ‚Ä¶" db.statement="\n\nINSERT INTO\n  loan_transaction (\n    contract_id,\n    tenant_id,\n    contact_id,\n    transaction_type,\n    amount,\n    \"date\",\n    note\n  )\nVALUES\n  ($1, $2, $3, $4, $5, $6, $7)\n" rows_affected=1 rows_returned=0 elapsed=100.427121ms elapsed_secs=0.100427121
2025-08-17T08:29:33.237575Z DEBUG sqlx::query: summary="COMMIT" db.statement="" rows_affected=0 rows_returned=0 elapsed=49.493126ms elapsed_secs=0.049493126
2025-08-17T08:29:33.248356Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /2db4cabd-565f-4b7c-a5f6-8140665c1330
2025-08-17T08:29:33.267340Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:29:33.365298Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=47.010079ms elapsed_secs=0.047010079
2025-08-17T08:29:33.403694Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=100.984734ms elapsed_secs=0.100984734
2025-08-17T08:29:33.503260Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=1 rows_returned=1 elapsed=46.488345ms elapsed_secs=0.046488345
2025-08-17T08:29:33.505576Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /2db4cabd-565f-4b7c-a5f6-8140665c1330
2025-08-17T08:29:33.653969Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=95.023609ms elapsed_secs=0.095023609
2025-08-17T08:29:33.752372Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=1 rows_returned=1 elapsed=46.74659ms elapsed_secs=0.04674659
2025-08-17T08:29:37.125779Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8&range=monthly
2025-08-17T08:29:37.228028Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=49.692137ms elapsed_secs=0.049692137
2025-08-17T08:29:37.230309Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8&range=monthly
2025-08-17T08:29:37.325894Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=46.831967ms elapsed_secs=0.046831967
2025-08-17T08:29:40.896226Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T08:29:40.900259Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T08:29:41.369786Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8&range=monthly
2025-08-17T08:29:41.445728Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T08:29:41.473994Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=48.951138ms elapsed_secs=0.048951138
2025-08-17T08:29:41.476258Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8&range=monthly
2025-08-17T08:29:41.544213Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=47.158284ms elapsed_secs=0.047158284
2025-08-17T08:29:41.585972Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=56.006398ms elapsed_secs=0.056006398
2025-08-17T08:29:41.640659Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=48.693823ms elapsed_secs=0.048693823
2025-08-17T08:29:41.644072Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T08:29:41.743131Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=49.674576ms elapsed_secs=0.049674576
2025-08-17T08:29:41.835354Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=45.372117ms elapsed_secs=0.045372117
2025-08-17T08:29:45.752668Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8&day=17&range=daily
2025-08-17T08:29:45.855182Z DEBUG sqlx::query: summary="SELECT EXTRACT(DAY FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    DAY\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\n  AND EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) = $3\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=4 rows_returned=4 elapsed=49.532235ms elapsed_secs=0.049532235
2025-08-17T08:30:39.454409Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:30:39.603334Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=92.186607ms elapsed_secs=0.092186607
2025-08-17T08:30:39.612555Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:30:39.763880Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=96.559665ms elapsed_secs=0.096559665
2025-08-17T08:30:41.216777Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /1e1f4286-5474-4043-8e7d-a8721da008fa
2025-08-17T08:30:41.217064Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:30:41.319230Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=47.012034ms elapsed_secs=0.047012034
2025-08-17T08:30:41.328787Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=52.486912ms elapsed_secs=0.052486912
2025-08-17T08:30:41.332301Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:30:41.414892Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=2 rows_returned=2 elapsed=45.968886ms elapsed_secs=0.045968886
2025-08-17T08:30:41.417341Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /1e1f4286-5474-4043-8e7d-a8721da008fa
2025-08-17T08:30:41.441895Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=48.761547ms elapsed_secs=0.048761547
2025-08-17T08:30:41.514743Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=46.526456ms elapsed_secs=0.046526456
2025-08-17T08:30:41.618014Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=2 rows_returned=2 elapsed=49.572818ms elapsed_secs=0.049572818
2025-08-17T08:30:45.808075Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:30:45.907887Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=47.105581ms elapsed_secs=0.047105581
2025-08-17T08:30:45.914342Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:30:46.015598Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=49.33226ms elapsed_secs=0.04933226
2025-08-17T08:30:46.726345Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:30:46.726642Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /2db4cabd-565f-4b7c-a5f6-8140665c1330
2025-08-17T08:30:46.828397Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=46.029313ms elapsed_secs=0.046029313
2025-08-17T08:30:46.850873Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=55.569569ms elapsed_secs=0.055569569
2025-08-17T08:30:46.854106Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:30:46.953890Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=1 rows_returned=1 elapsed=47.615894ms elapsed_secs=0.047615894
2025-08-17T08:30:46.958280Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /2db4cabd-565f-4b7c-a5f6-8140665c1330
2025-08-17T08:30:46.963485Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=55.683591ms elapsed_secs=0.055683591
2025-08-17T08:30:47.054103Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=45.717587ms elapsed_secs=0.045717587
2025-08-17T08:30:47.161244Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=1 rows_returned=1 elapsed=50.016876ms elapsed_secs=0.050016876
2025-08-17T08:30:49.227489Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:30:49.339434Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=53.009038ms elapsed_secs=0.053009038
2025-08-17T08:30:49.356161Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:30:49.463345Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=49.745539ms elapsed_secs=0.049745539
2025-08-17T08:30:50.239846Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:30:50.243078Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /1c91cf36-9488-4fb0-9af6-43ec17364c22
2025-08-17T08:30:50.336324Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=45.367063ms elapsed_secs=0.045367063
2025-08-17T08:30:50.338545Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:30:50.354208Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=53.295799ms elapsed_secs=0.053295799
2025-08-17T08:30:50.437853Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=46.405686ms elapsed_secs=0.046405686
2025-08-17T08:30:50.463989Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=1 rows_returned=1 elapsed=50.553937ms elapsed_secs=0.050553937
2025-08-17T08:30:50.466948Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /1c91cf36-9488-4fb0-9af6-43ec17364c22
2025-08-17T08:30:50.564735Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=46.211365ms elapsed_secs=0.046211365
2025-08-17T08:30:50.666843Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=1 rows_returned=1 elapsed=49.963957ms elapsed_secs=0.049963957
2025-08-17T08:30:51.963350Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:30:52.060955Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=45.756628ms elapsed_secs=0.045756628
2025-08-17T08:30:52.069832Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:30:52.183757Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=52.023333ms elapsed_secs=0.052023333
2025-08-17T08:30:52.818491Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:30:52.818514Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /02088c0d-6941-4a7d-8da8-4213f5c0f5d2
2025-08-17T08:30:52.919145Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=48.20521ms elapsed_secs=0.04820521
2025-08-17T08:30:52.923662Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=48.722478ms elapsed_secs=0.048722478
2025-08-17T08:30:52.928604Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:30:53.016607Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=1 rows_returned=1 elapsed=47.105151ms elapsed_secs=0.047105151
2025-08-17T08:30:53.026288Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /02088c0d-6941-4a7d-8da8-4213f5c0f5d2
2025-08-17T08:30:53.034178Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=53.267497ms elapsed_secs=0.053267497
2025-08-17T08:30:53.125250Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=48.280792ms elapsed_secs=0.048280792
2025-08-17T08:30:53.232023Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=1 rows_returned=1 elapsed=53.862096ms elapsed_secs=0.053862096
2025-08-17T08:30:55.332774Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:30:55.441694Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=53.058374ms elapsed_secs=0.053058374
2025-08-17T08:30:55.445725Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:30:55.550069Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=49.144868ms elapsed_secs=0.049144868
2025-08-17T08:30:56.547753Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:30:56.550591Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /e48e0f6a-7636-47a7-b036-4c7fa41fa443
2025-08-17T08:30:56.648161Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=45.835533ms elapsed_secs=0.045835533
2025-08-17T08:30:56.651867Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:30:56.662080Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=50.755568ms elapsed_secs=0.050755568
2025-08-17T08:30:56.747012Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=46.546417ms elapsed_secs=0.046546417
2025-08-17T08:30:56.768071Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=1 rows_returned=1 elapsed=50.688111ms elapsed_secs=0.050688111
2025-08-17T08:30:56.770353Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /e48e0f6a-7636-47a7-b036-4c7fa41fa443
2025-08-17T08:30:56.867399Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=46.60967ms elapsed_secs=0.04660967
2025-08-17T08:30:56.971742Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=1 rows_returned=1 elapsed=52.899331ms elapsed_secs=0.052899331
2025-08-17T08:31:13.895421Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /e48e0f6a-7636-47a7-b036-4c7fa41fa443/update
2025-08-17T08:31:14.121993Z DEBUG sqlx::query: summary="UPDATE loan_contract SET contact_id ‚Ä¶" db.statement="\n\nUPDATE\n  loan_contract\nSET\n  contact_id = $1,\n  name = $2,\n  principal = $3,\n  interest_rate = $4,\n  term_months = $5,\n  date_start = $6,\n  date_end = $7,\n  collateral_description = $8,\n  collateral_value = $9,\n  updated_at = NOW()\nWHERE\n  id = $10\n  AND tenant_id = $11\nRETURNING\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\n" rows_affected=0 rows_returned=1 elapsed=111.793188ms elapsed_secs=0.111793188
2025-08-17T08:31:14.219164Z DEBUG sqlx::query: summary="DELETE FROM loan_transaction WHERE ‚Ä¶" db.statement="\n\nDELETE FROM\n  loan_transaction\nWHERE\n  contract_id = $1\n  AND tenant_id = $2\n" rows_affected=1 rows_returned=0 elapsed=95.935727ms elapsed_secs=0.095935727
2025-08-17T08:31:14.273219Z DEBUG sqlx::query: summary="INSERT INTO loan_transaction ( ‚Ä¶" db.statement="\n\nINSERT INTO\n  loan_transaction (\n    contract_id,\n    tenant_id,\n    contact_id,\n    transaction_type,\n    amount,\n    \"date\",\n    note\n  )\nVALUES\n  ($1, $2, $3, $4, $5, $6, $7)\n" rows_affected=1 rows_returned=0 elapsed=49.296239ms elapsed_secs=0.049296239
2025-08-17T08:31:14.322169Z DEBUG sqlx::query: summary="COMMIT" db.statement="" rows_affected=0 rows_returned=0 elapsed=47.43292ms elapsed_secs=0.04743292
2025-08-17T08:31:14.345265Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /e48e0f6a-7636-47a7-b036-4c7fa41fa443
2025-08-17T08:31:14.447960Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=48.291627ms elapsed_secs=0.048291627
2025-08-17T08:31:14.546420Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=1 rows_returned=1 elapsed=47.195569ms elapsed_secs=0.047195569
2025-08-17T08:31:17.852214Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8&range=monthly
2025-08-17T08:31:17.961674Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=50.387663ms elapsed_secs=0.050387663
2025-08-17T08:31:17.964410Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8&range=monthly
2025-08-17T08:31:18.062826Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=46.386924ms elapsed_secs=0.046386924
2025-08-17T08:31:20.039470Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8&day=17&range=daily
2025-08-17T08:31:20.216683Z DEBUG sqlx::query: summary="SELECT EXTRACT(DAY FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    DAY\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\n  AND EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) = $3\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=4 rows_returned=4 elapsed=125.981935ms elapsed_secs=0.125981935
2025-08-17T08:31:51.723673Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:31:51.819051Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=46.81496ms elapsed_secs=0.04681496
2025-08-17T08:31:51.821611Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:31:51.948459Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=66.927409ms elapsed_secs=0.066927409
2025-08-17T08:31:53.151471Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /f5370ad9-ceac-46e2-9ec5-2b2d99d22ef0
2025-08-17T08:31:53.154949Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:31:53.253948Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=48.475469ms elapsed_secs=0.048475469
2025-08-17T08:31:53.269136Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=62.811082ms elapsed_secs=0.062811082
2025-08-17T08:31:53.294855Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:31:53.357991Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=1 rows_returned=1 elapsed=47.377564ms elapsed_secs=0.047377564
2025-08-17T08:31:53.361427Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /f5370ad9-ceac-46e2-9ec5-2b2d99d22ef0
2025-08-17T08:31:53.397303Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=49.256698ms elapsed_secs=0.049256698
2025-08-17T08:31:53.459140Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=47.951201ms elapsed_secs=0.047951201
2025-08-17T08:31:53.572384Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=1 rows_returned=1 elapsed=51.286336ms elapsed_secs=0.051286336
2025-08-17T08:31:54.981391Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:31:55.083387Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=47.812191ms elapsed_secs=0.047812191
2025-08-17T08:31:55.087392Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:31:55.189922Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=49.777659ms elapsed_secs=0.049777659
2025-08-17T08:31:55.766250Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /e48e0f6a-7636-47a7-b036-4c7fa41fa443
2025-08-17T08:31:55.766340Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:31:55.866451Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=46.267031ms elapsed_secs=0.046267031
2025-08-17T08:31:55.870159Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=51.537698ms elapsed_secs=0.051537698
2025-08-17T08:31:55.872307Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:31:55.965241Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=1 rows_returned=1 elapsed=47.874789ms elapsed_secs=0.047874789
2025-08-17T08:31:55.969696Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /e48e0f6a-7636-47a7-b036-4c7fa41fa443
2025-08-17T08:31:55.986232Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=49.848169ms elapsed_secs=0.049848169
2025-08-17T08:31:56.068149Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=45.339986ms elapsed_secs=0.045339986
2025-08-17T08:31:56.184744Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=1 rows_returned=1 elapsed=49.161046ms elapsed_secs=0.049161046
2025-08-17T08:31:57.663987Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:31:57.768712Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=46.821386ms elapsed_secs=0.046821386
2025-08-17T08:31:57.771061Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:31:57.874336Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=50.027884ms elapsed_secs=0.050027884
2025-08-17T08:31:58.536176Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /02088c0d-6941-4a7d-8da8-4213f5c0f5d2
2025-08-17T08:31:58.537144Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:31:58.631681Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=45.916894ms elapsed_secs=0.045916894
2025-08-17T08:31:58.633810Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:31:58.636482Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=47.547505ms elapsed_secs=0.047547505
2025-08-17T08:31:58.728418Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=46.695772ms elapsed_secs=0.046695772
2025-08-17T08:31:58.742535Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=1 rows_returned=1 elapsed=51.174637ms elapsed_secs=0.051174637
2025-08-17T08:31:58.746399Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /02088c0d-6941-4a7d-8da8-4213f5c0f5d2
2025-08-17T08:31:58.846656Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=47.079684ms elapsed_secs=0.047079684
2025-08-17T08:31:58.955492Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=1 rows_returned=1 elapsed=50.220232ms elapsed_secs=0.050220232
2025-08-17T08:32:10.128129Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:32:10.229850Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=46.404736ms elapsed_secs=0.046404736
2025-08-17T08:32:10.235298Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:32:10.340268Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=49.69967ms elapsed_secs=0.04969967
2025-08-17T08:32:11.164090Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:32:11.166264Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /f5370ad9-ceac-46e2-9ec5-2b2d99d22ef0
2025-08-17T08:32:11.262295Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=48.103272ms elapsed_secs=0.048103272
2025-08-17T08:32:11.266759Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=49.567786ms elapsed_secs=0.049567786
2025-08-17T08:32:11.268812Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:32:11.371167Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=49.342933ms elapsed_secs=0.049342933
2025-08-17T08:32:11.378923Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=1 rows_returned=1 elapsed=47.944531ms elapsed_secs=0.047944531
2025-08-17T08:32:11.382750Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /f5370ad9-ceac-46e2-9ec5-2b2d99d22ef0
2025-08-17T08:32:11.480621Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=46.449408ms elapsed_secs=0.046449408
2025-08-17T08:32:11.586137Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=1 rows_returned=1 elapsed=50.385022ms elapsed_secs=0.050385022
2025-08-17T08:32:16.326709Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:32:16.429560Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=50.178592ms elapsed_secs=0.050178592
2025-08-17T08:32:16.433290Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:32:16.532198Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=49.652498ms elapsed_secs=0.049652498
2025-08-17T08:32:17.386616Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /2db4cabd-565f-4b7c-a5f6-8140665c1330
2025-08-17T08:32:17.388648Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:32:17.483813Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=46.013886ms elapsed_secs=0.046013886
2025-08-17T08:32:17.487145Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=47.641312ms elapsed_secs=0.047641312
2025-08-17T08:32:17.489595Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:32:17.587513Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=47.14012ms elapsed_secs=0.04714012
2025-08-17T08:32:17.587606Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=1 rows_returned=1 elapsed=50.211432ms elapsed_secs=0.050211432
2025-08-17T08:32:17.595142Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /2db4cabd-565f-4b7c-a5f6-8140665c1330
2025-08-17T08:32:17.695913Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=47.216894ms elapsed_secs=0.047216894
2025-08-17T08:32:17.798141Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=1 rows_returned=1 elapsed=49.668315ms elapsed_secs=0.049668315
2025-08-17T08:32:19.079963Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:32:19.183661Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=47.892246ms elapsed_secs=0.047892246
2025-08-17T08:32:19.187212Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:32:19.297264Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=51.580768ms elapsed_secs=0.051580768
2025-08-17T08:32:22.096825Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:32:22.099154Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /1e1f4286-5474-4043-8e7d-a8721da008fa
2025-08-17T08:32:22.220323Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=45.373187ms elapsed_secs=0.045373187
2025-08-17T08:32:22.227797Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=50.962882ms elapsed_secs=0.050962882
2025-08-17T08:32:22.230286Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:32:22.322189Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=2 rows_returned=2 elapsed=47.660423ms elapsed_secs=0.047660423
2025-08-17T08:32:22.328696Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /1e1f4286-5474-4043-8e7d-a8721da008fa
2025-08-17T08:32:22.343953Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=55.479934ms elapsed_secs=0.055479934
2025-08-17T08:32:22.447477Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=49.992047ms elapsed_secs=0.049992047
2025-08-17T08:32:22.552056Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=2 rows_returned=2 elapsed=49.623298ms elapsed_secs=0.049623298
2025-08-17T08:32:23.319584Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:32:23.416120Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=46.752046ms elapsed_secs=0.046752046
2025-08-17T08:32:23.418953Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:32:23.520670Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=50.665866ms elapsed_secs=0.050665866
2025-08-17T08:32:26.365212Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:32:26.366832Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /f5370ad9-ceac-46e2-9ec5-2b2d99d22ef0
2025-08-17T08:32:26.465227Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=47.354493ms elapsed_secs=0.047354493
2025-08-17T08:32:26.493190Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=53.993393ms elapsed_secs=0.053993393
2025-08-17T08:32:26.496738Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:32:26.598766Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=1 rows_returned=1 elapsed=46.755674ms elapsed_secs=0.046755674
2025-08-17T08:32:26.614407Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=58.133267ms elapsed_secs=0.058133267
2025-08-17T08:32:26.617351Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /f5370ad9-ceac-46e2-9ec5-2b2d99d22ef0
2025-08-17T08:32:26.719535Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=47.521578ms elapsed_secs=0.047521578
2025-08-17T08:32:26.823623Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=1 rows_returned=1 elapsed=48.433258ms elapsed_secs=0.048433258
2025-08-17T08:32:33.625360Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /f5370ad9-ceac-46e2-9ec5-2b2d99d22ef0/update
2025-08-17T08:32:33.850577Z DEBUG sqlx::query: summary="UPDATE loan_contract SET contact_id ‚Ä¶" db.statement="\n\nUPDATE\n  loan_contract\nSET\n  contact_id = $1,\n  name = $2,\n  principal = $3,\n  interest_rate = $4,\n  term_months = $5,\n  date_start = $6,\n  date_end = $7,\n  collateral_description = $8,\n  collateral_value = $9,\n  updated_at = NOW()\nWHERE\n  id = $10\n  AND tenant_id = $11\nRETURNING\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\n" rows_affected=0 rows_returned=1 elapsed=111.433271ms elapsed_secs=0.111433271
2025-08-17T08:32:33.960842Z DEBUG sqlx::query: summary="DELETE FROM loan_transaction WHERE ‚Ä¶" db.statement="\n\nDELETE FROM\n  loan_transaction\nWHERE\n  contract_id = $1\n  AND tenant_id = $2\n" rows_affected=1 rows_returned=0 elapsed=99.34635ms elapsed_secs=0.09934635
2025-08-17T08:32:34.060032Z DEBUG sqlx::query: summary="INSERT INTO loan_transaction ( ‚Ä¶" db.statement="\n\nINSERT INTO\n  loan_transaction (\n    contract_id,\n    tenant_id,\n    contact_id,\n    transaction_type,\n    amount,\n    \"date\",\n    note\n  )\nVALUES\n  ($1, $2, $3, $4, $5, $6, $7)\n" rows_affected=1 rows_returned=0 elapsed=94.961352ms elapsed_secs=0.094961352
2025-08-17T08:32:34.107313Z DEBUG sqlx::query: summary="COMMIT" db.statement="" rows_affected=0 rows_returned=0 elapsed=46.881153ms elapsed_secs=0.046881153
2025-08-17T08:32:34.121633Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /f5370ad9-ceac-46e2-9ec5-2b2d99d22ef0
2025-08-17T08:32:34.230032Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=49.51755ms elapsed_secs=0.04951755
2025-08-17T08:32:34.329721Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=1 rows_returned=1 elapsed=46.544052ms elapsed_secs=0.046544052
2025-08-17T08:32:36.688675Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8&range=monthly
2025-08-17T08:32:36.803729Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=62.800409ms elapsed_secs=0.062800409
2025-08-17T08:32:36.805721Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8&range=monthly
2025-08-17T08:32:36.902613Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=45.94188ms elapsed_secs=0.04594188
2025-08-17T08:32:38.634645Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8&day=17&range=daily
2025-08-17T08:32:38.739635Z DEBUG sqlx::query: summary="SELECT EXTRACT(DAY FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    DAY\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\n  AND EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) = $3\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=4 rows_returned=4 elapsed=50.115733ms elapsed_secs=0.050115733
2025-08-17T08:33:47.595215Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8&range=monthly
2025-08-17T08:33:47.692374Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=46.809092ms elapsed_secs=0.046809092
2025-08-17T08:33:50.380457Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8&day=17&range=daily
2025-08-17T08:33:50.484515Z DEBUG sqlx::query: summary="SELECT EXTRACT(DAY FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    DAY\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\n  AND EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) = $3\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=4 rows_returned=4 elapsed=50.73953ms elapsed_secs=0.05073953
2025-08-17T08:34:05.083933Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8&range=monthly
2025-08-17T08:34:05.180897Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=48.478147ms elapsed_secs=0.048478147
2025-08-17T08:34:05.810862Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8&day=17&range=daily
2025-08-17T08:34:05.919999Z DEBUG sqlx::query: summary="SELECT EXTRACT(DAY FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    DAY\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\n  AND EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) = $3\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=4 rows_returned=4 elapsed=50.557982ms elapsed_secs=0.050557982
2025-08-17T08:34:16.384147Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8&range=monthly
2025-08-17T08:34:16.482772Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=46.329757ms elapsed_secs=0.046329757
2025-08-17T08:34:19.684485Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8&day=17&range=daily
2025-08-17T08:34:19.786343Z DEBUG sqlx::query: summary="SELECT EXTRACT(DAY FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    DAY\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\n  AND EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) = $3\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=4 rows_returned=4 elapsed=48.694249ms elapsed_secs=0.048694249
2025-08-17T08:34:21.360655Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8&range=monthly
2025-08-17T08:34:21.459985Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=46.617131ms elapsed_secs=0.046617131
2025-08-17T08:34:30.290026Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:34:30.390176Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=49.068714ms elapsed_secs=0.049068714
2025-08-17T08:34:30.393174Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:34:30.488759Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=46.547712ms elapsed_secs=0.046547712
2025-08-17T08:34:32.429539Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:34:32.532358Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=50.391252ms elapsed_secs=0.050391252
2025-08-17T08:34:32.535613Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:34:32.632572Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=46.220414ms elapsed_secs=0.046220414
2025-08-17T08:34:53.039919Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /1c91cf36-9488-4fb0-9af6-43ec17364c22
2025-08-17T08:34:53.040049Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:34:53.138832Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=45.111897ms elapsed_secs=0.045111897
2025-08-17T08:34:53.159303Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=50.311782ms elapsed_secs=0.050311782
2025-08-17T08:34:53.166462Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:34:53.243097Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=1 rows_returned=1 elapsed=48.622711ms elapsed_secs=0.048622711
2025-08-17T08:34:53.247128Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /1c91cf36-9488-4fb0-9af6-43ec17364c22
2025-08-17T08:34:53.263250Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=46.280782ms elapsed_secs=0.046280782
2025-08-17T08:34:53.344141Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=46.898533ms elapsed_secs=0.046898533
2025-08-17T08:34:53.449496Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=1 rows_returned=1 elapsed=48.714979ms elapsed_secs=0.048714979
2025-08-17T08:37:01.908447Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8&range=monthly
2025-08-17T08:37:02.010648Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=50.32358ms elapsed_secs=0.05032358
2025-08-17T08:37:02.013092Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8&range=monthly
2025-08-17T08:37:02.113056Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=46.314858ms elapsed_secs=0.046314858
2025-08-17T08:37:09.363691Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T08:37:09.365616Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T08:37:10.933205Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8&range=monthly
2025-08-17T08:37:11.041128Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=49.152257ms elapsed_secs=0.049152257
2025-08-17T08:37:11.111269Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T08:37:11.126437Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&month=8&range=monthly
2025-08-17T08:37:11.232594Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=52.348548ms elapsed_secs=0.052348548
2025-08-17T08:37:11.255176Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=66.210331ms elapsed_secs=0.066210331
2025-08-17T08:37:11.262466Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T08:37:11.334533Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=49.429708ms elapsed_secs=0.049429708
2025-08-17T08:37:11.371558Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=48.720509ms elapsed_secs=0.048720509
2025-08-17T08:37:11.490993Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=64.566185ms elapsed_secs=0.064566185
2025-08-17T08:40:03.341198Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T08:40:03.344143Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T08:40:03.847261Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T08:40:03.954364Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=49.521088ms elapsed_secs=0.049521088
2025-08-17T08:40:03.978266Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T08:40:03.985776Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T08:40:04.075695Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=48.426517ms elapsed_secs=0.048426517
2025-08-17T08:40:04.081502Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=45.959483ms elapsed_secs=0.045959483
2025-08-17T08:40:04.175068Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=49.268808ms elapsed_secs=0.049268808
2025-08-17T08:40:04.177563Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T08:40:04.278060Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=50.161484ms elapsed_secs=0.050161484
2025-08-17T08:40:04.377342Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=49.227072ms elapsed_secs=0.049227072
2025-08-17T08:40:08.196152Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=daily&month=8&day=17
2025-08-17T08:40:08.373024Z DEBUG sqlx::query: summary="SELECT EXTRACT(DAY FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    DAY\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\n  AND EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) = $3\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=4 rows_returned=4 elapsed=96.373063ms elapsed_secs=0.096373063
2025-08-17T08:40:11.485930Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T08:40:11.587134Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=48.839675ms elapsed_secs=0.048839675
2025-08-17T08:40:18.232564Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T08:40:18.234334Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T08:40:19.710478Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T08:40:19.815234Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=50.311108ms elapsed_secs=0.050311108
2025-08-17T08:40:19.871833Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T08:40:19.891196Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T08:40:19.978778Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=49.871122ms elapsed_secs=0.049871122
2025-08-17T08:40:20.027898Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=57.707759ms elapsed_secs=0.057707759
2025-08-17T08:40:20.030665Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T08:40:20.096058Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=61.568006ms elapsed_secs=0.061568006
2025-08-17T08:40:20.146758Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=52.892941ms elapsed_secs=0.052892941
2025-08-17T08:40:20.261281Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=51.64961ms elapsed_secs=0.05164961
2025-08-17T08:44:46.666781Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:44:46.772632Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=52.641733ms elapsed_secs=0.052641733
2025-08-17T08:44:46.775230Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:44:46.884621Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=50.051591ms elapsed_secs=0.050051591
2025-08-17T08:44:52.502633Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:44:52.502654Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /f5370ad9-ceac-46e2-9ec5-2b2d99d22ef0
2025-08-17T08:44:52.598446Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=45.82896ms elapsed_secs=0.04582896
2025-08-17T08:44:52.601579Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:44:52.610541Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=50.051835ms elapsed_secs=0.050051835
2025-08-17T08:44:52.706214Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=46.898373ms elapsed_secs=0.046898373
2025-08-17T08:44:52.721633Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=1 rows_returned=1 elapsed=52.522665ms elapsed_secs=0.052522665
2025-08-17T08:44:52.725714Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /f5370ad9-ceac-46e2-9ec5-2b2d99d22ef0
2025-08-17T08:44:52.831909Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=49.332938ms elapsed_secs=0.049332938
2025-08-17T08:44:52.936124Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=1 rows_returned=1 elapsed=48.39506ms elapsed_secs=0.04839506
2025-08-17T08:44:54.025474Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:44:54.127108Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=50.388381ms elapsed_secs=0.050388381
2025-08-17T08:44:54.130788Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:44:54.247273Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=51.544ms elapsed_secs=0.051544
2025-08-17T08:44:56.615762Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:44:56.617905Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /02088c0d-6941-4a7d-8da8-4213f5c0f5d2
2025-08-17T08:44:56.711551Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=46.454421ms elapsed_secs=0.046454421
2025-08-17T08:44:56.716290Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:44:56.727257Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=53.061934ms elapsed_secs=0.053061934
2025-08-17T08:44:56.823312Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=46.49542ms elapsed_secs=0.04649542
2025-08-17T08:44:56.832516Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=1 rows_returned=1 elapsed=49.584577ms elapsed_secs=0.049584577
2025-08-17T08:44:56.837780Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /02088c0d-6941-4a7d-8da8-4213f5c0f5d2
2025-08-17T08:44:56.940057Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=46.33345ms elapsed_secs=0.04633345
2025-08-17T08:44:57.042701Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=1 rows_returned=1 elapsed=49.027177ms elapsed_secs=0.049027177
2025-08-17T08:45:16.997438Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /02088c0d-6941-4a7d-8da8-4213f5c0f5d2/update
2025-08-17T08:45:17.153517Z DEBUG sqlx::query: summary="UPDATE loan_contract SET contact_id ‚Ä¶" db.statement="\n\nUPDATE\n  loan_contract\nSET\n  contact_id = $1,\n  name = $2,\n  principal = $3,\n  interest_rate = $4,\n  term_months = $5,\n  date_start = $6,\n  date_end = $7,\n  collateral_description = $8,\n  collateral_value = $9,\n  updated_at = NOW()\nWHERE\n  id = $10\n  AND tenant_id = $11\nRETURNING\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\n" rows_affected=0 rows_returned=1 elapsed=54.589833ms elapsed_secs=0.054589833
2025-08-17T08:45:17.206304Z DEBUG sqlx::query: summary="DELETE FROM loan_transaction WHERE ‚Ä¶" db.statement="\n\nDELETE FROM\n  loan_transaction\nWHERE\n  contract_id = $1\n  AND tenant_id = $2\n" rows_affected=1 rows_returned=0 elapsed=51.81705ms elapsed_secs=0.05181705
2025-08-17T08:45:17.254583Z DEBUG sqlx::query: summary="INSERT INTO loan_transaction ( ‚Ä¶" db.statement="\n\nINSERT INTO\n  loan_transaction (\n    contract_id,\n    tenant_id,\n    contact_id,\n    transaction_type,\n    amount,\n    \"date\",\n    note\n  )\nVALUES\n  ($1, $2, $3, $4, $5, $6, $7)\n" rows_affected=1 rows_returned=0 elapsed=46.576184ms elapsed_secs=0.046576184
2025-08-17T08:45:17.302820Z DEBUG sqlx::query: summary="COMMIT" db.statement="" rows_affected=0 rows_returned=0 elapsed=47.045347ms elapsed_secs=0.047045347
2025-08-17T08:45:17.322773Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /02088c0d-6941-4a7d-8da8-4213f5c0f5d2
2025-08-17T08:45:17.422888Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=48.962377ms elapsed_secs=0.048962377
2025-08-17T08:45:17.526003Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=1 rows_returned=1 elapsed=49.181423ms elapsed_secs=0.049181423
2025-08-17T08:45:20.566371Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T08:45:20.669372Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=48.882879ms elapsed_secs=0.048882879
2025-08-17T08:45:20.671449Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T08:45:20.771097Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=51.120692ms elapsed_secs=0.051120692
2025-08-17T08:45:59.215353Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:45:59.321089Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=49.652142ms elapsed_secs=0.049652142
2025-08-17T08:45:59.323911Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:45:59.438920Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=50.857362ms elapsed_secs=0.050857362
2025-08-17T08:46:01.167142Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:46:01.272602Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=49.256454ms elapsed_secs=0.049256454
2025-08-17T08:46:01.276403Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:46:01.379264Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=49.049148ms elapsed_secs=0.049049148
2025-08-17T08:46:03.542558Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:46:03.646215Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=50.074585ms elapsed_secs=0.050074585
2025-08-17T08:46:03.648371Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:46:03.746147Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=46.377474ms elapsed_secs=0.046377474
2025-08-17T08:46:05.686362Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:46:05.689946Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /02088c0d-6941-4a7d-8da8-4213f5c0f5d2
2025-08-17T08:46:05.784799Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=45.998176ms elapsed_secs=0.045998176
2025-08-17T08:46:05.788605Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=48.850911ms elapsed_secs=0.048850911
2025-08-17T08:46:05.790337Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:46:05.885941Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=46.379537ms elapsed_secs=0.046379537
2025-08-17T08:46:05.900536Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=1 rows_returned=1 elapsed=57.651377ms elapsed_secs=0.057651377
2025-08-17T08:46:05.903229Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /02088c0d-6941-4a7d-8da8-4213f5c0f5d2
2025-08-17T08:46:05.999544Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=47.412248ms elapsed_secs=0.047412248
2025-08-17T08:46:06.102178Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=1 rows_returned=1 elapsed=48.962278ms elapsed_secs=0.048962278
2025-08-17T08:46:29.414848Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /02088c0d-6941-4a7d-8da8-4213f5c0f5d2/update
2025-08-17T08:46:29.583288Z DEBUG sqlx::query: summary="UPDATE loan_contract SET contact_id ‚Ä¶" db.statement="\n\nUPDATE\n  loan_contract\nSET\n  contact_id = $1,\n  name = $2,\n  principal = $3,\n  interest_rate = $4,\n  term_months = $5,\n  date_start = $6,\n  date_end = $7,\n  collateral_description = $8,\n  collateral_value = $9,\n  updated_at = NOW()\nWHERE\n  id = $10\n  AND tenant_id = $11\nRETURNING\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\n" rows_affected=0 rows_returned=1 elapsed=51.872053ms elapsed_secs=0.051872053
2025-08-17T08:46:29.641089Z DEBUG sqlx::query: summary="DELETE FROM loan_transaction WHERE ‚Ä¶" db.statement="\n\nDELETE FROM\n  loan_transaction\nWHERE\n  contract_id = $1\n  AND tenant_id = $2\n" rows_affected=1 rows_returned=0 elapsed=50.578106ms elapsed_secs=0.050578106
2025-08-17T08:46:29.690794Z DEBUG sqlx::query: summary="INSERT INTO loan_transaction ( ‚Ä¶" db.statement="\n\nINSERT INTO\n  loan_transaction (\n    contract_id,\n    tenant_id,\n    contact_id,\n    transaction_type,\n    amount,\n    \"date\",\n    note\n  )\nVALUES\n  ($1, $2, $3, $4, $5, $6, $7)\n" rows_affected=1 rows_returned=0 elapsed=47.52197ms elapsed_secs=0.04752197
2025-08-17T08:46:29.746296Z DEBUG sqlx::query: summary="INSERT INTO loan_transaction ( ‚Ä¶" db.statement="\n\nINSERT INTO\n  loan_transaction (\n    contract_id,\n    tenant_id,\n    contact_id,\n    transaction_type,\n    amount,\n    \"date\",\n    note\n  )\nVALUES\n  ($1, $2, $3, $4, $5, $6, $7)\n" rows_affected=1 rows_returned=0 elapsed=53.115407ms elapsed_secs=0.053115407
2025-08-17T08:46:29.797499Z DEBUG sqlx::query: summary="COMMIT" db.statement="" rows_affected=0 rows_returned=0 elapsed=49.406906ms elapsed_secs=0.049406906
2025-08-17T08:46:29.808894Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /02088c0d-6941-4a7d-8da8-4213f5c0f5d2
2025-08-17T08:46:29.911019Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=48.790396ms elapsed_secs=0.048790396
2025-08-17T08:46:30.007362Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=2 rows_returned=2 elapsed=46.344185ms elapsed_secs=0.046344185
2025-08-17T08:46:33.765271Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T08:46:33.872698Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=49.455054ms elapsed_secs=0.049455054
2025-08-17T08:46:33.879223Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T08:46:33.973502Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=45.958238ms elapsed_secs=0.045958238
2025-08-17T08:46:44.214205Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T08:46:44.220081Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T08:46:44.826078Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T08:46:44.913285Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T08:46:44.931364Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=51.400974ms elapsed_secs=0.051400974
2025-08-17T08:46:44.934044Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T08:46:45.008359Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=47.400049ms elapsed_secs=0.047400049
2025-08-17T08:46:45.061948Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=54.56992ms elapsed_secs=0.05456992
2025-08-17T08:46:45.122645Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=54.260157ms elapsed_secs=0.054260157
2025-08-17T08:46:45.126890Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T08:46:45.251313Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=53.780462ms elapsed_secs=0.053780462
2025-08-17T08:46:45.362168Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=47.393081ms elapsed_secs=0.047393081
2025-08-17T08:46:48.098431Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=daily&month=8&day=17
2025-08-17T08:46:48.206813Z DEBUG sqlx::query: summary="SELECT EXTRACT(DAY FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    DAY\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\n  AND EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) = $3\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=4 rows_returned=4 elapsed=48.253371ms elapsed_secs=0.048253371
2025-08-17T08:46:50.172527Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T08:46:50.271709Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=46.743213ms elapsed_secs=0.046743213
2025-08-17T08:47:01.803947Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T08:47:01.806524Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T08:47:02.264884Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T08:47:02.330257Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T08:47:02.380553Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=53.182953ms elapsed_secs=0.053182953
2025-08-17T08:47:02.385868Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T08:47:02.444593Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=57.106754ms elapsed_secs=0.057106754
2025-08-17T08:47:02.523985Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=56.4205ms elapsed_secs=0.0564205
2025-08-17T08:47:02.537575Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=46.772867ms elapsed_secs=0.046772867
2025-08-17T08:47:02.541842Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T08:47:02.648065Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=51.048407ms elapsed_secs=0.051048407
2025-08-17T08:47:02.742120Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=46.070406ms elapsed_secs=0.046070406
2025-08-17T08:47:11.856321Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /roles
2025-08-17T08:47:12.007066Z DEBUG sqlx::query: summary="SELECT module_name AS key, ‚Ä¶" db.statement="\n\nSELECT\n  module_name AS key,\n  display_name AS label\nFROM\n  available_module\nORDER BY\n  display_name\n" rows_affected=7 rows_returned=7 elapsed=101.666087ms elapsed_secs=0.101666087
2025-08-17T08:47:12.021616Z DEBUG sqlx::query: summary="SELECT id, tenant_id, name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  name,\n  module\nFROM\n  roles\nWHERE\n  tenant_id = $1\nORDER BY\n  name\n" rows_affected=12 rows_returned=12 elapsed=102.012487ms elapsed_secs=0.102012487
2025-08-17T08:47:12.033609Z DEBUG sqlx::query: summary="SELECT id, resource, action, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  resource,\n  action,\n  label\nFROM\n  permissions\nORDER BY\n  resource,\n  action\n" rows_affected=13 rows_returned=13 elapsed=116.873114ms elapsed_secs=0.116873114
2025-08-17T08:47:12.032996Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /roles
2025-08-17T08:47:12.155297Z DEBUG sqlx::query: summary="SELECT module_name AS key, ‚Ä¶" db.statement="\n\nSELECT\n  module_name AS key,\n  display_name AS label\nFROM\n  available_module\nORDER BY\n  display_name\n" rows_affected=7 rows_returned=7 elapsed=94.821009ms elapsed_secs=0.094821009
2025-08-17T08:47:12.229750Z DEBUG rustls::client::hs: No cached session for DnsName("ap-southeast-1.e4c6174f-6538-4e47-93bf-0a2503819047.aws.yugabyte.cloud")    
2025-08-17T08:47:12.229973Z DEBUG rustls::client::hs: Not resuming any session    
2025-08-17T08:47:12.239043Z DEBUG rustls::client::hs: No cached session for DnsName("ap-southeast-1.e4c6174f-6538-4e47-93bf-0a2503819047.aws.yugabyte.cloud")    
2025-08-17T08:47:12.239507Z DEBUG rustls::client::hs: Not resuming any session    
2025-08-17T08:47:12.324440Z DEBUG rustls::client::hs: Using ciphersuite TLS13_AES_256_GCM_SHA384    
2025-08-17T08:47:12.324626Z DEBUG rustls::client::tls13: Not resuming    
2025-08-17T08:47:12.324811Z DEBUG rustls::client::tls13: TLS1.3 encrypted extensions: []    
2025-08-17T08:47:12.325635Z DEBUG rustls::client::hs: ALPN protocol is None    
2025-08-17T08:47:12.325784Z DEBUG rustls::client::tls13: Got CertificateRequest CertificateRequestPayloadTLS13 { context: , extensions: [SignatureAlgorithms([ECDSA_NISTP256_SHA256, ECDSA_NISTP384_SHA384, ECDSA_NISTP521_SHA512, ED25519, ED448, Unknown(2057), Unknown(2058), Unknown(2059), RSA_PSS_SHA256, RSA_PSS_SHA384, RSA_PSS_SHA512, RSA_PKCS1_SHA256, RSA_PKCS1_SHA384, RSA_PKCS1_SHA512, Unknown(771), Unknown(769)]), AuthorityNames([DistinguishedName(305b31153013060355040a130c597567616279746520496e633142304006035504030c392a2e65346336313734662d363533382d346534372d393362662d3061323530333831393034372e6177732e79756761627974652e636c6f7564), DistinguishedName(30818b310b3009060355040613025553310b3009060355040813024341311230100603550407130953756e6e7976616c6531153013060355040a130c597567616279746520496e6331173015060355040b130e597567616279746520436c6f7564312b302906035504031322597567616279746520436c6f7564205375626f7264696e6174652043412070726f64), DistinguishedName(308184310b3009060355040613025553310b3009060355040813024341311230100603550407130953756e6e7976616c6531153013060355040a130c597567616279746520496e6331173015060355040b130e597567616279746520436c6f7564312430220603550403131b597567616279746520436c6f756420526f6f742043412070726f64)])] }    
2025-08-17T08:47:12.325942Z DEBUG rustls::client::common: Client auth requested but no cert/sigscheme available    
2025-08-17T08:47:12.350239Z DEBUG rustls::client::hs: Using ciphersuite TLS13_AES_256_GCM_SHA384    
2025-08-17T08:47:12.352396Z DEBUG rustls::client::tls13: Not resuming    
2025-08-17T08:47:12.355396Z DEBUG rustls::client::tls13: TLS1.3 encrypted extensions: []    
2025-08-17T08:47:12.357292Z DEBUG rustls::client::hs: ALPN protocol is None    
2025-08-17T08:47:12.357796Z DEBUG rustls::client::tls13: Got CertificateRequest CertificateRequestPayloadTLS13 { context: , extensions: [SignatureAlgorithms([ECDSA_NISTP256_SHA256, ECDSA_NISTP384_SHA384, ECDSA_NISTP521_SHA512, ED25519, ED448, Unknown(2057), Unknown(2058), Unknown(2059), RSA_PSS_SHA256, RSA_PSS_SHA384, RSA_PSS_SHA512, RSA_PKCS1_SHA256, RSA_PKCS1_SHA384, RSA_PKCS1_SHA512, Unknown(771), Unknown(769)]), AuthorityNames([DistinguishedName(305b31153013060355040a130c597567616279746520496e633142304006035504030c392a2e65346336313734662d363533382d346534372d393362662d3061323530333831393034372e6177732e79756761627974652e636c6f7564), DistinguishedName(30818b310b3009060355040613025553310b3009060355040813024341311230100603550407130953756e6e7976616c6531153013060355040a130c597567616279746520496e6331173015060355040b130e597567616279746520436c6f7564312b302906035504031322597567616279746520436c6f7564205375626f7264696e6174652043412070726f64), DistinguishedName(308184310b3009060355040613025553310b3009060355040813024341311230100603550407130953756e6e7976616c6531153013060355040a130c597567616279746520496e6331173015060355040b130e597567616279746520436c6f7564312430220603550403131b597567616279746520436c6f756420526f6f742043412070726f64)])] }    
2025-08-17T08:47:12.358357Z DEBUG rustls::client::common: Client auth requested but no cert/sigscheme available    
2025-08-17T08:47:12.662498Z DEBUG sqlx::query: summary="SELECT id, tenant_id, name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  name,\n  module\nFROM\n  roles\nWHERE\n  tenant_id = $1\nORDER BY\n  name\n" rows_affected=12 rows_returned=12 elapsed=191.570717ms elapsed_secs=0.191570717
2025-08-17T08:47:12.684653Z DEBUG sqlx::query: summary="SELECT id, resource, action, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  resource,\n  action,\n  label\nFROM\n  permissions\nORDER BY\n  resource,\n  action\n" rows_affected=13 rows_returned=13 elapsed=188.361554ms elapsed_secs=0.188361554
2025-08-17T08:47:13.224657Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T08:47:13.323902Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=48.49871ms elapsed_secs=0.04849871
2025-08-17T08:47:13.326233Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T08:47:13.434834Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=49.319753ms elapsed_secs=0.049319753
2025-08-17T08:47:17.386704Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /users
2025-08-17T08:47:17.554356Z DEBUG sqlx::query: summary="SELECT u.tenant_id, t.name AS ‚Ä¶" db.statement="\n\nSELECT\n  u.tenant_id,\n  t.name AS tenant_name,\n  u.user_id,\n  u.email,\n  u.name,\n  u.created_at\nFROM\n  users u\n  JOIN tenant t ON u.tenant_id = t.tenant_id\nORDER BY\n  u.created_at DESC\n" rows_affected=3 rows_returned=3 elapsed=111.993944ms elapsed_secs=0.111993944
2025-08-17T08:47:17.563510Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /users
2025-08-17T08:47:17.737330Z DEBUG sqlx::query: summary="SELECT u.tenant_id, t.name AS ‚Ä¶" db.statement="\n\nSELECT\n  u.tenant_id,\n  t.name AS tenant_name,\n  u.user_id,\n  u.email,\n  u.name,\n  u.created_at\nFROM\n  users u\n  JOIN tenant t ON u.tenant_id = t.tenant_id\nORDER BY\n  u.created_at DESC\n" rows_affected=3 rows_returned=3 elapsed=117.016053ms elapsed_secs=0.117016053
2025-08-17T08:47:18.834540Z DEBUG sqlx::query: summary="SELECT module_name, display_name FROM ‚Ä¶" db.statement="\n\nSELECT\n  module_name,\n  display_name\nFROM\n  available_module\nORDER BY\n  display_name\n" rows_affected=7 rows_returned=7 elapsed=108.016667ms elapsed_secs=0.108016667
2025-08-17T08:47:18.858615Z DEBUG sqlx::query: summary="SELECT t.tenant_id, t.enterprise_id, t.company_id, ‚Ä¶" db.statement="\n\nSELECT\n  t.tenant_id,\n  t.enterprise_id,\n  t.company_id,\n  t.name,\n  t.slug,\n  t.shard_id,\n  m.module_name as \"module_name?\"\nFROM\n  tenant t\n  LEFT JOIN tenant_module m ON m.tenant_id = t.tenant_id\nORDER BY\n  t.name\n" rows_affected=3 rows_returned=3 elapsed=131.328635ms elapsed_secs=0.131328635
2025-08-17T08:47:18.985764Z DEBUG sqlx::query: summary="SELECT module_name, display_name FROM ‚Ä¶" db.statement="\n\nSELECT\n  module_name,\n  display_name\nFROM\n  available_module\nORDER BY\n  display_name\n" rows_affected=7 rows_returned=7 elapsed=95.387938ms elapsed_secs=0.095387938
2025-08-17T08:47:19.058379Z DEBUG sqlx::query: summary="SELECT t.tenant_id, t.enterprise_id, t.company_id, ‚Ä¶" db.statement="\n\nSELECT\n  t.tenant_id,\n  t.enterprise_id,\n  t.company_id,\n  t.name,\n  t.slug,\n  t.shard_id,\n  m.module_name as \"module_name?\"\nFROM\n  tenant t\n  LEFT JOIN tenant_module m ON m.tenant_id = t.tenant_id\nORDER BY\n  t.name\n" rows_affected=3 rows_returned=3 elapsed=137.571166ms elapsed_secs=0.137571166
2025-08-17T08:47:20.034394Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /users
2025-08-17T08:47:20.128793Z DEBUG sqlx::query: summary="SELECT u.tenant_id, t.name AS ‚Ä¶" db.statement="\n\nSELECT\n  u.tenant_id,\n  t.name AS tenant_name,\n  u.user_id,\n  u.email,\n  u.name,\n  u.created_at\nFROM\n  users u\n  JOIN tenant t ON u.tenant_id = t.tenant_id\nORDER BY\n  u.created_at DESC\n" rows_affected=3 rows_returned=3 elapsed=46.036368ms elapsed_secs=0.046036368
2025-08-17T08:47:20.139581Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /users
2025-08-17T08:47:20.234960Z DEBUG sqlx::query: summary="SELECT u.tenant_id, t.name AS ‚Ä¶" db.statement="\n\nSELECT\n  u.tenant_id,\n  t.name AS tenant_name,\n  u.user_id,\n  u.email,\n  u.name,\n  u.created_at\nFROM\n  users u\n  JOIN tenant t ON u.tenant_id = t.tenant_id\nORDER BY\n  u.created_at DESC\n" rows_affected=3 rows_returned=3 elapsed=45.890571ms elapsed_secs=0.045890571
2025-08-17T08:47:22.029344Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:47:22.251799Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=161.293834ms elapsed_secs=0.161293834
2025-08-17T08:47:22.261313Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:47:22.464198Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=149.226725ms elapsed_secs=0.149226725
2025-08-17T08:47:23.121523Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list?is_company=true&limit=200
2025-08-17T08:47:23.121521Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /95ebfccb-9971-4841-90e3-a61173f2cb7d
2025-08-17T08:47:23.225221Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=0 rows_returned=0 elapsed=49.568074ms elapsed_secs=0.049568074
2025-08-17T08:47:23.233304Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list?is_company=true&limit=200
2025-08-17T08:47:23.293484Z DEBUG sqlx::query: summary="SELECT id, is_company, parent_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  is_company,\n  parent_id,\n  name,\n  display_name,\n  email,\n  phone,\n  mobile,\n  website,\n  street,\n  street2,\n  city,\n  state,\n  zip,\n  country_code,\n  notes,\n  NULLIF(tags_cached, '') AS \"tags_cached?: String\",\n  created_at,\n  updated_at\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=109.047863ms elapsed_secs=0.109047863
2025-08-17T08:47:23.306238Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /95ebfccb-9971-4841-90e3-a61173f2cb7d
2025-08-17T08:47:23.364002Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=0 rows_returned=0 elapsed=54.703265ms elapsed_secs=0.054703265
2025-08-17T08:47:23.457991Z DEBUG sqlx::query: summary="SELECT id, is_company, parent_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  is_company,\n  parent_id,\n  name,\n  display_name,\n  email,\n  phone,\n  mobile,\n  website,\n  street,\n  street2,\n  city,\n  state,\n  zip,\n  country_code,\n  notes,\n  NULLIF(tags_cached, '') AS \"tags_cached?: String\",\n  created_at,\n  updated_at\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=97.912373ms elapsed_secs=0.097912373
2025-08-17T08:47:25.132731Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:47:25.330077Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=138.044745ms elapsed_secs=0.138044745
2025-08-17T08:47:25.344806Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:47:25.533885Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=128.532068ms elapsed_secs=0.128532068
2025-08-17T08:47:25.846957Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:47:25.852311Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /1c91cf36-9488-4fb0-9af6-43ec17364c22
2025-08-17T08:47:25.957790Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=51.752005ms elapsed_secs=0.051752005
2025-08-17T08:47:25.992637Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=59.56509ms elapsed_secs=0.05956509
2025-08-17T08:47:25.994498Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:47:26.093486Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=45.856689ms elapsed_secs=0.045856689
2025-08-17T08:47:26.099876Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=1 rows_returned=1 elapsed=49.427259ms elapsed_secs=0.049427259
2025-08-17T08:47:26.102937Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /1c91cf36-9488-4fb0-9af6-43ec17364c22
2025-08-17T08:47:26.256708Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=98.840163ms elapsed_secs=0.098840163
2025-08-17T08:47:26.472573Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=1 rows_returned=1 elapsed=146.20963ms elapsed_secs=0.14620963
2025-08-17T08:47:28.702823Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T08:47:28.809866Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=48.999994ms elapsed_secs=0.048999994
2025-08-17T08:47:28.813423Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T08:47:28.919039Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=50.902729ms elapsed_secs=0.050902729
2025-08-17T08:47:43.868688Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /roles
2025-08-17T08:47:43.960636Z DEBUG sqlx::query: summary="SELECT module_name AS key, ‚Ä¶" db.statement="\n\nSELECT\n  module_name AS key,\n  display_name AS label\nFROM\n  available_module\nORDER BY\n  display_name\n" rows_affected=7 rows_returned=7 elapsed=45.882353ms elapsed_secs=0.045882353
2025-08-17T08:47:43.980169Z DEBUG sqlx::query: summary="SELECT id, resource, action, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  resource,\n  action,\n  label\nFROM\n  permissions\nORDER BY\n  resource,\n  action\n" rows_affected=13 rows_returned=13 elapsed=50.957974ms elapsed_secs=0.050957974
2025-08-17T08:47:44.018283Z DEBUG sqlx::query: summary="SELECT id, tenant_id, name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  name,\n  module\nFROM\n  roles\nWHERE\n  tenant_id = $1\nORDER BY\n  name\n" rows_affected=12 rows_returned=12 elapsed=97.822924ms elapsed_secs=0.097822924
2025-08-17T08:47:44.021775Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /roles
2025-08-17T08:47:44.138235Z DEBUG sqlx::query: summary="SELECT module_name AS key, ‚Ä¶" db.statement="\n\nSELECT\n  module_name AS key,\n  display_name AS label\nFROM\n  available_module\nORDER BY\n  display_name\n" rows_affected=7 rows_returned=7 elapsed=117.467578ms elapsed_secs=0.117467578
2025-08-17T08:47:44.132166Z DEBUG sqlx::query: summary="SELECT id, tenant_id, name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  name,\n  module\nFROM\n  roles\nWHERE\n  tenant_id = $1\nORDER BY\n  name\n" rows_affected=12 rows_returned=12 elapsed=51.913271ms elapsed_secs=0.051913271
2025-08-17T08:47:44.151580Z DEBUG sqlx::query: summary="SELECT id, resource, action, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  resource,\n  action,\n  label\nFROM\n  permissions\nORDER BY\n  resource,\n  action\n" rows_affected=13 rows_returned=13 elapsed=108.945285ms elapsed_secs=0.108945285
2025-08-17T08:47:45.499064Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T08:47:45.597855Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=46.027607ms elapsed_secs=0.046027607
2025-08-17T08:47:45.601520Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T08:47:45.804413Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=150.021086ms elapsed_secs=0.150021086
2025-08-17T08:47:53.844108Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=daily&month=8&day=17
2025-08-17T08:47:53.989546Z DEBUG sqlx::query: summary="SELECT EXTRACT(DAY FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    DAY\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\n  AND EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) = $3\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=4 rows_returned=4 elapsed=93.770987ms elapsed_secs=0.093770987
2025-08-17T08:47:54.685916Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T08:47:54.864456Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=126.478015ms elapsed_secs=0.126478015
2025-08-17T08:47:57.715906Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=yearly
2025-08-17T08:47:57.871745Z DEBUG sqlx::query: summary="SELECT EXTRACT(YEAR FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=1 rows_returned=1 elapsed=101.343689ms elapsed_secs=0.101343689
2025-08-17T08:47:59.456752Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T08:47:59.556776Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=49.292568ms elapsed_secs=0.049292568
2025-08-17T08:49:45.554860Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=daily&month=8&day=17
2025-08-17T08:49:45.655475Z DEBUG sqlx::query: summary="SELECT EXTRACT(DAY FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    DAY\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\n  AND EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) = $3\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=4 rows_returned=4 elapsed=48.595331ms elapsed_secs=0.048595331
2025-08-17T08:50:25.088218Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T08:50:25.090250Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T08:50:26.633932Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T08:50:26.736305Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=50.985039ms elapsed_secs=0.050985039
2025-08-17T08:50:26.767178Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T08:50:26.784212Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T08:50:26.889414Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=60.377592ms elapsed_secs=0.060377592
2025-08-17T08:50:26.914152Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=47.752703ms elapsed_secs=0.047752703
2025-08-17T08:50:26.918111Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T08:50:27.001972Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=53.638098ms elapsed_secs=0.053638098
2025-08-17T08:50:27.031190Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=52.685175ms elapsed_secs=0.052685175
2025-08-17T08:50:27.132313Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=48.327539ms elapsed_secs=0.048327539
2025-08-17T08:50:28.626531Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=daily&month=8&day=17
2025-08-17T08:50:28.780970Z DEBUG sqlx::query: summary="SELECT EXTRACT(DAY FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    DAY\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\n  AND EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) = $3\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=4 rows_returned=4 elapsed=101.170576ms elapsed_secs=0.101170576
2025-08-17T08:50:52.184408Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:50:52.282501Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=47.316025ms elapsed_secs=0.047316025
2025-08-17T08:50:52.285980Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:50:52.388004Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=47.676792ms elapsed_secs=0.047676792
2025-08-17T08:50:53.857939Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:50:53.857937Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /e48e0f6a-7636-47a7-b036-4c7fa41fa443
2025-08-17T08:50:53.961087Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=49.497858ms elapsed_secs=0.049497858
2025-08-17T08:50:53.965798Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=53.712491ms elapsed_secs=0.053712491
2025-08-17T08:50:53.967584Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T08:50:54.058712Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=1 rows_returned=1 elapsed=45.756067ms elapsed_secs=0.045756067
2025-08-17T08:50:54.065342Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /e48e0f6a-7636-47a7-b036-4c7fa41fa443
2025-08-17T08:50:54.085054Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=52.410863ms elapsed_secs=0.052410863
2025-08-17T08:50:54.160754Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=45.51812ms elapsed_secs=0.04551812
2025-08-17T08:50:54.270394Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=1 rows_returned=1 elapsed=49.191547ms elapsed_secs=0.049191547
2025-08-17T08:51:07.312501Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /e48e0f6a-7636-47a7-b036-4c7fa41fa443/update
2025-08-17T08:51:07.538198Z DEBUG sqlx::query: summary="UPDATE loan_contract SET contact_id ‚Ä¶" db.statement="\n\nUPDATE\n  loan_contract\nSET\n  contact_id = $1,\n  name = $2,\n  principal = $3,\n  interest_rate = $4,\n  term_months = $5,\n  date_start = $6,\n  date_end = $7,\n  collateral_description = $8,\n  collateral_value = $9,\n  updated_at = NOW()\nWHERE\n  id = $10\n  AND tenant_id = $11\nRETURNING\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\n" rows_affected=0 rows_returned=1 elapsed=114.583892ms elapsed_secs=0.114583892
2025-08-17T08:51:07.641863Z DEBUG sqlx::query: summary="DELETE FROM loan_transaction WHERE ‚Ä¶" db.statement="\n\nDELETE FROM\n  loan_transaction\nWHERE\n  contract_id = $1\n  AND tenant_id = $2\n" rows_affected=1 rows_returned=0 elapsed=102.549921ms elapsed_secs=0.102549921
2025-08-17T08:51:07.693802Z DEBUG sqlx::query: summary="INSERT INTO loan_transaction ( ‚Ä¶" db.statement="\n\nINSERT INTO\n  loan_transaction (\n    contract_id,\n    tenant_id,\n    contact_id,\n    transaction_type,\n    amount,\n    \"date\",\n    note\n  )\nVALUES\n  ($1, $2, $3, $4, $5, $6, $7)\n" rows_affected=1 rows_returned=0 elapsed=49.643061ms elapsed_secs=0.049643061
2025-08-17T08:51:07.746969Z DEBUG sqlx::query: summary="INSERT INTO loan_transaction ( ‚Ä¶" db.statement="\n\nINSERT INTO\n  loan_transaction (\n    contract_id,\n    tenant_id,\n    contact_id,\n    transaction_type,\n    amount,\n    \"date\",\n    note\n  )\nVALUES\n  ($1, $2, $3, $4, $5, $6, $7)\n" rows_affected=1 rows_returned=0 elapsed=48.627423ms elapsed_secs=0.048627423
2025-08-17T08:51:07.796856Z DEBUG sqlx::query: summary="COMMIT" db.statement="" rows_affected=0 rows_returned=0 elapsed=49.109539ms elapsed_secs=0.049109539
2025-08-17T08:51:07.806632Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /e48e0f6a-7636-47a7-b036-4c7fa41fa443
2025-08-17T08:51:07.924091Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=60.108109ms elapsed_secs=0.060108109
2025-08-17T08:51:08.019759Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=2 rows_returned=2 elapsed=46.118338ms elapsed_secs=0.046118338
2025-08-17T08:51:08.779481Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T08:51:08.882727Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=49.519836ms elapsed_secs=0.049519836
2025-08-17T08:51:08.884756Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T08:51:08.984153Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=48.77182ms elapsed_secs=0.04877182
2025-08-17T08:51:12.127222Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=daily&month=8&day=17
2025-08-17T08:51:12.285870Z DEBUG sqlx::query: summary="SELECT EXTRACT(DAY FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    DAY\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\n  AND EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) = $3\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=5 rows_returned=5 elapsed=97.559691ms elapsed_secs=0.097559691
2025-08-17T08:53:02.273138Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T08:53:02.400920Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=54.76632ms elapsed_secs=0.05476632
2025-08-17T08:53:02.449923Z DEBUG rustls::common_state: Sending warning alert CloseNotify    
2025-08-17T08:55:54.653742Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T08:55:54.768574Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=53.68941ms elapsed_secs=0.05368941
2025-08-17T08:55:54.829887Z DEBUG rustls::common_state: Sending warning alert CloseNotify    
2025-08-17T08:55:59.528435Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=daily&month=8&day=17
2025-08-17T08:55:59.624696Z DEBUG sqlx::query: summary="SELECT EXTRACT(DAY FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    DAY\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\n  AND EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) = $3\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=5 rows_returned=5 elapsed=47.083235ms elapsed_secs=0.047083235
2025-08-17T08:55:59.673241Z DEBUG rustls::common_state: Sending warning alert CloseNotify    
2025-08-17T08:56:01.453376Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T08:56:01.558601Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=49.702997ms elapsed_secs=0.049702997
2025-08-17T08:56:03.418611Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=daily&month=8&day=17
2025-08-17T08:56:03.527631Z DEBUG sqlx::query: summary="SELECT EXTRACT(DAY FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    DAY\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\n  AND EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) = $3\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=5 rows_returned=5 elapsed=48.027748ms elapsed_secs=0.048027748
2025-08-17T08:56:03.577796Z DEBUG rustls::common_state: Sending warning alert CloseNotify    
2025-08-17T08:56:04.870852Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T08:56:04.970329Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=47.902767ms elapsed_secs=0.047902767
2025-08-17T08:56:08.692862Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T08:56:08.697929Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T08:56:09.233192Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T08:56:09.303509Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T08:56:09.339868Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=49.874992ms elapsed_secs=0.049874992
2025-08-17T08:56:09.342458Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T08:56:09.469139Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=116.439538ms elapsed_secs=0.116439538
2025-08-17T08:56:09.570911Z DEBUG rustls::client::hs: No cached session for DnsName("ap-southeast-1.e4c6174f-6538-4e47-93bf-0a2503819047.aws.yugabyte.cloud")    
2025-08-17T08:56:09.571833Z DEBUG rustls::client::hs: Not resuming any session    
2025-08-17T08:56:09.632301Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=112.542862ms elapsed_secs=0.112542862
2025-08-17T08:56:09.639524Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T08:56:09.688469Z DEBUG rustls::client::hs: Using ciphersuite TLS13_AES_256_GCM_SHA384    
2025-08-17T08:56:09.689182Z DEBUG rustls::client::tls13: Not resuming    
2025-08-17T08:56:09.689558Z DEBUG rustls::client::tls13: TLS1.3 encrypted extensions: []    
2025-08-17T08:56:09.689769Z DEBUG rustls::client::hs: ALPN protocol is None    
2025-08-17T08:56:09.690140Z DEBUG rustls::client::tls13: Got CertificateRequest CertificateRequestPayloadTLS13 { context: , extensions: [SignatureAlgorithms([ECDSA_NISTP256_SHA256, ECDSA_NISTP384_SHA384, ECDSA_NISTP521_SHA512, ED25519, ED448, Unknown(2057), Unknown(2058), Unknown(2059), RSA_PSS_SHA256, RSA_PSS_SHA384, RSA_PSS_SHA512, RSA_PKCS1_SHA256, RSA_PKCS1_SHA384, RSA_PKCS1_SHA512, Unknown(771), Unknown(769)]), AuthorityNames([DistinguishedName(305b31153013060355040a130c597567616279746520496e633142304006035504030c392a2e65346336313734662d363533382d346534372d393362662d3061323530333831393034372e6177732e79756761627974652e636c6f7564), DistinguishedName(30818b310b3009060355040613025553310b3009060355040813024341311230100603550407130953756e6e7976616c6531153013060355040a130c597567616279746520496e6331173015060355040b130e597567616279746520436c6f7564312b302906035504031322597567616279746520436c6f7564205375626f7264696e6174652043412070726f64), DistinguishedName(308184310b3009060355040613025553310b3009060355040813024341311230100603550407130953756e6e7976616c6531153013060355040a130c597567616279746520496e6331173015060355040b130e597567616279746520436c6f7564312430220603550403131b597567616279746520436c6f756420526f6f742043412070726f64)])] }    
2025-08-17T08:56:09.690207Z DEBUG rustls::client::common: Client auth requested but no cert/sigscheme available    
2025-08-17T08:56:09.747243Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=51.568496ms elapsed_secs=0.051568496
2025-08-17T08:56:09.852952Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=54.445728ms elapsed_secs=0.054445728
2025-08-17T08:56:10.023403Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=195.554998ms elapsed_secs=0.195554998
2025-08-17T08:56:20.646580Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T08:56:20.658034Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T08:56:21.103922Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T08:56:21.162944Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T08:56:21.208094Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=49.35991ms elapsed_secs=0.04935991
2025-08-17T08:56:21.210317Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T08:56:21.314981Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=50.518935ms elapsed_secs=0.050518935
2025-08-17T08:56:21.376987Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=163.123109ms elapsed_secs=0.163123109
2025-08-17T08:56:21.532897Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=96.680116ms elapsed_secs=0.096680116
2025-08-17T08:56:21.536316Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T08:56:21.743475Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=151.508414ms elapsed_secs=0.151508414
2025-08-17T08:56:21.848384Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=50.659097ms elapsed_secs=0.050659097
2025-08-17T08:56:24.655968Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T08:56:24.658356Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T08:56:25.104674Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T08:56:25.162210Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T08:56:25.208643Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=48.046013ms elapsed_secs=0.048046013
2025-08-17T08:56:25.213294Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T08:56:25.268136Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=51.836884ms elapsed_secs=0.051836884
2025-08-17T08:56:25.322135Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=55.508286ms elapsed_secs=0.055508286
2025-08-17T08:56:25.401353Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=77.628058ms elapsed_secs=0.077628058
2025-08-17T08:56:25.413948Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T08:56:25.535392Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=54.182069ms elapsed_secs=0.054182069
2025-08-17T08:56:25.634828Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=49.256646ms elapsed_secs=0.049256646
2025-08-17T08:56:27.582140Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=daily&month=8&day=17
2025-08-17T08:56:27.699104Z DEBUG sqlx::query: summary="SELECT EXTRACT(DAY FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    DAY\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\n  AND EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) = $3\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=5 rows_returned=5 elapsed=48.885121ms elapsed_secs=0.048885121
2025-08-17T08:56:29.143297Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T08:56:29.255941Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=52.243067ms elapsed_secs=0.052243067
2025-08-17T08:56:31.303856Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=yearly
2025-08-17T08:56:31.464485Z DEBUG sqlx::query: summary="SELECT EXTRACT(YEAR FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=1 rows_returned=1 elapsed=104.268654ms elapsed_secs=0.104268654
2025-08-17T08:56:32.861954Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T08:56:32.975820Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=61.988594ms elapsed_secs=0.061988594
2025-08-17T08:56:34.886900Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=yearly
2025-08-17T08:56:35.039840Z DEBUG sqlx::query: summary="SELECT EXTRACT(YEAR FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=1 rows_returned=1 elapsed=99.332624ms elapsed_secs=0.099332624
2025-08-17T08:56:45.369844Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T08:56:45.473397Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=50.271818ms elapsed_secs=0.050271818
2025-08-17T08:56:49.836753Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T08:56:49.838769Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T08:56:50.310797Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T08:56:50.367165Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T08:56:50.409427Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=48.045145ms elapsed_secs=0.048045145
2025-08-17T08:56:50.411976Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T08:56:50.484069Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=61.918113ms elapsed_secs=0.061918113
2025-08-17T08:56:50.523361Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=50.544985ms elapsed_secs=0.050544985
2025-08-17T08:56:50.587301Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=50.572344ms elapsed_secs=0.050572344
2025-08-17T08:56:50.591179Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T08:56:50.696681Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=51.418894ms elapsed_secs=0.051418894
2025-08-17T08:56:50.804875Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=51.908285ms elapsed_secs=0.051908285
2025-08-17T08:56:51.988945Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /roles
2025-08-17T08:56:52.085382Z DEBUG sqlx::query: summary="SELECT module_name AS key, ‚Ä¶" db.statement="\n\nSELECT\n  module_name AS key,\n  display_name AS label\nFROM\n  available_module\nORDER BY\n  display_name\n" rows_affected=7 rows_returned=7 elapsed=49.584551ms elapsed_secs=0.049584551
2025-08-17T08:56:52.143962Z DEBUG sqlx::query: summary="SELECT id, tenant_id, name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  name,\n  module\nFROM\n  roles\nWHERE\n  tenant_id = $1\nORDER BY\n  name\n" rows_affected=12 rows_returned=12 elapsed=105.307103ms elapsed_secs=0.105307103
2025-08-17T08:56:52.147537Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /roles
2025-08-17T08:56:52.173385Z DEBUG sqlx::query: summary="SELECT id, resource, action, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  resource,\n  action,\n  label\nFROM\n  permissions\nORDER BY\n  resource,\n  action\n" rows_affected=13 rows_returned=13 elapsed=134.680831ms elapsed_secs=0.134680831
2025-08-17T08:56:52.250305Z DEBUG sqlx::query: summary="SELECT id, tenant_id, name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  name,\n  module\nFROM\n  roles\nWHERE\n  tenant_id = $1\nORDER BY\n  name\n" rows_affected=12 rows_returned=12 elapsed=47.674958ms elapsed_secs=0.047674958
2025-08-17T08:56:52.254560Z DEBUG rustls::client::hs: No cached session for DnsName("ap-southeast-1.e4c6174f-6538-4e47-93bf-0a2503819047.aws.yugabyte.cloud")    
2025-08-17T08:56:52.254938Z DEBUG rustls::client::hs: Not resuming any session    
2025-08-17T08:56:52.288203Z DEBUG rustls::client::hs: No cached session for DnsName("ap-southeast-1.e4c6174f-6538-4e47-93bf-0a2503819047.aws.yugabyte.cloud")    
2025-08-17T08:56:52.288917Z DEBUG rustls::client::hs: Not resuming any session    
2025-08-17T08:56:52.352917Z DEBUG rustls::client::hs: Using ciphersuite TLS13_AES_256_GCM_SHA384    
2025-08-17T08:56:52.355900Z DEBUG rustls::client::tls13: Not resuming    
2025-08-17T08:56:52.356661Z DEBUG rustls::client::tls13: TLS1.3 encrypted extensions: []    
2025-08-17T08:56:52.356904Z DEBUG rustls::client::hs: ALPN protocol is None    
2025-08-17T08:56:52.357065Z DEBUG rustls::client::tls13: Got CertificateRequest CertificateRequestPayloadTLS13 { context: , extensions: [SignatureAlgorithms([ECDSA_NISTP256_SHA256, ECDSA_NISTP384_SHA384, ECDSA_NISTP521_SHA512, ED25519, ED448, Unknown(2057), Unknown(2058), Unknown(2059), RSA_PSS_SHA256, RSA_PSS_SHA384, RSA_PSS_SHA512, RSA_PKCS1_SHA256, RSA_PKCS1_SHA384, RSA_PKCS1_SHA512, Unknown(771), Unknown(769)]), AuthorityNames([DistinguishedName(305b31153013060355040a130c597567616279746520496e633142304006035504030c392a2e65346336313734662d363533382d346534372d393362662d3061323530333831393034372e6177732e79756761627974652e636c6f7564), DistinguishedName(30818b310b3009060355040613025553310b3009060355040813024341311230100603550407130953756e6e7976616c6531153013060355040a130c597567616279746520496e6331173015060355040b130e597567616279746520436c6f7564312b302906035504031322597567616279746520436c6f7564205375626f7264696e6174652043412070726f64), DistinguishedName(308184310b3009060355040613025553310b3009060355040813024341311230100603550407130953756e6e7976616c6531153013060355040a130c597567616279746520496e6331173015060355040b130e597567616279746520436c6f7564312430220603550403131b597567616279746520436c6f756420526f6f742043412070726f64)])] }    
2025-08-17T08:56:52.357253Z DEBUG rustls::client::common: Client auth requested but no cert/sigscheme available    
2025-08-17T08:56:52.393081Z DEBUG rustls::client::hs: Using ciphersuite TLS13_AES_256_GCM_SHA384    
2025-08-17T08:56:52.400324Z DEBUG rustls::client::tls13: Not resuming    
2025-08-17T08:56:52.400637Z DEBUG rustls::client::tls13: TLS1.3 encrypted extensions: []    
2025-08-17T08:56:52.400675Z DEBUG rustls::client::hs: ALPN protocol is None    
2025-08-17T08:56:52.400723Z DEBUG rustls::client::tls13: Got CertificateRequest CertificateRequestPayloadTLS13 { context: , extensions: [SignatureAlgorithms([ECDSA_NISTP256_SHA256, ECDSA_NISTP384_SHA384, ECDSA_NISTP521_SHA512, ED25519, ED448, Unknown(2057), Unknown(2058), Unknown(2059), RSA_PSS_SHA256, RSA_PSS_SHA384, RSA_PSS_SHA512, RSA_PKCS1_SHA256, RSA_PKCS1_SHA384, RSA_PKCS1_SHA512, Unknown(771), Unknown(769)]), AuthorityNames([DistinguishedName(305b31153013060355040a130c597567616279746520496e633142304006035504030c392a2e65346336313734662d363533382d346534372d393362662d3061323530333831393034372e6177732e79756761627974652e636c6f7564), DistinguishedName(30818b310b3009060355040613025553310b3009060355040813024341311230100603550407130953756e6e7976616c6531153013060355040a130c597567616279746520496e6331173015060355040b130e597567616279746520436c6f7564312b302906035504031322597567616279746520436c6f7564205375626f7264696e6174652043412070726f64), DistinguishedName(308184310b3009060355040613025553310b3009060355040813024341311230100603550407130953756e6e7976616c6531153013060355040a130c597567616279746520496e6331173015060355040b130e597567616279746520436c6f7564312430220603550403131b597567616279746520436c6f756420526f6f742043412070726f64)])] }    
2025-08-17T08:56:52.400783Z DEBUG rustls::client::common: Client auth requested but no cert/sigscheme available    
2025-08-17T08:56:52.646675Z DEBUG sqlx::query: summary="SELECT module_name AS key, ‚Ä¶" db.statement="\n\nSELECT\n  module_name AS key,\n  display_name AS label\nFROM\n  available_module\nORDER BY\n  display_name\n" rows_affected=7 rows_returned=7 elapsed=150.600639ms elapsed_secs=0.150600639
2025-08-17T08:56:52.700535Z DEBUG sqlx::query: summary="SELECT id, resource, action, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  resource,\n  action,\n  label\nFROM\n  permissions\nORDER BY\n  resource,\n  action\n" rows_affected=13 rows_returned=13 elapsed=162.599768ms elapsed_secs=0.162599768
2025-08-17T08:56:54.466179Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T08:56:54.570125Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=52.283059ms elapsed_secs=0.052283059
2025-08-17T08:56:54.572529Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T08:56:54.678643Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=51.13698ms elapsed_secs=0.05113698
2025-08-17T08:57:03.316340Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /roles
2025-08-17T08:57:03.408983Z DEBUG sqlx::query: summary="SELECT module_name AS key, ‚Ä¶" db.statement="\n\nSELECT\n  module_name AS key,\n  display_name AS label\nFROM\n  available_module\nORDER BY\n  display_name\n" rows_affected=7 rows_returned=7 elapsed=46.839763ms elapsed_secs=0.046839763
2025-08-17T08:57:03.478099Z DEBUG sqlx::query: summary="SELECT id, resource, action, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  resource,\n  action,\n  label\nFROM\n  permissions\nORDER BY\n  resource,\n  action\n" rows_affected=13 rows_returned=13 elapsed=114.510056ms elapsed_secs=0.114510056
2025-08-17T08:57:03.494104Z DEBUG sqlx::query: summary="SELECT id, tenant_id, name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  name,\n  module\nFROM\n  roles\nWHERE\n  tenant_id = $1\nORDER BY\n  name\n" rows_affected=12 rows_returned=12 elapsed=126.486564ms elapsed_secs=0.126486564
2025-08-17T08:57:03.499678Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /roles
2025-08-17T08:57:03.578092Z DEBUG sqlx::query: summary="SELECT module_name AS key, ‚Ä¶" db.statement="\n\nSELECT\n  module_name AS key,\n  display_name AS label\nFROM\n  available_module\nORDER BY\n  display_name\n" rows_affected=7 rows_returned=7 elapsed=108.400701ms elapsed_secs=0.108400701
2025-08-17T08:57:03.584303Z DEBUG sqlx::query: summary="SELECT id, resource, action, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  resource,\n  action,\n  label\nFROM\n  permissions\nORDER BY\n  resource,\n  action\n" rows_affected=13 rows_returned=13 elapsed=50.473856ms elapsed_secs=0.050473856
2025-08-17T08:57:03.596624Z DEBUG sqlx::query: summary="SELECT id, tenant_id, name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  name,\n  module\nFROM\n  roles\nWHERE\n  tenant_id = $1\nORDER BY\n  name\n" rows_affected=12 rows_returned=12 elapsed=48.074903ms elapsed_secs=0.048074903
2025-08-17T08:57:04.395786Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T08:57:04.613574Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=163.971532ms elapsed_secs=0.163971532
2025-08-17T08:57:04.617302Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T08:57:04.832973Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=158.314868ms elapsed_secs=0.158314868
2025-08-17T08:57:24.682856Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /roles
2025-08-17T08:57:24.777935Z DEBUG sqlx::query: summary="SELECT id, tenant_id, name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  name,\n  module\nFROM\n  roles\nWHERE\n  tenant_id = $1\nORDER BY\n  name\n" rows_affected=12 rows_returned=12 elapsed=47.53177ms elapsed_secs=0.04753177
2025-08-17T08:57:24.781972Z DEBUG sqlx::query: summary="SELECT module_name AS key, ‚Ä¶" db.statement="\n\nSELECT\n  module_name AS key,\n  display_name AS label\nFROM\n  available_module\nORDER BY\n  display_name\n" rows_affected=7 rows_returned=7 elapsed=50.75894ms elapsed_secs=0.05075894
2025-08-17T08:57:24.789559Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /roles
2025-08-17T08:57:24.796505Z DEBUG sqlx::query: summary="SELECT id, resource, action, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  resource,\n  action,\n  label\nFROM\n  permissions\nORDER BY\n  resource,\n  action\n" rows_affected=13 rows_returned=13 elapsed=57.526312ms elapsed_secs=0.057526312
2025-08-17T08:57:24.948892Z DEBUG sqlx::query: summary="SELECT module_name AS key, ‚Ä¶" db.statement="\n\nSELECT\n  module_name AS key,\n  display_name AS label\nFROM\n  available_module\nORDER BY\n  display_name\n" rows_affected=7 rows_returned=7 elapsed=106.496747ms elapsed_secs=0.106496747
2025-08-17T08:57:24.954355Z DEBUG sqlx::query: summary="SELECT id, tenant_id, name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  name,\n  module\nFROM\n  roles\nWHERE\n  tenant_id = $1\nORDER BY\n  name\n" rows_affected=12 rows_returned=12 elapsed=113.5069ms elapsed_secs=0.1135069
2025-08-17T08:57:24.981523Z DEBUG rustls::client::hs: No cached session for DnsName("ap-southeast-1.e4c6174f-6538-4e47-93bf-0a2503819047.aws.yugabyte.cloud")    
2025-08-17T08:57:24.982093Z DEBUG rustls::client::hs: Not resuming any session    
2025-08-17T08:57:25.082102Z DEBUG rustls::client::hs: Using ciphersuite TLS13_AES_256_GCM_SHA384    
2025-08-17T08:57:25.082951Z DEBUG rustls::client::tls13: Not resuming    
2025-08-17T08:57:25.083199Z DEBUG rustls::client::tls13: TLS1.3 encrypted extensions: []    
2025-08-17T08:57:25.083214Z DEBUG rustls::client::hs: ALPN protocol is None    
2025-08-17T08:57:25.083252Z DEBUG rustls::client::tls13: Got CertificateRequest CertificateRequestPayloadTLS13 { context: , extensions: [SignatureAlgorithms([ECDSA_NISTP256_SHA256, ECDSA_NISTP384_SHA384, ECDSA_NISTP521_SHA512, ED25519, ED448, Unknown(2057), Unknown(2058), Unknown(2059), RSA_PSS_SHA256, RSA_PSS_SHA384, RSA_PSS_SHA512, RSA_PKCS1_SHA256, RSA_PKCS1_SHA384, RSA_PKCS1_SHA512, Unknown(771), Unknown(769)]), AuthorityNames([DistinguishedName(305b31153013060355040a130c597567616279746520496e633142304006035504030c392a2e65346336313734662d363533382d346534372d393362662d3061323530333831393034372e6177732e79756761627974652e636c6f7564), DistinguishedName(30818b310b3009060355040613025553310b3009060355040813024341311230100603550407130953756e6e7976616c6531153013060355040a130c597567616279746520496e6331173015060355040b130e597567616279746520436c6f7564312b302906035504031322597567616279746520436c6f7564205375626f7264696e6174652043412070726f64), DistinguishedName(308184310b3009060355040613025553310b3009060355040813024341311230100603550407130953756e6e7976616c6531153013060355040a130c597567616279746520496e6331173015060355040b130e597567616279746520436c6f7564312430220603550403131b597567616279746520436c6f756420526f6f742043412070726f64)])] }    
2025-08-17T08:57:25.083493Z DEBUG rustls::client::common: Client auth requested but no cert/sigscheme available    
2025-08-17T08:57:25.377521Z DEBUG sqlx::query: summary="SELECT id, resource, action, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  resource,\n  action,\n  label\nFROM\n  permissions\nORDER BY\n  resource,\n  action\n" rows_affected=13 rows_returned=13 elapsed=161.347466ms elapsed_secs=0.161347466
2025-08-17T08:57:26.162116Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T08:57:26.271115Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=58.54771ms elapsed_secs=0.05854771
2025-08-17T08:57:26.273784Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T08:57:26.376863Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=49.43422ms elapsed_secs=0.04943422
2025-08-17T08:57:32.753252Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=daily&month=8&day=17
2025-08-17T08:57:32.926980Z DEBUG sqlx::query: summary="SELECT EXTRACT(DAY FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    DAY\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\n  AND EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) = $3\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=5 rows_returned=5 elapsed=108.773632ms elapsed_secs=0.108773632
2025-08-17T08:57:34.431508Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T08:57:34.538840Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=49.258641ms elapsed_secs=0.049258641
2025-08-17T08:57:36.344765Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=yearly
2025-08-17T08:57:36.486813Z DEBUG sqlx::query: summary="SELECT EXTRACT(YEAR FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=1 rows_returned=1 elapsed=93.154535ms elapsed_secs=0.093154535
2025-08-17T08:57:37.796025Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=daily&month=8&day=17
2025-08-17T08:57:38.012995Z DEBUG sqlx::query: summary="SELECT EXTRACT(DAY FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    DAY\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\n  AND EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) = $3\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=5 rows_returned=5 elapsed=165.475125ms elapsed_secs=0.165475125
2025-08-17T08:57:39.474203Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T08:57:39.572489Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=48.808849ms elapsed_secs=0.048808849
2025-08-17T08:58:06.167440Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T08:58:06.168947Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T08:58:06.653975Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T08:58:06.705755Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T08:58:06.759828Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=49.894452ms elapsed_secs=0.049894452
2025-08-17T08:58:06.762717Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T08:58:06.847015Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=67.068706ms elapsed_secs=0.067068706
2025-08-17T08:58:06.890965Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=51.900834ms elapsed_secs=0.051900834
2025-08-17T08:58:07.002908Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=103.25597ms elapsed_secs=0.10325597
2025-08-17T08:58:07.005469Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T08:58:07.192790Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=132.868802ms elapsed_secs=0.132868802
2025-08-17T08:58:07.290580Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=47.500786ms elapsed_secs=0.047500786
2025-08-17T09:01:38.361024Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T09:01:38.364565Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T09:01:38.912600Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:01:38.976883Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T09:01:39.024307Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=51.052784ms elapsed_secs=0.051052784
2025-08-17T09:01:39.034411Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:01:39.096960Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=55.350803ms elapsed_secs=0.055350803
2025-08-17T09:01:39.144296Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=51.58094ms elapsed_secs=0.05158094
2025-08-17T09:01:39.203026Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=48.398214ms elapsed_secs=0.048398214
2025-08-17T09:01:39.207078Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T09:01:39.302085Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=47.546996ms elapsed_secs=0.047546996
2025-08-17T09:01:39.397891Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=48.701189ms elapsed_secs=0.048701189
2025-08-17T09:01:41.636518Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=daily&month=8&day=17
2025-08-17T09:01:41.738832Z DEBUG sqlx::query: summary="SELECT EXTRACT(DAY FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    DAY\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\n  AND EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) = $3\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=5 rows_returned=5 elapsed=50.436099ms elapsed_secs=0.050436099
2025-08-17T09:01:43.150862Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:01:43.255593Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=50.32057ms elapsed_secs=0.05032057
2025-08-17T09:01:44.942358Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=yearly
2025-08-17T09:01:45.120834Z DEBUG sqlx::query: summary="SELECT EXTRACT(YEAR FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=1 rows_returned=1 elapsed=106.445149ms elapsed_secs=0.106445149
2025-08-17T09:01:47.529150Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /roles
2025-08-17T09:01:47.620749Z DEBUG sqlx::query: summary="SELECT module_name AS key, ‚Ä¶" db.statement="\n\nSELECT\n  module_name AS key,\n  display_name AS label\nFROM\n  available_module\nORDER BY\n  display_name\n" rows_affected=7 rows_returned=7 elapsed=46.646549ms elapsed_secs=0.046646549
2025-08-17T09:01:47.621394Z DEBUG sqlx::query: summary="SELECT id, resource, action, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  resource,\n  action,\n  label\nFROM\n  permissions\nORDER BY\n  resource,\n  action\n" rows_affected=13 rows_returned=13 elapsed=46.244316ms elapsed_secs=0.046244316
2025-08-17T09:01:47.624840Z DEBUG sqlx::query: summary="SELECT id, tenant_id, name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  name,\n  module\nFROM\n  roles\nWHERE\n  tenant_id = $1\nORDER BY\n  name\n" rows_affected=12 rows_returned=12 elapsed=47.885712ms elapsed_secs=0.047885712
2025-08-17T09:01:47.626878Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /roles
2025-08-17T09:01:47.721306Z DEBUG sqlx::query: summary="SELECT module_name AS key, ‚Ä¶" db.statement="\n\nSELECT\n  module_name AS key,\n  display_name AS label\nFROM\n  available_module\nORDER BY\n  display_name\n" rows_affected=7 rows_returned=7 elapsed=49.672566ms elapsed_secs=0.049672566
2025-08-17T09:01:47.725258Z DEBUG sqlx::query: summary="SELECT id, resource, action, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  resource,\n  action,\n  label\nFROM\n  permissions\nORDER BY\n  resource,\n  action\n" rows_affected=13 rows_returned=13 elapsed=50.468301ms elapsed_secs=0.050468301
2025-08-17T09:01:47.735130Z DEBUG sqlx::query: summary="SELECT id, tenant_id, name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  name,\n  module\nFROM\n  roles\nWHERE\n  tenant_id = $1\nORDER BY\n  name\n" rows_affected=12 rows_returned=12 elapsed=56.631505ms elapsed_secs=0.056631505
2025-08-17T09:01:49.168610Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /users
2025-08-17T09:01:49.385759Z DEBUG sqlx::query: summary="SELECT u.tenant_id, t.name AS ‚Ä¶" db.statement="\n\nSELECT\n  u.tenant_id,\n  t.name AS tenant_name,\n  u.user_id,\n  u.email,\n  u.name,\n  u.created_at\nFROM\n  users u\n  JOIN tenant t ON u.tenant_id = t.tenant_id\nORDER BY\n  u.created_at DESC\n" rows_affected=3 rows_returned=3 elapsed=156.759743ms elapsed_secs=0.156759743
2025-08-17T09:01:49.399113Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /users
2025-08-17T09:01:49.608414Z DEBUG sqlx::query: summary="SELECT u.tenant_id, t.name AS ‚Ä¶" db.statement="\n\nSELECT\n  u.tenant_id,\n  t.name AS tenant_name,\n  u.user_id,\n  u.email,\n  u.name,\n  u.created_at\nFROM\n  users u\n  JOIN tenant t ON u.tenant_id = t.tenant_id\nORDER BY\n  u.created_at DESC\n" rows_affected=3 rows_returned=3 elapsed=149.291671ms elapsed_secs=0.149291671
2025-08-17T09:01:50.185873Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:01:50.283890Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=47.124027ms elapsed_secs=0.047124027
2025-08-17T09:01:50.286929Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:01:50.388310Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=50.220226ms elapsed_secs=0.050220226
2025-08-17T09:02:14.439575Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T09:02:14.441849Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T09:02:14.894543Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:02:14.947496Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T09:02:15.001951Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=55.892107ms elapsed_secs=0.055892107
2025-08-17T09:02:15.004644Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:02:15.108657Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=49.880707ms elapsed_secs=0.049880707
2025-08-17T09:02:15.130856Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=128.499722ms elapsed_secs=0.128499722
2025-08-17T09:02:15.286511Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=105.618637ms elapsed_secs=0.105618637
2025-08-17T09:02:15.290458Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T09:02:15.388499Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=48.869516ms elapsed_secs=0.048869516
2025-08-17T09:02:15.486559Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=49.39013ms elapsed_secs=0.04939013
2025-08-17T09:05:35.994797Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=daily&month=8&day=17
2025-08-17T09:05:36.121149Z DEBUG sqlx::query: summary="SELECT EXTRACT(DAY FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    DAY\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\n  AND EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) = $3\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=5 rows_returned=5 elapsed=55.029979ms elapsed_secs=0.055029979
2025-08-17T09:05:36.251715Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:05:36.357532Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=0 rows_returned=0 elapsed=43.552206ms elapsed_secs=0.043552206
2025-08-17T09:05:39.213851Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T09:05:39.216558Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T09:05:41.797674Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:05:41.869357Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T09:05:41.902947Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=49.62613ms elapsed_secs=0.04962613
2025-08-17T09:05:41.906185Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:05:41.992129Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=65.717486ms elapsed_secs=0.065717486
2025-08-17T09:05:42.018985Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=53.210624ms elapsed_secs=0.053210624
2025-08-17T09:05:42.119326Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=52.756128ms elapsed_secs=0.052756128
2025-08-17T09:05:42.122507Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T09:05:42.234458Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=51.626762ms elapsed_secs=0.051626762
2025-08-17T09:05:42.335583Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=47.851606ms elapsed_secs=0.047851606
2025-08-17T09:05:44.177031Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=daily&month=8&day=17
2025-08-17T09:05:44.328060Z DEBUG sqlx::query: summary="SELECT EXTRACT(DAY FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    DAY\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\n  AND EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) = $3\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=5 rows_returned=5 elapsed=98.581572ms elapsed_secs=0.098581572
2025-08-17T09:05:45.430975Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:05:45.572100Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=92.192216ms elapsed_secs=0.092192216
2025-08-17T09:05:48.137835Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T09:05:48.140613Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T09:05:48.608103Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:05:48.656319Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T09:05:48.707367Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=48.600128ms elapsed_secs=0.048600128
2025-08-17T09:05:48.710096Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:05:48.791268Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=66.071713ms elapsed_secs=0.066071713
2025-08-17T09:05:48.900475Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=57.227907ms elapsed_secs=0.057227907
2025-08-17T09:05:48.913207Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=55.728296ms elapsed_secs=0.055728296
2025-08-17T09:05:48.923265Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T09:05:49.037392Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=58.7933ms elapsed_secs=0.0587933
2025-08-17T09:05:49.133857Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=47.728173ms elapsed_secs=0.047728173
2025-08-17T09:05:52.784932Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T09:05:52.787401Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T09:05:53.249620Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:05:53.315086Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T09:05:53.348327Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=47.225422ms elapsed_secs=0.047225422
2025-08-17T09:05:53.351589Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:05:53.424918Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=56.332224ms elapsed_secs=0.056332224
2025-08-17T09:05:53.463244Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=52.180017ms elapsed_secs=0.052180017
2025-08-17T09:05:53.520404Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=46.772595ms elapsed_secs=0.046772595
2025-08-17T09:05:53.531001Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T09:05:53.649300Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=54.905755ms elapsed_secs=0.054905755
2025-08-17T09:05:53.763695Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=47.385603ms elapsed_secs=0.047385603
2025-08-17T09:05:55.189880Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=yearly
2025-08-17T09:05:55.346168Z DEBUG sqlx::query: summary="SELECT EXTRACT(YEAR FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=1 rows_returned=1 elapsed=103.927672ms elapsed_secs=0.103927672
2025-08-17T09:05:56.291994Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:05:56.395006Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=49.536378ms elapsed_secs=0.049536378
2025-08-17T09:05:57.155352Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=daily&month=8&day=17
2025-08-17T09:05:57.263123Z DEBUG sqlx::query: summary="SELECT EXTRACT(DAY FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    DAY\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\n  AND EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) = $3\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=5 rows_returned=5 elapsed=50.610143ms elapsed_secs=0.050610143
2025-08-17T09:05:59.562340Z DEBUG sqlx::query: summary="SELECT module_name, display_name FROM ‚Ä¶" db.statement="\n\nSELECT\n  module_name,\n  display_name\nFROM\n  available_module\nORDER BY\n  display_name\n" rows_affected=7 rows_returned=7 elapsed=102.545037ms elapsed_secs=0.102545037
2025-08-17T09:05:59.618018Z DEBUG sqlx::query: summary="SELECT t.tenant_id, t.enterprise_id, t.company_id, ‚Ä¶" db.statement="\n\nSELECT\n  t.tenant_id,\n  t.enterprise_id,\n  t.company_id,\n  t.name,\n  t.slug,\n  t.shard_id,\n  m.module_name as \"module_name?\"\nFROM\n  tenant t\n  LEFT JOIN tenant_module m ON m.tenant_id = t.tenant_id\nORDER BY\n  t.name\n" rows_affected=3 rows_returned=3 elapsed=158.896971ms elapsed_secs=0.158896971
2025-08-17T09:05:59.722724Z DEBUG sqlx::query: summary="SELECT t.tenant_id, t.enterprise_id, t.company_id, ‚Ä¶" db.statement="\n\nSELECT\n  t.tenant_id,\n  t.enterprise_id,\n  t.company_id,\n  t.name,\n  t.slug,\n  t.shard_id,\n  m.module_name as \"module_name?\"\nFROM\n  tenant t\n  LEFT JOIN tenant_module m ON m.tenant_id = t.tenant_id\nORDER BY\n  t.name\n" rows_affected=3 rows_returned=3 elapsed=47.561057ms elapsed_secs=0.047561057
2025-08-17T09:05:59.748551Z DEBUG sqlx::query: summary="SELECT module_name, display_name FROM ‚Ä¶" db.statement="\n\nSELECT\n  module_name,\n  display_name\nFROM\n  available_module\nORDER BY\n  display_name\n" rows_affected=7 rows_returned=7 elapsed=95.104898ms elapsed_secs=0.095104898
2025-08-17T09:06:00.780859Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:06:00.887762Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=49.639028ms elapsed_secs=0.049639028
2025-08-17T09:06:00.890391Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:06:00.994339Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=50.194329ms elapsed_secs=0.050194329
2025-08-17T09:06:18.245719Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=daily&month=8&day=17
2025-08-17T09:06:18.356278Z DEBUG sqlx::query: summary="SELECT EXTRACT(DAY FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    DAY\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\n  AND EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) = $3\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=5 rows_returned=5 elapsed=53.192164ms elapsed_secs=0.053192164
2025-08-17T09:06:19.329775Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:06:19.426201Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=47.867068ms elapsed_secs=0.047867068
2025-08-17T09:06:20.279364Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=yearly
2025-08-17T09:06:20.376716Z DEBUG sqlx::query: summary="SELECT EXTRACT(YEAR FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=1 rows_returned=1 elapsed=47.983199ms elapsed_secs=0.047983199
2025-08-17T09:06:20.954693Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:06:21.059313Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=46.343638ms elapsed_secs=0.046343638
2025-08-17T09:06:21.653436Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=daily&month=8&day=17
2025-08-17T09:06:21.758793Z DEBUG sqlx::query: summary="SELECT EXTRACT(DAY FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    DAY\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\n  AND EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) = $3\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=5 rows_returned=5 elapsed=51.786917ms elapsed_secs=0.051786917
2025-08-17T09:06:22.447785Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:06:22.558798Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=52.048857ms elapsed_secs=0.052048857
2025-08-17T09:06:23.082722Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=yearly
2025-08-17T09:06:23.198059Z DEBUG sqlx::query: summary="SELECT EXTRACT(YEAR FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=1 rows_returned=1 elapsed=50.466491ms elapsed_secs=0.050466491
2025-08-17T09:06:23.805512Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:06:23.907417Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=47.217265ms elapsed_secs=0.047217265
2025-08-17T09:06:24.380013Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=daily&month=8&day=17
2025-08-17T09:06:24.477270Z DEBUG sqlx::query: summary="SELECT EXTRACT(DAY FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    DAY\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\n  AND EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) = $3\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=5 rows_returned=5 elapsed=47.386297ms elapsed_secs=0.047386297
2025-08-17T09:09:34.705620Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:09:34.813363Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=50.914001ms elapsed_secs=0.050914001
2025-08-17T09:09:38.509220Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=daily&month=8&day=17
2025-08-17T09:09:38.614710Z DEBUG sqlx::query: summary="SELECT EXTRACT(DAY FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    DAY\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\n  AND EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) = $3\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=5 rows_returned=5 elapsed=50.505847ms elapsed_secs=0.050505847
2025-08-17T09:09:40.341598Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:09:40.447430Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=50.370192ms elapsed_secs=0.050370192
2025-08-17T09:09:42.393129Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=yearly
2025-08-17T09:09:42.495750Z DEBUG sqlx::query: summary="SELECT EXTRACT(YEAR FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=1 rows_returned=1 elapsed=49.641575ms elapsed_secs=0.049641575
2025-08-17T09:09:43.403217Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:09:43.514292Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=52.472277ms elapsed_secs=0.052472277
2025-08-17T09:09:47.960121Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T09:09:47.963717Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T09:09:48.535024Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:09:48.613602Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T09:09:48.636509Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=46.981449ms elapsed_secs=0.046981449
2025-08-17T09:09:48.646798Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:09:48.719344Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=49.534587ms elapsed_secs=0.049534587
2025-08-17T09:09:48.768468Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=58.026649ms elapsed_secs=0.058026649
2025-08-17T09:09:48.925577Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=146.898282ms elapsed_secs=0.146898282
2025-08-17T09:09:48.930646Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T09:09:49.040315Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=52.249069ms elapsed_secs=0.052249069
2025-08-17T09:09:49.145722Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=47.528321ms elapsed_secs=0.047528321
2025-08-17T09:10:42.352670Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T09:10:42.355180Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T09:10:42.803449Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:10:42.855026Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T09:10:42.924413Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=49.141412ms elapsed_secs=0.049141412
2025-08-17T09:10:42.927205Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:10:42.988376Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=54.78532ms elapsed_secs=0.05478532
2025-08-17T09:10:43.041774Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=53.350825ms elapsed_secs=0.053350825
2025-08-17T09:10:43.104968Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=54.548372ms elapsed_secs=0.054548372
2025-08-17T09:10:43.109656Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T09:10:43.215663Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=49.92447ms elapsed_secs=0.04992447
2025-08-17T09:10:43.310865Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=46.428995ms elapsed_secs=0.046428995
2025-08-17T09:10:46.739872Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=daily&month=8&day=17
2025-08-17T09:10:46.840104Z DEBUG sqlx::query: summary="SELECT EXTRACT(DAY FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    DAY\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\n  AND EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) = $3\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=5 rows_returned=5 elapsed=48.729499ms elapsed_secs=0.048729499
2025-08-17T09:10:48.678254Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=yearly
2025-08-17T09:10:48.820927Z DEBUG sqlx::query: summary="SELECT EXTRACT(YEAR FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=1 rows_returned=1 elapsed=91.191037ms elapsed_secs=0.091191037
2025-08-17T09:10:54.308994Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=daily&month=8&day=17
2025-08-17T09:10:54.410927Z DEBUG sqlx::query: summary="SELECT EXTRACT(DAY FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    DAY\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\n  AND EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) = $3\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=5 rows_returned=5 elapsed=49.603658ms elapsed_secs=0.049603658
2025-08-17T09:10:56.300505Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:10:56.407943Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=50.242208ms elapsed_secs=0.050242208
2025-08-17T09:11:03.391843Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /roles
2025-08-17T09:11:03.488030Z DEBUG sqlx::query: summary="SELECT id, tenant_id, name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  name,\n  module\nFROM\n  roles\nWHERE\n  tenant_id = $1\nORDER BY\n  name\n" rows_affected=12 rows_returned=12 elapsed=48.350657ms elapsed_secs=0.048350657
2025-08-17T09:11:03.492100Z DEBUG sqlx::query: summary="SELECT module_name AS key, ‚Ä¶" db.statement="\n\nSELECT\n  module_name AS key,\n  display_name AS label\nFROM\n  available_module\nORDER BY\n  display_name\n" rows_affected=7 rows_returned=7 elapsed=51.392934ms elapsed_secs=0.051392934
2025-08-17T09:11:03.494705Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /roles
2025-08-17T09:11:03.496417Z DEBUG sqlx::query: summary="SELECT id, resource, action, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  resource,\n  action,\n  label\nFROM\n  permissions\nORDER BY\n  resource,\n  action\n" rows_affected=13 rows_returned=13 elapsed=54.515823ms elapsed_secs=0.054515823
2025-08-17T09:11:03.612342Z DEBUG sqlx::query: summary="SELECT module_name AS key, ‚Ä¶" db.statement="\n\nSELECT\n  module_name AS key,\n  display_name AS label\nFROM\n  available_module\nORDER BY\n  display_name\n" rows_affected=7 rows_returned=7 elapsed=53.975842ms elapsed_secs=0.053975842
2025-08-17T09:11:03.613879Z DEBUG sqlx::query: summary="SELECT id, resource, action, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  resource,\n  action,\n  label\nFROM\n  permissions\nORDER BY\n  resource,\n  action\n" rows_affected=13 rows_returned=13 elapsed=52.709317ms elapsed_secs=0.052709317
2025-08-17T09:11:03.653628Z DEBUG sqlx::query: summary="SELECT id, tenant_id, name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  name,\n  module\nFROM\n  roles\nWHERE\n  tenant_id = $1\nORDER BY\n  name\n" rows_affected=12 rows_returned=12 elapsed=103.579225ms elapsed_secs=0.103579225
2025-08-17T09:11:05.543135Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:11:05.640143Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=46.985452ms elapsed_secs=0.046985452
2025-08-17T09:11:05.642185Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:11:05.743485Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=48.373556ms elapsed_secs=0.048373556
2025-08-17T09:11:09.343294Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /roles
2025-08-17T09:11:09.439258Z DEBUG sqlx::query: summary="SELECT module_name AS key, ‚Ä¶" db.statement="\n\nSELECT\n  module_name AS key,\n  display_name AS label\nFROM\n  available_module\nORDER BY\n  display_name\n" rows_affected=7 rows_returned=7 elapsed=48.455456ms elapsed_secs=0.048455456
2025-08-17T09:11:09.443427Z DEBUG sqlx::query: summary="SELECT id, tenant_id, name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  name,\n  module\nFROM\n  roles\nWHERE\n  tenant_id = $1\nORDER BY\n  name\n" rows_affected=12 rows_returned=12 elapsed=49.640723ms elapsed_secs=0.049640723
2025-08-17T09:11:09.445625Z DEBUG sqlx::query: summary="SELECT id, resource, action, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  resource,\n  action,\n  label\nFROM\n  permissions\nORDER BY\n  resource,\n  action\n" rows_affected=13 rows_returned=13 elapsed=49.144597ms elapsed_secs=0.049144597
2025-08-17T09:11:09.446691Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /roles
2025-08-17T09:11:09.551155Z DEBUG sqlx::query: summary="SELECT id, tenant_id, name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  name,\n  module\nFROM\n  roles\nWHERE\n  tenant_id = $1\nORDER BY\n  name\n" rows_affected=12 rows_returned=12 elapsed=51.723312ms elapsed_secs=0.051723312
2025-08-17T09:11:09.604752Z DEBUG sqlx::query: summary="SELECT id, resource, action, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  resource,\n  action,\n  label\nFROM\n  permissions\nORDER BY\n  resource,\n  action\n" rows_affected=13 rows_returned=13 elapsed=108.848317ms elapsed_secs=0.108848317
2025-08-17T09:11:09.604864Z DEBUG sqlx::query: summary="SELECT module_name AS key, ‚Ä¶" db.statement="\n\nSELECT\n  module_name AS key,\n  display_name AS label\nFROM\n  available_module\nORDER BY\n  display_name\n" rows_affected=7 rows_returned=7 elapsed=115.448511ms elapsed_secs=0.115448511
2025-08-17T09:11:10.185541Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:11:10.291806Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=50.227917ms elapsed_secs=0.050227917
2025-08-17T09:11:10.293833Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:11:10.394871Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=49.419871ms elapsed_secs=0.049419871
2025-08-17T09:11:13.632487Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=daily&month=8&day=17
2025-08-17T09:11:13.743631Z DEBUG sqlx::query: summary="SELECT EXTRACT(DAY FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    DAY\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\n  AND EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) = $3\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=5 rows_returned=5 elapsed=53.909213ms elapsed_secs=0.053909213
2025-08-17T09:11:15.243439Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:11:15.343661Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=47.955868ms elapsed_secs=0.047955868
2025-08-17T09:11:16.031838Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=yearly
2025-08-17T09:11:16.139122Z DEBUG sqlx::query: summary="SELECT EXTRACT(YEAR FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=1 rows_returned=1 elapsed=48.288605ms elapsed_secs=0.048288605
2025-08-17T09:11:17.585207Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:11:17.681755Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=47.923169ms elapsed_secs=0.047923169
2025-08-17T09:11:41.120485Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=daily&month=8&day=17
2025-08-17T09:11:41.240674Z DEBUG sqlx::query: summary="SELECT EXTRACT(DAY FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    DAY\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\n  AND EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) = $3\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=5 rows_returned=5 elapsed=55.129058ms elapsed_secs=0.055129058
2025-08-17T09:11:43.702951Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:11:43.828216Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=62.00324ms elapsed_secs=0.06200324
2025-08-17T09:11:46.159084Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=yearly
2025-08-17T09:11:46.265744Z DEBUG sqlx::query: summary="SELECT EXTRACT(YEAR FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=1 rows_returned=1 elapsed=51.143441ms elapsed_secs=0.051143441
2025-08-17T09:11:46.856901Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=daily&month=8&day=17
2025-08-17T09:11:47.009195Z DEBUG sqlx::query: summary="SELECT EXTRACT(DAY FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    DAY\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\n  AND EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) = $3\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=5 rows_returned=5 elapsed=99.307378ms elapsed_secs=0.099307378
2025-08-17T09:12:01.031409Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T09:12:01.130881Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=50.42877ms elapsed_secs=0.05042877
2025-08-17T09:12:01.136035Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T09:12:01.319447Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=128.768846ms elapsed_secs=0.128768846
2025-08-17T09:12:09.845976Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /02088c0d-6941-4a7d-8da8-4213f5c0f5d2
2025-08-17T09:12:09.846327Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T09:12:09.948952Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=50.13445ms elapsed_secs=0.05013445
2025-08-17T09:12:09.955266Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T09:12:10.049328Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=150.349426ms elapsed_secs=0.150349426
2025-08-17T09:12:10.187404Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=159.073899ms elapsed_secs=0.159073899
2025-08-17T09:12:10.251086Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=2 rows_returned=2 elapsed=145.912419ms elapsed_secs=0.145912419
2025-08-17T09:12:10.254941Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /02088c0d-6941-4a7d-8da8-4213f5c0f5d2
2025-08-17T09:12:10.398247Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=93.325533ms elapsed_secs=0.093325533
2025-08-17T09:12:10.607876Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=2 rows_returned=2 elapsed=127.091454ms elapsed_secs=0.127091454
2025-08-17T09:12:12.201741Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T09:12:12.304744Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=50.160158ms elapsed_secs=0.050160158
2025-08-17T09:12:12.306904Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T09:12:12.499536Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=128.527507ms elapsed_secs=0.128527507
2025-08-17T09:12:16.684649Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /1c91cf36-9488-4fb0-9af6-43ec17364c22
2025-08-17T09:12:16.684675Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T09:12:16.788420Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=50.384891ms elapsed_secs=0.050384891
2025-08-17T09:12:16.791073Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T09:12:16.871501Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=131.182571ms elapsed_secs=0.131182571
2025-08-17T09:12:16.894783Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=47.233285ms elapsed_secs=0.047233285
2025-08-17T09:12:16.975514Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=1 rows_returned=1 elapsed=48.566914ms elapsed_secs=0.048566914
2025-08-17T09:12:16.977884Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /1c91cf36-9488-4fb0-9af6-43ec17364c22
2025-08-17T09:12:17.082201Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=50.225562ms elapsed_secs=0.050225562
2025-08-17T09:12:17.274955Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=1 rows_returned=1 elapsed=132.6452ms elapsed_secs=0.1326452
2025-08-17T09:12:20.424517Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:12:20.528436Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=50.636112ms elapsed_secs=0.050636112
2025-08-17T09:12:20.531460Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:12:20.630368Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=47.681299ms elapsed_secs=0.047681299
2025-08-17T09:12:22.556308Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=daily&month=8&day=17
2025-08-17T09:12:22.663057Z DEBUG sqlx::query: summary="SELECT EXTRACT(DAY FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    DAY\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\n  AND EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) = $3\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=5 rows_returned=5 elapsed=53.591477ms elapsed_secs=0.053591477
2025-08-17T09:12:26.002430Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T09:12:26.105008Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=46.952455ms elapsed_secs=0.046952455
2025-08-17T09:12:26.110833Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T09:12:26.225000Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=52.484382ms elapsed_secs=0.052484382
2025-08-17T09:12:32.619725Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T09:12:32.619725Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /e48e0f6a-7636-47a7-b036-4c7fa41fa443
2025-08-17T09:12:32.807588Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=129.73085ms elapsed_secs=0.12973085
2025-08-17T09:12:32.827507Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=150.687339ms elapsed_secs=0.150687339
2025-08-17T09:12:32.829588Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T09:12:32.924457Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=2 rows_returned=2 elapsed=46.732163ms elapsed_secs=0.046732163
2025-08-17T09:12:32.929161Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=50.816737ms elapsed_secs=0.050816737
2025-08-17T09:12:32.931679Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /e48e0f6a-7636-47a7-b036-4c7fa41fa443
2025-08-17T09:12:33.081900Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=94.94747ms elapsed_secs=0.09494747
2025-08-17T09:12:33.278019Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=2 rows_returned=2 elapsed=137.143881ms elapsed_secs=0.137143881
2025-08-17T09:13:03.553394Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /e48e0f6a-7636-47a7-b036-4c7fa41fa443/update
2025-08-17T09:13:03.799090Z DEBUG sqlx::query: summary="UPDATE loan_contract SET contact_id ‚Ä¶" db.statement="\n\nUPDATE\n  loan_contract\nSET\n  contact_id = $1,\n  name = $2,\n  principal = $3,\n  interest_rate = $4,\n  term_months = $5,\n  date_start = $6,\n  date_end = $7,\n  collateral_description = $8,\n  collateral_value = $9,\n  updated_at = NOW()\nWHERE\n  id = $10\n  AND tenant_id = $11\nRETURNING\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\n" rows_affected=0 rows_returned=1 elapsed=121.205052ms elapsed_secs=0.121205052
2025-08-17T09:13:03.907225Z DEBUG sqlx::query: summary="DELETE FROM loan_transaction WHERE ‚Ä¶" db.statement="\n\nDELETE FROM\n  loan_transaction\nWHERE\n  contract_id = $1\n  AND tenant_id = $2\n" rows_affected=2 rows_returned=0 elapsed=106.180246ms elapsed_secs=0.106180246
2025-08-17T09:13:04.011050Z DEBUG sqlx::query: summary="INSERT INTO loan_transaction ( ‚Ä¶" db.statement="\n\nINSERT INTO\n  loan_transaction (\n    contract_id,\n    tenant_id,\n    contact_id,\n    transaction_type,\n    amount,\n    \"date\",\n    note\n  )\nVALUES\n  ($1, $2, $3, $4, $5, $6, $7)\n" rows_affected=1 rows_returned=0 elapsed=99.879754ms elapsed_secs=0.099879754
2025-08-17T09:13:04.067197Z DEBUG sqlx::query: summary="INSERT INTO loan_transaction ( ‚Ä¶" db.statement="\n\nINSERT INTO\n  loan_transaction (\n    contract_id,\n    tenant_id,\n    contact_id,\n    transaction_type,\n    amount,\n    \"date\",\n    note\n  )\nVALUES\n  ($1, $2, $3, $4, $5, $6, $7)\n" rows_affected=1 rows_returned=0 elapsed=51.242049ms elapsed_secs=0.051242049
2025-08-17T09:13:04.120338Z DEBUG sqlx::query: summary="INSERT INTO loan_transaction ( ‚Ä¶" db.statement="\n\nINSERT INTO\n  loan_transaction (\n    contract_id,\n    tenant_id,\n    contact_id,\n    transaction_type,\n    amount,\n    \"date\",\n    note\n  )\nVALUES\n  ($1, $2, $3, $4, $5, $6, $7)\n" rows_affected=1 rows_returned=0 elapsed=50.454778ms elapsed_secs=0.050454778
2025-08-17T09:13:04.174729Z DEBUG sqlx::query: summary="COMMIT" db.statement="" rows_affected=0 rows_returned=0 elapsed=50.99478ms elapsed_secs=0.05099478
2025-08-17T09:13:04.183903Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /e48e0f6a-7636-47a7-b036-4c7fa41fa443
2025-08-17T09:13:04.291242Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=51.414656ms elapsed_secs=0.051414656
2025-08-17T09:13:04.424212Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=3 rows_returned=3 elapsed=52.473077ms elapsed_secs=0.052473077
2025-08-17T09:13:06.213317Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:13:06.317232Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=48.673075ms elapsed_secs=0.048673075
2025-08-17T09:13:06.320149Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:13:06.421913Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=49.797166ms elapsed_secs=0.049797166
2025-08-17T09:13:08.600581Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=daily&month=8&day=17
2025-08-17T09:13:08.706835Z DEBUG sqlx::query: summary="SELECT EXTRACT(DAY FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    DAY\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\n  AND EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) = $3\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=5 rows_returned=5 elapsed=50.51836ms elapsed_secs=0.05051836
2025-08-17T09:14:56.931809Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:14:57.041418Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=53.678866ms elapsed_secs=0.053678866
2025-08-17T09:14:59.551270Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=yearly
2025-08-17T09:14:59.659746Z DEBUG sqlx::query: summary="SELECT EXTRACT(YEAR FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=1 rows_returned=1 elapsed=53.488032ms elapsed_secs=0.053488032
2025-08-17T09:15:00.643719Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:15:00.742045Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=47.784223ms elapsed_secs=0.047784223
2025-08-17T09:16:15.242252Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=daily&month=8&day=17
2025-08-17T09:16:15.361517Z DEBUG sqlx::query: summary="SELECT EXTRACT(DAY FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    DAY\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\n  AND EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) = $3\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=5 rows_returned=5 elapsed=52.997033ms elapsed_secs=0.052997033
2025-08-17T09:16:19.696779Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:16:19.794371Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=46.149417ms elapsed_secs=0.046149417
2025-08-17T09:19:59.214922Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=daily&month=8&day=17
2025-08-17T09:19:59.325293Z DEBUG sqlx::query: summary="SELECT EXTRACT(DAY FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    DAY\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\n  AND EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) = $3\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=5 rows_returned=5 elapsed=52.964604ms elapsed_secs=0.052964604
2025-08-17T09:19:59.378336Z DEBUG rustls::common_state: Sending warning alert CloseNotify    
2025-08-17T09:20:00.521363Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:20:00.634007Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=59.042812ms elapsed_secs=0.059042812
2025-08-17T09:21:27.272241Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=yearly
2025-08-17T09:21:27.377727Z DEBUG sqlx::query: summary="SELECT EXTRACT(YEAR FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=1 rows_returned=1 elapsed=50.276106ms elapsed_secs=0.050276106
2025-08-17T09:21:29.042834Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:21:29.146750Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=46.668709ms elapsed_secs=0.046668709
2025-08-17T09:21:31.165620Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=daily&month=8&day=17
2025-08-17T09:21:31.281398Z DEBUG sqlx::query: summary="SELECT EXTRACT(DAY FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    DAY\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\n  AND EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) = $3\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=5 rows_returned=5 elapsed=51.990669ms elapsed_secs=0.051990669
2025-08-17T09:21:31.328944Z DEBUG rustls::common_state: Sending warning alert CloseNotify    
2025-08-17T09:21:46.198754Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:21:46.294267Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=46.650823ms elapsed_secs=0.046650823
2025-08-17T09:21:47.009664Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=yearly
2025-08-17T09:21:47.121726Z DEBUG sqlx::query: summary="SELECT EXTRACT(YEAR FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=1 rows_returned=1 elapsed=59.20756ms elapsed_secs=0.05920756
2025-08-17T09:21:48.209979Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:21:48.316949Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=51.483408ms elapsed_secs=0.051483408
2025-08-17T09:21:48.778993Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=daily&month=8&day=17
2025-08-17T09:21:48.883909Z DEBUG sqlx::query: summary="SELECT EXTRACT(DAY FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    DAY\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\n  AND EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) = $3\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=5 rows_returned=5 elapsed=50.157955ms elapsed_secs=0.050157955
2025-08-17T09:23:16.473234Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:23:16.571817Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=48.348258ms elapsed_secs=0.048348258
2025-08-17T09:24:50.067620Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T09:24:50.068620Z ERROR axum::core::auth: ‚ùå Middleware decode JWT l·ªói: Error(ExpiredSignature)
2025-08-17T09:24:50.070103Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T09:24:50.070419Z ERROR axum::core::auth: ‚ùå Middleware decode JWT l·ªói: Error(ExpiredSignature)
2025-08-17T09:32:17.661028Z DEBUG rustls::common_state: Sending warning alert CloseNotify    
2025-08-17T09:32:17.710593Z DEBUG rustls::common_state: Sending warning alert CloseNotify    
2025-08-17T09:32:17.761278Z DEBUG rustls::common_state: Sending warning alert CloseNotify    
2025-08-17T09:32:17.811324Z DEBUG rustls::common_state: Sending warning alert CloseNotify    
2025-08-17T09:41:20.727511Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T09:41:20.728141Z ERROR axum::core::auth: ‚ùå Middleware decode JWT l·ªói: Error(ExpiredSignature)
2025-08-17T09:41:20.730582Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T09:41:20.731016Z ERROR axum::core::auth: ‚ùå Middleware decode JWT l·ªói: Error(ExpiredSignature)
2025-08-17T09:41:37.724224Z DEBUG rustls::client::hs: No cached session for DnsName("ap-southeast-1.e4c6174f-6538-4e47-93bf-0a2503819047.aws.yugabyte.cloud")    
2025-08-17T09:41:37.726847Z DEBUG rustls::client::hs: Not resuming any session    
2025-08-17T09:41:37.842771Z DEBUG rustls::client::hs: Using ciphersuite TLS13_AES_256_GCM_SHA384    
2025-08-17T09:41:37.843181Z DEBUG rustls::client::tls13: Not resuming    
2025-08-17T09:41:37.845108Z DEBUG rustls::client::tls13: TLS1.3 encrypted extensions: []    
2025-08-17T09:41:37.845318Z DEBUG rustls::client::hs: ALPN protocol is None    
2025-08-17T09:41:37.845470Z DEBUG rustls::client::tls13: Got CertificateRequest CertificateRequestPayloadTLS13 { context: , extensions: [SignatureAlgorithms([ECDSA_NISTP256_SHA256, ECDSA_NISTP384_SHA384, ECDSA_NISTP521_SHA512, ED25519, ED448, Unknown(2057), Unknown(2058), Unknown(2059), RSA_PSS_SHA256, RSA_PSS_SHA384, RSA_PSS_SHA512, RSA_PKCS1_SHA256, RSA_PKCS1_SHA384, RSA_PKCS1_SHA512, Unknown(771), Unknown(769)]), AuthorityNames([DistinguishedName(305b31153013060355040a130c597567616279746520496e633142304006035504030c392a2e65346336313734662d363533382d346534372d393362662d3061323530333831393034372e6177732e79756761627974652e636c6f7564), DistinguishedName(30818b310b3009060355040613025553310b3009060355040813024341311230100603550407130953756e6e7976616c6531153013060355040a130c597567616279746520496e6331173015060355040b130e597567616279746520436c6f7564312b302906035504031322597567616279746520436c6f7564205375626f7264696e6174652043412070726f64), DistinguishedName(308184310b3009060355040613025553310b3009060355040813024341311230100603550407130953756e6e7976616c6531153013060355040a130c597567616279746520496e6331173015060355040b130e597567616279746520436c6f7564312430220603550403131b597567616279746520436c6f756420526f6f742043412070726f64)])] }    
2025-08-17T09:41:37.846130Z DEBUG rustls::client::common: Client auth requested but no cert/sigscheme available    
2025-08-17T09:41:38.161320Z DEBUG sqlx::query: summary="SELECT tenant_id, shard_id FROM ‚Ä¶" db.statement="\n\nSELECT\n  tenant_id,\n  shard_id\nFROM\n  tenant\nWHERE\n  slug = $1\n" rows_affected=0 rows_returned=1 elapsed=163.516022ms elapsed_secs=0.163516022
2025-08-17T09:41:38.393846Z DEBUG rustls::client::hs: No cached session for DnsName("ap-southeast-1.e4c6174f-6538-4e47-93bf-0a2503819047.aws.yugabyte.cloud")    
2025-08-17T09:41:38.395213Z DEBUG rustls::client::hs: Not resuming any session    
2025-08-17T09:41:38.494752Z DEBUG rustls::client::hs: Using ciphersuite TLS13_AES_256_GCM_SHA384    
2025-08-17T09:41:38.495026Z DEBUG rustls::client::tls13: Not resuming    
2025-08-17T09:41:38.495805Z DEBUG rustls::client::tls13: TLS1.3 encrypted extensions: []    
2025-08-17T09:41:38.496218Z DEBUG rustls::client::hs: ALPN protocol is None    
2025-08-17T09:41:38.496657Z DEBUG rustls::client::tls13: Got CertificateRequest CertificateRequestPayloadTLS13 { context: , extensions: [SignatureAlgorithms([ECDSA_NISTP256_SHA256, ECDSA_NISTP384_SHA384, ECDSA_NISTP521_SHA512, ED25519, ED448, Unknown(2057), Unknown(2058), Unknown(2059), RSA_PSS_SHA256, RSA_PSS_SHA384, RSA_PSS_SHA512, RSA_PKCS1_SHA256, RSA_PKCS1_SHA384, RSA_PKCS1_SHA512, Unknown(771), Unknown(769)]), AuthorityNames([DistinguishedName(305b31153013060355040a130c597567616279746520496e633142304006035504030c392a2e65346336313734662d363533382d346534372d393362662d3061323530333831393034372e6177732e79756761627974652e636c6f7564), DistinguishedName(30818b310b3009060355040613025553310b3009060355040813024341311230100603550407130953756e6e7976616c6531153013060355040a130c597567616279746520496e6331173015060355040b130e597567616279746520436c6f7564312b302906035504031322597567616279746520436c6f7564205375626f7264696e6174652043412070726f64), DistinguishedName(308184310b3009060355040613025553310b3009060355040813024341311230100603550407130953756e6e7976616c6531153013060355040a130c597567616279746520496e6331173015060355040b130e597567616279746520436c6f7564312430220603550403131b597567616279746520436c6f756420526f6f742043412070726f64)])] }    
2025-08-17T09:41:38.496840Z DEBUG rustls::client::common: Client auth requested but no cert/sigscheme available    
2025-08-17T09:41:38.783178Z DEBUG sqlx::query: summary="SELECT tenant_id, user_id, email, ‚Ä¶" db.statement="\n\nSELECT\n  tenant_id,\n  user_id,\n  email,\n  name,\n  password_hash\nFROM\n  users\nWHERE\n  email = $1\n  AND tenant_id = $2\n" rows_affected=0 rows_returned=1 elapsed=151.05613ms elapsed_secs=0.15105613
2025-08-17T09:41:39.679317Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T09:41:39.710296Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T09:41:39.898812Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=137.159066ms elapsed_secs=0.137159066
2025-08-17T09:41:39.929134Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=176.027578ms elapsed_secs=0.176027578
2025-08-17T09:41:39.935425Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T09:41:40.010094Z DEBUG rustls::client::hs: No cached session for DnsName("ap-southeast-1.e4c6174f-6538-4e47-93bf-0a2503819047.aws.yugabyte.cloud")    
2025-08-17T09:41:40.011348Z DEBUG rustls::client::hs: Not resuming any session    
2025-08-17T09:41:40.049576Z DEBUG rustls::client::hs: No cached session for DnsName("ap-southeast-1.e4c6174f-6538-4e47-93bf-0a2503819047.aws.yugabyte.cloud")    
2025-08-17T09:41:40.050017Z DEBUG rustls::client::hs: Not resuming any session    
2025-08-17T09:41:40.110609Z DEBUG rustls::client::hs: Using ciphersuite TLS13_AES_256_GCM_SHA384    
2025-08-17T09:41:40.111838Z DEBUG rustls::client::tls13: Not resuming    
2025-08-17T09:41:40.112288Z DEBUG rustls::client::tls13: TLS1.3 encrypted extensions: []    
2025-08-17T09:41:40.112319Z DEBUG rustls::client::hs: ALPN protocol is None    
2025-08-17T09:41:40.112578Z DEBUG rustls::client::tls13: Got CertificateRequest CertificateRequestPayloadTLS13 { context: , extensions: [SignatureAlgorithms([ECDSA_NISTP256_SHA256, ECDSA_NISTP384_SHA384, ECDSA_NISTP521_SHA512, ED25519, ED448, Unknown(2057), Unknown(2058), Unknown(2059), RSA_PSS_SHA256, RSA_PSS_SHA384, RSA_PSS_SHA512, RSA_PKCS1_SHA256, RSA_PKCS1_SHA384, RSA_PKCS1_SHA512, Unknown(771), Unknown(769)]), AuthorityNames([DistinguishedName(305b31153013060355040a130c597567616279746520496e633142304006035504030c392a2e65346336313734662d363533382d346534372d393362662d3061323530333831393034372e6177732e79756761627974652e636c6f7564), DistinguishedName(30818b310b3009060355040613025553310b3009060355040813024341311230100603550407130953756e6e7976616c6531153013060355040a130c597567616279746520496e6331173015060355040b130e597567616279746520436c6f7564312b302906035504031322597567616279746520436c6f7564205375626f7264696e6174652043412070726f64), DistinguishedName(308184310b3009060355040613025553310b3009060355040813024341311230100603550407130953756e6e7976616c6531153013060355040a130c597567616279746520496e6331173015060355040b130e597567616279746520436c6f7564312430220603550403131b597567616279746520436c6f756420526f6f742043412070726f64)])] }    
2025-08-17T09:41:40.112890Z DEBUG rustls::client::common: Client auth requested but no cert/sigscheme available    
2025-08-17T09:41:40.150089Z DEBUG rustls::client::hs: Using ciphersuite TLS13_AES_256_GCM_SHA384    
2025-08-17T09:41:40.151227Z DEBUG rustls::client::tls13: Not resuming    
2025-08-17T09:41:40.152976Z DEBUG rustls::client::tls13: TLS1.3 encrypted extensions: []    
2025-08-17T09:41:40.153249Z DEBUG rustls::client::hs: ALPN protocol is None    
2025-08-17T09:41:40.153338Z DEBUG rustls::client::tls13: Got CertificateRequest CertificateRequestPayloadTLS13 { context: , extensions: [SignatureAlgorithms([ECDSA_NISTP256_SHA256, ECDSA_NISTP384_SHA384, ECDSA_NISTP521_SHA512, ED25519, ED448, Unknown(2057), Unknown(2058), Unknown(2059), RSA_PSS_SHA256, RSA_PSS_SHA384, RSA_PSS_SHA512, RSA_PKCS1_SHA256, RSA_PKCS1_SHA384, RSA_PKCS1_SHA512, Unknown(771), Unknown(769)]), AuthorityNames([DistinguishedName(305b31153013060355040a130c597567616279746520496e633142304006035504030c392a2e65346336313734662d363533382d346534372d393362662d3061323530333831393034372e6177732e79756761627974652e636c6f7564), DistinguishedName(30818b310b3009060355040613025553310b3009060355040813024341311230100603550407130953756e6e7976616c6531153013060355040a130c597567616279746520496e6331173015060355040b130e597567616279746520436c6f7564312b302906035504031322597567616279746520436c6f7564205375626f7264696e6174652043412070726f64), DistinguishedName(308184310b3009060355040613025553310b3009060355040813024341311230100603550407130953756e6e7976616c6531153013060355040a130c597567616279746520496e6331173015060355040b130e597567616279746520436c6f7564312430220603550403131b597567616279746520436c6f756420526f6f742043412070726f64)])] }    
2025-08-17T09:41:40.153427Z DEBUG rustls::client::common: Client auth requested but no cert/sigscheme available    
2025-08-17T09:41:40.394821Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=153.779048ms elapsed_secs=0.153779048
2025-08-17T09:41:40.410834Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T09:41:40.498443Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=204.423866ms elapsed_secs=0.204423866
2025-08-17T09:41:40.516112Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=49.978156ms elapsed_secs=0.049978156
2025-08-17T09:41:40.710666Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=138.858127ms elapsed_secs=0.138858127
2025-08-17T09:41:43.833703Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T09:41:44.050039Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=163.823069ms elapsed_secs=0.163823069
2025-08-17T09:41:44.063330Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T09:41:44.249057Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=127.738247ms elapsed_secs=0.127738247
2025-08-17T09:41:44.527834Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T09:41:44.744928Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=156.708636ms elapsed_secs=0.156708636
2025-08-17T09:41:44.757585Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T09:41:44.868217Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=53.936799ms elapsed_secs=0.053936799
2025-08-17T09:42:28.178768Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T09:42:28.276285Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=47.145545ms elapsed_secs=0.047145545
2025-08-17T09:42:28.278608Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T09:42:28.384541Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=53.284203ms elapsed_secs=0.053284203
2025-08-17T09:42:30.741805Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T09:42:30.851944Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=52.376001ms elapsed_secs=0.052376001
2025-08-17T09:42:30.858212Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T09:42:30.976042Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=54.277531ms elapsed_secs=0.054277531
2025-08-17T09:42:31.492787Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T09:42:31.591984Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=46.585818ms elapsed_secs=0.046585818
2025-08-17T09:42:31.600323Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T09:42:31.703784Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=49.00114ms elapsed_secs=0.04900114
2025-08-17T09:43:05.220677Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T09:43:05.223566Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T09:43:21.918412Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T09:43:21.920271Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T09:43:22.263235Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T09:43:22.377241Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=57.007949ms elapsed_secs=0.057007949
2025-08-17T09:43:22.495730Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=57.850959ms elapsed_secs=0.057850959
2025-08-17T09:43:22.498246Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T09:43:22.588015Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:43:22.673855Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=128.110005ms elapsed_secs=0.128110005
2025-08-17T09:43:22.790497Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=151.622265ms elapsed_secs=0.151622265
2025-08-17T09:43:22.792698Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:43:22.889152Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=160.5724ms elapsed_secs=0.1605724
2025-08-17T09:43:23.016081Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=166.162587ms elapsed_secs=0.166162587
2025-08-17T09:43:27.208355Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:43:27.265401Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T09:43:27.404594Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=146.086678ms elapsed_secs=0.146086678
2025-08-17T09:43:27.410933Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:43:27.473361Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=141.263459ms elapsed_secs=0.141263459
2025-08-17T09:43:27.580808Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=52.954396ms elapsed_secs=0.052954396
2025-08-17T09:43:27.586414Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T09:43:27.615544Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=150.584879ms elapsed_secs=0.150584879
2025-08-17T09:43:27.683963Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=47.761409ms elapsed_secs=0.047761409
2025-08-17T09:43:27.882207Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=142.429593ms elapsed_secs=0.142429593
2025-08-17T09:43:30.798516Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T09:43:30.800937Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T09:43:31.257491Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:43:31.307750Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T09:43:31.373500Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=57.39498ms elapsed_secs=0.05739498
2025-08-17T09:43:31.376503Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:43:31.416216Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=51.931115ms elapsed_secs=0.051931115
2025-08-17T09:43:31.476879Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=47.689171ms elapsed_secs=0.047689171
2025-08-17T09:43:31.548460Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=78.45218ms elapsed_secs=0.07845218
2025-08-17T09:43:31.586374Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T09:43:31.785716Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=143.085912ms elapsed_secs=0.143085912
2025-08-17T09:43:31.880775Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=47.33411ms elapsed_secs=0.04733411
2025-08-17T09:44:27.671011Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:44:27.777023Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=47.653735ms elapsed_secs=0.047653735
2025-08-17T09:44:27.780739Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:44:27.881364Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=49.252964ms elapsed_secs=0.049252964
2025-08-17T09:44:29.894252Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T09:44:29.896328Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T09:44:30.393012Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:44:30.443822Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T09:44:30.506612Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=53.916725ms elapsed_secs=0.053916725
2025-08-17T09:44:30.509214Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:44:30.555577Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=50.853125ms elapsed_secs=0.050853125
2025-08-17T09:44:30.616158Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=51.987064ms elapsed_secs=0.051987064
2025-08-17T09:44:30.670586Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=59.179962ms elapsed_secs=0.059179962
2025-08-17T09:44:30.679767Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T09:44:30.794990Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=55.572884ms elapsed_secs=0.055572884
2025-08-17T09:44:30.896160Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=49.087572ms elapsed_secs=0.049087572
2025-08-17T09:45:09.889685Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T09:45:09.892268Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T09:45:10.351809Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:45:10.409473Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T09:45:10.453134Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=49.879141ms elapsed_secs=0.049879141
2025-08-17T09:45:10.469993Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:45:10.525439Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=53.238359ms elapsed_secs=0.053238359
2025-08-17T09:45:10.632999Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=65.968567ms elapsed_secs=0.065968567
2025-08-17T09:45:10.659345Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=48.84782ms elapsed_secs=0.04884782
2025-08-17T09:45:10.664101Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T09:45:10.777892Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=50.640781ms elapsed_secs=0.050640781
2025-08-17T09:45:10.881616Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=49.371227ms elapsed_secs=0.049371227
2025-08-17T09:45:41.350786Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T09:45:41.353655Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T09:45:41.761538Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T09:45:41.801808Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T09:45:41.888095Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=61.616752ms elapsed_secs=0.061616752
2025-08-17T09:45:41.914167Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T09:45:41.931072Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=49.859355ms elapsed_secs=0.049859355
2025-08-17T09:45:42.029179Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=48.51911ms elapsed_secs=0.04851911
2025-08-17T09:45:42.034334Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T09:45:42.121632Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=154.108496ms elapsed_secs=0.154108496
2025-08-17T09:45:42.152512Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=55.486491ms elapsed_secs=0.055486491
2025-08-17T09:45:42.256130Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=50.289075ms elapsed_secs=0.050289075
2025-08-17T09:49:15.101215Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T09:49:15.111682Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T09:49:15.205866Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=50.230088ms elapsed_secs=0.050230088
2025-08-17T09:49:15.216484Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=52.693973ms elapsed_secs=0.052693973
2025-08-17T09:49:15.218897Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T09:49:15.320638Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=48.830889ms elapsed_secs=0.048830889
2025-08-17T09:49:15.323170Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=52.278068ms elapsed_secs=0.052278068
2025-08-17T09:49:15.325585Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T09:49:15.431126Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=53.434595ms elapsed_secs=0.053434595
2025-08-17T09:49:15.525154Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=46.296666ms elapsed_secs=0.046296666
2025-08-17T09:49:18.400945Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /1c91cf36-9488-4fb0-9af6-43ec17364c22
2025-08-17T09:49:18.401050Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T09:49:18.547012Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=96.00387ms elapsed_secs=0.09600387
2025-08-17T09:49:18.597965Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=137.938083ms elapsed_secs=0.137938083
2025-08-17T09:49:18.606532Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T09:49:18.701077Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=46.526318ms elapsed_secs=0.046526318
2025-08-17T09:49:18.756737Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=1 rows_returned=1 elapsed=133.758398ms elapsed_secs=0.133758398
2025-08-17T09:49:18.760946Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /1c91cf36-9488-4fb0-9af6-43ec17364c22
2025-08-17T09:49:18.892132Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=52.367296ms elapsed_secs=0.052367296
2025-08-17T09:49:19.092811Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=1 rows_returned=1 elapsed=138.403208ms elapsed_secs=0.138403208
2025-08-17T09:49:20.577987Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T09:49:20.677672Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=48.633936ms elapsed_secs=0.048633936
2025-08-17T09:49:20.682962Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T09:49:20.791652Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=49.890752ms elapsed_secs=0.049890752
2025-08-17T09:49:21.234676Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T09:49:21.242774Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /2db4cabd-565f-4b7c-a5f6-8140665c1330
2025-08-17T09:49:21.410932Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=107.531839ms elapsed_secs=0.107531839
2025-08-17T09:49:21.416232Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=124.120296ms elapsed_secs=0.124120296
2025-08-17T09:49:21.425863Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T09:49:21.529831Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=50.013764ms elapsed_secs=0.050013764
2025-08-17T09:49:21.589765Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=1 rows_returned=1 elapsed=127.97075ms elapsed_secs=0.12797075
2025-08-17T09:49:21.594337Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /2db4cabd-565f-4b7c-a5f6-8140665c1330
2025-08-17T09:49:21.714536Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=53.426738ms elapsed_secs=0.053426738
2025-08-17T09:49:21.907794Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=1 rows_returned=1 elapsed=131.540348ms elapsed_secs=0.131540348
2025-08-17T09:49:23.192890Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T09:49:23.298769Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=49.785893ms elapsed_secs=0.049785893
2025-08-17T09:49:23.302185Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T09:49:23.398259Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=46.425156ms elapsed_secs=0.046425156
2025-08-17T09:49:24.039847Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T09:49:24.044285Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /f5370ad9-ceac-46e2-9ec5-2b2d99d22ef0
2025-08-17T09:49:24.144739Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=48.700421ms elapsed_secs=0.048700421
2025-08-17T09:49:24.149417Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=52.458635ms elapsed_secs=0.052458635
2025-08-17T09:49:24.156337Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T09:49:24.248955Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=1 rows_returned=1 elapsed=49.206917ms elapsed_secs=0.049206917
2025-08-17T09:49:24.254319Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /f5370ad9-ceac-46e2-9ec5-2b2d99d22ef0
2025-08-17T09:49:24.263152Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=46.494438ms elapsed_secs=0.046494438
2025-08-17T09:49:24.354197Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=47.721779ms elapsed_secs=0.047721779
2025-08-17T09:49:24.480401Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=1 rows_returned=1 elapsed=53.734897ms elapsed_secs=0.053734897
2025-08-17T09:49:26.199029Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T09:49:26.299844Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=49.05417ms elapsed_secs=0.04905417
2025-08-17T09:49:26.304702Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T09:49:26.406137Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=46.800052ms elapsed_secs=0.046800052
2025-08-17T09:49:27.017784Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T09:49:27.020753Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /1e1f4286-5474-4043-8e7d-a8721da008fa
2025-08-17T09:49:27.127610Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=54.270936ms elapsed_secs=0.054270936
2025-08-17T09:49:27.133851Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=56.359799ms elapsed_secs=0.056359799
2025-08-17T09:49:27.135598Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T09:49:27.252697Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=49.028198ms elapsed_secs=0.049028198
2025-08-17T09:49:27.262322Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=2 rows_returned=2 elapsed=53.978703ms elapsed_secs=0.053978703
2025-08-17T09:49:27.265372Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /1e1f4286-5474-4043-8e7d-a8721da008fa
2025-08-17T09:49:27.376561Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=53.146102ms elapsed_secs=0.053146102
2025-08-17T09:49:27.481422Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=2 rows_returned=2 elapsed=49.182836ms elapsed_secs=0.049182836
2025-08-17T09:49:30.075280Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T09:49:30.174772Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=47.847078ms elapsed_secs=0.047847078
2025-08-17T09:49:30.177236Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T09:49:30.278445Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=49.326918ms elapsed_secs=0.049326918
2025-08-17T09:49:30.789258Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T09:49:30.790595Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /2db4cabd-565f-4b7c-a5f6-8140665c1330
2025-08-17T09:49:30.894382Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=48.935215ms elapsed_secs=0.048935215
2025-08-17T09:49:30.925308Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=54.341398ms elapsed_secs=0.054341398
2025-08-17T09:49:30.928189Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T09:49:31.024609Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=1 rows_returned=1 elapsed=47.651894ms elapsed_secs=0.047651894
2025-08-17T09:49:31.027564Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /2db4cabd-565f-4b7c-a5f6-8140665c1330
2025-08-17T09:49:31.031710Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=48.229826ms elapsed_secs=0.048229826
2025-08-17T09:49:31.133625Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=51.922118ms elapsed_secs=0.051922118
2025-08-17T09:49:31.250554Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=1 rows_returned=1 elapsed=53.94253ms elapsed_secs=0.05394253
2025-08-17T09:49:32.403293Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T09:49:32.499898Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=46.138085ms elapsed_secs=0.046138085
2025-08-17T09:49:32.506999Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T09:49:32.607792Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=49.026048ms elapsed_secs=0.049026048
2025-08-17T09:49:33.276912Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T09:49:33.278707Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /2db4cabd-565f-4b7c-a5f6-8140665c1330
2025-08-17T09:49:33.375990Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=47.954827ms elapsed_secs=0.047954827
2025-08-17T09:49:33.379622Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T09:49:33.395657Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=54.288217ms elapsed_secs=0.054288217
2025-08-17T09:49:33.474802Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=46.131787ms elapsed_secs=0.046131787
2025-08-17T09:49:33.507487Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=1 rows_returned=1 elapsed=52.118504ms elapsed_secs=0.052118504
2025-08-17T09:49:33.513970Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /2db4cabd-565f-4b7c-a5f6-8140665c1330
2025-08-17T09:49:33.614893Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=48.84032ms elapsed_secs=0.04884032
2025-08-17T09:49:33.739114Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=1 rows_returned=1 elapsed=57.999474ms elapsed_secs=0.057999474
2025-08-17T09:49:34.961092Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T09:49:35.061222Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=47.336565ms elapsed_secs=0.047336565
2025-08-17T09:49:35.067164Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T09:49:35.188721Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=49.869086ms elapsed_secs=0.049869086
2025-08-17T09:49:35.969158Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T09:49:35.972627Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /f5370ad9-ceac-46e2-9ec5-2b2d99d22ef0
2025-08-17T09:49:36.071909Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=49.096363ms elapsed_secs=0.049096363
2025-08-17T09:49:36.075487Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T09:49:36.084123Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=55.196414ms elapsed_secs=0.055196414
2025-08-17T09:49:36.174870Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=50.168029ms elapsed_secs=0.050168029
2025-08-17T09:49:36.192728Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=1 rows_returned=1 elapsed=49.1938ms elapsed_secs=0.0491938
2025-08-17T09:49:36.195392Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /f5370ad9-ceac-46e2-9ec5-2b2d99d22ef0
2025-08-17T09:49:36.297513Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=50.270887ms elapsed_secs=0.050270887
2025-08-17T09:49:36.413725Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=1 rows_returned=1 elapsed=53.822852ms elapsed_secs=0.053822852
2025-08-17T09:49:39.682672Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:49:39.778465Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=46.49611ms elapsed_secs=0.04649611
2025-08-17T09:49:39.781432Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:49:39.911006Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=69.919869ms elapsed_secs=0.069919869
2025-08-17T09:49:47.062092Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T09:49:47.063829Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T09:49:47.555673Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:49:47.617281Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T09:49:47.672139Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=58.92718ms elapsed_secs=0.05892718
2025-08-17T09:49:47.676327Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:49:47.738068Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=54.773564ms elapsed_secs=0.054773564
2025-08-17T09:49:47.785359Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=53.236945ms elapsed_secs=0.053236945
2025-08-17T09:49:47.838783Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=51.470859ms elapsed_secs=0.051470859
2025-08-17T09:49:47.847873Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T09:49:47.960339Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=60.470528ms elapsed_secs=0.060470528
2025-08-17T09:49:48.075438Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=61.449909ms elapsed_secs=0.061449909
2025-08-17T09:52:06.262416Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T09:52:06.264343Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T09:52:06.785029Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:52:06.853451Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T09:52:06.886260Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=50.472394ms elapsed_secs=0.050472394
2025-08-17T09:52:06.889394Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:52:06.964284Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=57.71126ms elapsed_secs=0.05771126
2025-08-17T09:52:07.000574Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=51.026825ms elapsed_secs=0.051026825
2025-08-17T09:52:07.080332Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=55.317562ms elapsed_secs=0.055317562
2025-08-17T09:52:07.089906Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T09:52:07.197583Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=46.9266ms elapsed_secs=0.0469266
2025-08-17T09:52:07.298090Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=48.764205ms elapsed_secs=0.048764205
2025-08-17T09:52:13.634062Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T09:52:13.636302Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T09:52:22.002741Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:52:22.072111Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T09:52:22.106598Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=49.01388ms elapsed_secs=0.04901388
2025-08-17T09:52:22.108745Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:52:22.186825Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=55.100435ms elapsed_secs=0.055100435
2025-08-17T09:52:22.205719Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=47.166409ms elapsed_secs=0.047166409
2025-08-17T09:52:22.303981Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=52.822362ms elapsed_secs=0.052822362
2025-08-17T09:52:22.315091Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T09:52:22.417120Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=49.169741ms elapsed_secs=0.049169741
2025-08-17T09:52:22.527399Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=56.825458ms elapsed_secs=0.056825458
2025-08-17T09:55:10.706429Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T09:55:10.708641Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T09:55:12.762414Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:55:12.833505Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T09:55:12.858643Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=47.247595ms elapsed_secs=0.047247595
2025-08-17T09:55:12.874224Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:55:12.940872Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=52.718451ms elapsed_secs=0.052718451
2025-08-17T09:55:12.977242Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=49.342402ms elapsed_secs=0.049342402
2025-08-17T09:55:13.067374Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=61.372209ms elapsed_secs=0.061372209
2025-08-17T09:55:13.073952Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T09:55:13.173812Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=48.008265ms elapsed_secs=0.048008265
2025-08-17T09:55:13.276877Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=48.140702ms elapsed_secs=0.048140702
2025-08-17T09:56:22.327208Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T09:56:22.330033Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T09:56:24.725384Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:56:24.787242Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T09:56:24.834337Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=51.332946ms elapsed_secs=0.051332946
2025-08-17T09:56:24.837170Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:56:24.898364Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=54.827983ms elapsed_secs=0.054827983
2025-08-17T09:56:24.933676Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=47.52163ms elapsed_secs=0.04752163
2025-08-17T09:56:25.000530Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=50.755256ms elapsed_secs=0.050755256
2025-08-17T09:56:25.029652Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T09:56:25.138815Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=51.724202ms elapsed_secs=0.051724202
2025-08-17T09:56:25.244747Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=52.852953ms elapsed_secs=0.052852953
2025-08-17T09:56:29.644447Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:56:29.700235Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T09:56:29.750351Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=46.986648ms elapsed_secs=0.046986648
2025-08-17T09:56:29.754613Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:56:29.805063Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=50.371368ms elapsed_secs=0.050371368
2025-08-17T09:56:29.885110Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=58.276779ms elapsed_secs=0.058276779
2025-08-17T09:56:29.924201Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=58.477242ms elapsed_secs=0.058477242
2025-08-17T09:56:29.936693Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T09:56:30.035583Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=46.540278ms elapsed_secs=0.046540278
2025-08-17T09:56:30.134081Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=49.529309ms elapsed_secs=0.049529309
2025-08-17T09:56:37.850658Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T09:56:37.852933Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T09:58:06.836194Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T09:58:06.839115Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T09:58:10.553419Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:58:10.626893Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T09:58:10.654450Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=49.809314ms elapsed_secs=0.049809314
2025-08-17T09:58:10.657701Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T09:58:10.739296Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=54.213261ms elapsed_secs=0.054213261
2025-08-17T09:58:10.756108Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=49.51974ms elapsed_secs=0.04951974
2025-08-17T09:58:10.848060Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=54.329049ms elapsed_secs=0.054329049
2025-08-17T09:58:10.855385Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T09:58:10.967083Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=51.251209ms elapsed_secs=0.051251209
2025-08-17T09:58:11.074062Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=53.17552ms elapsed_secs=0.05317552
2025-08-17T09:58:17.515003Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T09:58:17.516997Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T09:58:43.412668Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T09:58:43.415453Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T09:58:43.810182Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T09:58:43.831907Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T09:58:43.918757Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=55.459937ms elapsed_secs=0.055459937
2025-08-17T09:58:43.936928Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T09:58:43.942575Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=55.430964ms elapsed_secs=0.055430964
2025-08-17T09:58:44.036425Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=49.017063ms elapsed_secs=0.049017063
2025-08-17T09:58:44.059254Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=53.547637ms elapsed_secs=0.053547637
2025-08-17T09:58:44.063611Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T09:58:44.160701Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=46.201999ms elapsed_secs=0.046201999
2025-08-17T09:58:44.262215Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=48.193563ms elapsed_secs=0.048193563
2025-08-17T09:58:51.027269Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T09:58:51.132252Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=51.531317ms elapsed_secs=0.051531317
2025-08-17T09:58:51.135199Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T09:58:51.246778Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=52.898064ms elapsed_secs=0.052898064
2025-08-17T10:04:38.093906Z DEBUG sqlx::query: summary="SELECT tenant_id, shard_id FROM ‚Ä¶" db.statement="\n\nSELECT\n  tenant_id,\n  shard_id\nFROM\n  tenant\nWHERE\n  slug = $1\n" rows_affected=0 rows_returned=1 elapsed=110.472008ms elapsed_secs=0.110472008
2025-08-17T10:04:38.266575Z DEBUG sqlx::query: summary="SELECT tenant_id, user_id, email, ‚Ä¶" db.statement="\n\nSELECT\n  tenant_id,\n  user_id,\n  email,\n  name,\n  password_hash\nFROM\n  users\nWHERE\n  email = $1\n  AND tenant_id = $2\n" rows_affected=0 rows_returned=1 elapsed=114.412978ms elapsed_secs=0.114412978
2025-08-17T10:04:40.927464Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T10:04:41.028408Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=49.244931ms elapsed_secs=0.049244931
2025-08-17T10:04:41.031013Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T10:04:41.143543Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=53.715418ms elapsed_secs=0.053715418
2025-08-17T10:04:43.852289Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T10:04:43.951811Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=46.641006ms elapsed_secs=0.046641006
2025-08-17T10:04:43.954565Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T10:04:44.057228Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=48.566138ms elapsed_secs=0.048566138
2025-08-17T10:04:45.177222Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list?is_company=true&limit=200
2025-08-17T10:04:45.283845Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=0 rows_returned=0 elapsed=50.737687ms elapsed_secs=0.050737687
2025-08-17T10:04:45.286013Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list?is_company=true&limit=200
2025-08-17T10:04:45.404184Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=0 rows_returned=0 elapsed=60.562381ms elapsed_secs=0.060562381
2025-08-17T10:04:47.293175Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T10:04:47.388529Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=46.439692ms elapsed_secs=0.046439692
2025-08-17T10:04:47.392706Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T10:04:47.497979Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=48.736419ms elapsed_secs=0.048736419
2025-08-17T10:04:48.285872Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list?is_company=true&limit=200
2025-08-17T10:04:48.290272Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /95ebfccb-9971-4841-90e3-a61173f2cb7d
2025-08-17T10:04:48.391226Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=0 rows_returned=0 elapsed=48.642743ms elapsed_secs=0.048642743
2025-08-17T10:04:48.393814Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list?is_company=true&limit=200
2025-08-17T10:04:48.466359Z DEBUG sqlx::query: summary="SELECT id, is_company, parent_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  is_company,\n  parent_id,\n  name,\n  display_name,\n  email,\n  phone,\n  mobile,\n  website,\n  street,\n  street2,\n  city,\n  state,\n  zip,\n  country_code,\n  notes,\n  NULLIF(tags_cached, '') AS \"tags_cached?: String\",\n  created_at,\n  updated_at\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=113.30985ms elapsed_secs=0.11330985
2025-08-17T10:04:48.469496Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /95ebfccb-9971-4841-90e3-a61173f2cb7d
2025-08-17T10:04:48.496032Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=0 rows_returned=0 elapsed=47.144216ms elapsed_secs=0.047144216
2025-08-17T10:04:48.624508Z DEBUG sqlx::query: summary="SELECT id, is_company, parent_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  is_company,\n  parent_id,\n  name,\n  display_name,\n  email,\n  phone,\n  mobile,\n  website,\n  street,\n  street2,\n  city,\n  state,\n  zip,\n  country_code,\n  notes,\n  NULLIF(tags_cached, '') AS \"tags_cached?: String\",\n  created_at,\n  updated_at\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=103.88625ms elapsed_secs=0.10388625
2025-08-17T10:04:51.723210Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /95ebfccb-9971-4841-90e3-a61173f2cb7d
2025-08-17T10:04:51.725009Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list?is_company=true&limit=200
2025-08-17T10:04:51.735558Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T10:04:51.841094Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=46.466555ms elapsed_secs=0.046466555
2025-08-17T10:04:51.866098Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=0 rows_returned=0 elapsed=73.026339ms elapsed_secs=0.073026339
2025-08-17T10:04:51.868614Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list?is_company=true&limit=200
2025-08-17T10:04:51.880817Z DEBUG sqlx::query: summary="SELECT id, is_company, parent_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  is_company,\n  parent_id,\n  name,\n  display_name,\n  email,\n  phone,\n  mobile,\n  website,\n  street,\n  street2,\n  city,\n  state,\n  zip,\n  country_code,\n  notes,\n  NULLIF(tags_cached, '') AS \"tags_cached?: String\",\n  created_at,\n  updated_at\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=102.946896ms elapsed_secs=0.102946896
2025-08-17T10:04:51.883266Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /95ebfccb-9971-4841-90e3-a61173f2cb7d
2025-08-17T10:04:51.938951Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=48.228695ms elapsed_secs=0.048228695
2025-08-17T10:04:51.943731Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T10:04:52.051711Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=47.985499ms elapsed_secs=0.047985499
2025-08-17T10:04:52.070558Z DEBUG rustls::client::hs: No cached session for DnsName("ap-southeast-1.e4c6174f-6538-4e47-93bf-0a2503819047.aws.yugabyte.cloud")    
2025-08-17T10:04:52.073865Z DEBUG rustls::client::hs: No cached session for DnsName("ap-southeast-1.e4c6174f-6538-4e47-93bf-0a2503819047.aws.yugabyte.cloud")    
2025-08-17T10:04:52.074015Z DEBUG rustls::client::hs: Not resuming any session    
2025-08-17T10:04:52.079999Z DEBUG rustls::client::hs: Not resuming any session    
2025-08-17T10:04:52.158192Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=52.634642ms elapsed_secs=0.052634642
2025-08-17T10:04:52.183065Z DEBUG rustls::client::hs: Using ciphersuite TLS13_AES_256_GCM_SHA384    
2025-08-17T10:04:52.184130Z DEBUG rustls::client::tls13: Not resuming    
2025-08-17T10:04:52.184380Z DEBUG rustls::client::tls13: TLS1.3 encrypted extensions: []    
2025-08-17T10:04:52.184447Z DEBUG rustls::client::hs: ALPN protocol is None    
2025-08-17T10:04:52.186255Z DEBUG rustls::client::tls13: Got CertificateRequest CertificateRequestPayloadTLS13 { context: , extensions: [SignatureAlgorithms([ECDSA_NISTP256_SHA256, ECDSA_NISTP384_SHA384, ECDSA_NISTP521_SHA512, ED25519, ED448, Unknown(2057), Unknown(2058), Unknown(2059), RSA_PSS_SHA256, RSA_PSS_SHA384, RSA_PSS_SHA512, RSA_PKCS1_SHA256, RSA_PKCS1_SHA384, RSA_PKCS1_SHA512, Unknown(771), Unknown(769)]), AuthorityNames([DistinguishedName(305b31153013060355040a130c597567616279746520496e633142304006035504030c392a2e65346336313734662d363533382d346534372d393362662d3061323530333831393034372e6177732e79756761627974652e636c6f7564), DistinguishedName(30818b310b3009060355040613025553310b3009060355040813024341311230100603550407130953756e6e7976616c6531153013060355040a130c597567616279746520496e6331173015060355040b130e597567616279746520436c6f7564312b302906035504031322597567616279746520436c6f7564205375626f7264696e6174652043412070726f64), DistinguishedName(308184310b3009060355040613025553310b3009060355040813024341311230100603550407130953756e6e7976616c6531153013060355040a130c597567616279746520496e6331173015060355040b130e597567616279746520436c6f7564312430220603550403131b597567616279746520436c6f756420526f6f742043412070726f64)])] }    
2025-08-17T10:04:52.186337Z DEBUG rustls::client::common: Client auth requested but no cert/sigscheme available    
2025-08-17T10:04:52.191241Z DEBUG rustls::client::hs: Using ciphersuite TLS13_AES_256_GCM_SHA384    
2025-08-17T10:04:52.192167Z DEBUG rustls::client::tls13: Not resuming    
2025-08-17T10:04:52.193778Z DEBUG rustls::client::tls13: TLS1.3 encrypted extensions: []    
2025-08-17T10:04:52.194352Z DEBUG rustls::client::hs: ALPN protocol is None    
2025-08-17T10:04:52.197825Z DEBUG rustls::client::tls13: Got CertificateRequest CertificateRequestPayloadTLS13 { context: , extensions: [SignatureAlgorithms([ECDSA_NISTP256_SHA256, ECDSA_NISTP384_SHA384, ECDSA_NISTP521_SHA512, ED25519, ED448, Unknown(2057), Unknown(2058), Unknown(2059), RSA_PSS_SHA256, RSA_PSS_SHA384, RSA_PSS_SHA512, RSA_PKCS1_SHA256, RSA_PKCS1_SHA384, RSA_PKCS1_SHA512, Unknown(771), Unknown(769)]), AuthorityNames([DistinguishedName(305b31153013060355040a130c597567616279746520496e633142304006035504030c392a2e65346336313734662d363533382d346534372d393362662d3061323530333831393034372e6177732e79756761627974652e636c6f7564), DistinguishedName(30818b310b3009060355040613025553310b3009060355040813024341311230100603550407130953756e6e7976616c6531153013060355040a130c597567616279746520496e6331173015060355040b130e597567616279746520436c6f7564312b302906035504031322597567616279746520436c6f7564205375626f7264696e6174652043412070726f64), DistinguishedName(308184310b3009060355040613025553310b3009060355040813024341311230100603550407130953756e6e7976616c6531153013060355040a130c597567616279746520496e6331173015060355040b130e597567616279746520436c6f7564312430220603550403131b597567616279746520436c6f756420526f6f742043412070726f64)])] }    
2025-08-17T10:04:52.199270Z DEBUG rustls::client::common: Client auth requested but no cert/sigscheme available    
2025-08-17T10:04:52.539604Z DEBUG sqlx::query: summary="SELECT id, is_company, parent_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  is_company,\n  parent_id,\n  name,\n  display_name,\n  email,\n  phone,\n  mobile,\n  website,\n  street,\n  street2,\n  city,\n  state,\n  zip,\n  country_code,\n  notes,\n  NULLIF(tags_cached, '') AS \"tags_cached?: String\",\n  created_at,\n  updated_at\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=185.751126ms elapsed_secs=0.185751126
2025-08-17T10:04:52.554735Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=0 rows_returned=0 elapsed=210.955466ms elapsed_secs=0.210955466
2025-08-17T10:04:54.080098Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T10:04:54.183674Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=51.03488ms elapsed_secs=0.05103488
2025-08-17T10:04:54.186735Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T10:04:54.290120Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=49.046111ms elapsed_secs=0.049046111
2025-08-17T10:04:55.381076Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list?is_company=true&limit=200
2025-08-17T10:04:55.484261Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=0 rows_returned=0 elapsed=45.693958ms elapsed_secs=0.045693958
2025-08-17T10:04:55.487562Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list?is_company=true&limit=200
2025-08-17T10:04:55.603412Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=0 rows_returned=0 elapsed=53.81317ms elapsed_secs=0.05381317
2025-08-17T10:04:56.274507Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T10:04:56.482270Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=145.860136ms elapsed_secs=0.145860136
2025-08-17T10:04:56.485266Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T10:04:56.588031Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=49.300546ms elapsed_secs=0.049300546
2025-08-17T10:04:57.188379Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list?is_company=true&limit=200
2025-08-17T10:04:57.189100Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /95ebfccb-9971-4841-90e3-a61173f2cb7d
2025-08-17T10:04:57.288893Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=0 rows_returned=0 elapsed=47.809065ms elapsed_secs=0.047809065
2025-08-17T10:04:57.297589Z DEBUG sqlx::query: summary="SELECT id, is_company, parent_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  is_company,\n  parent_id,\n  name,\n  display_name,\n  email,\n  phone,\n  mobile,\n  website,\n  street,\n  street2,\n  city,\n  state,\n  zip,\n  country_code,\n  notes,\n  NULLIF(tags_cached, '') AS \"tags_cached?: String\",\n  created_at,\n  updated_at\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=52.417878ms elapsed_secs=0.052417878
2025-08-17T10:04:57.307108Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list?is_company=true&limit=200
2025-08-17T10:04:57.310494Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /95ebfccb-9971-4841-90e3-a61173f2cb7d
2025-08-17T10:04:57.402879Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=0 rows_returned=0 elapsed=45.717572ms elapsed_secs=0.045717572
2025-08-17T10:04:57.430118Z DEBUG sqlx::query: summary="SELECT id, is_company, parent_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  is_company,\n  parent_id,\n  name,\n  display_name,\n  email,\n  phone,\n  mobile,\n  website,\n  street,\n  street2,\n  city,\n  state,\n  zip,\n  country_code,\n  notes,\n  NULLIF(tags_cached, '') AS \"tags_cached?: String\",\n  created_at,\n  updated_at\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=56.829026ms elapsed_secs=0.056829026
2025-08-17T10:04:58.738352Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T10:04:58.932789Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=136.252468ms elapsed_secs=0.136252468
2025-08-17T10:04:58.940256Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T10:04:59.135094Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=134.508929ms elapsed_secs=0.134508929
2025-08-17T10:04:59.731303Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /1c91cf36-9488-4fb0-9af6-43ec17364c22
2025-08-17T10:04:59.731395Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T10:04:59.841357Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=50.094517ms elapsed_secs=0.050094517
2025-08-17T10:04:59.852529Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T10:04:59.893938Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=99.405681ms elapsed_secs=0.099405681
2025-08-17T10:04:59.951322Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=46.051199ms elapsed_secs=0.046051199
2025-08-17T10:05:00.007112Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=1 rows_returned=1 elapsed=53.195044ms elapsed_secs=0.053195044
2025-08-17T10:05:00.010391Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /1c91cf36-9488-4fb0-9af6-43ec17364c22
2025-08-17T10:05:00.171175Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=105.459515ms elapsed_secs=0.105459515
2025-08-17T10:05:00.599626Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=1 rows_returned=1 elapsed=365.139149ms elapsed_secs=0.365139149
2025-08-17T10:09:13.809106Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /1c91cf36-9488-4fb0-9af6-43ec17364c22
2025-08-17T10:09:13.813704Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T10:09:13.816692Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T10:09:13.912779Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=52.024304ms elapsed_secs=0.052024304
2025-08-17T10:09:13.927237Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=60.660482ms elapsed_secs=0.060660482
2025-08-17T10:09:13.932100Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=59.644669ms elapsed_secs=0.059644669
2025-08-17T10:09:13.954006Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T10:09:14.041623Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=1 rows_returned=1 elapsed=56.475369ms elapsed_secs=0.056475369
2025-08-17T10:09:14.047761Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /1c91cf36-9488-4fb0-9af6-43ec17364c22
2025-08-17T10:09:14.071926Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=53.265552ms elapsed_secs=0.053265552
2025-08-17T10:09:14.121127Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=132.315145ms elapsed_secs=0.132315145
2025-08-17T10:09:14.126444Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T10:09:14.160607Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=51.154172ms elapsed_secs=0.051154172
2025-08-17T10:09:14.232468Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=51.059926ms elapsed_secs=0.051059926
2025-08-17T10:09:14.259252Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=1 rows_returned=1 elapsed=46.737802ms elapsed_secs=0.046737802
2025-08-17T10:09:14.366175Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=69.681589ms elapsed_secs=0.069681589
2025-08-17T10:10:08.696870Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T10:10:08.699119Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T10:10:09.130794Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /1c91cf36-9488-4fb0-9af6-43ec17364c22
2025-08-17T10:10:09.130720Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T10:10:09.138389Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T10:10:09.237121Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=51.393015ms elapsed_secs=0.051393015
2025-08-17T10:10:09.241226Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T10:10:09.246144Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=52.481963ms elapsed_secs=0.052481963
2025-08-17T10:10:09.280140Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=97.253454ms elapsed_secs=0.097253454
2025-08-17T10:10:09.341927Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=49.323933ms elapsed_secs=0.049323933
2025-08-17T10:10:09.346412Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T10:10:09.351525Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=52.026691ms elapsed_secs=0.052026691
2025-08-17T10:10:09.405488Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=1 rows_returned=1 elapsed=57.771938ms elapsed_secs=0.057771938
2025-08-17T10:10:09.410506Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /1c91cf36-9488-4fb0-9af6-43ec17364c22
2025-08-17T10:10:09.513620Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=48.612726ms elapsed_secs=0.048612726
2025-08-17T10:10:09.537886Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=138.677701ms elapsed_secs=0.138677701
2025-08-17T10:10:09.628658Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=1 rows_returned=1 elapsed=50.659686ms elapsed_secs=0.050659686
2025-08-17T10:10:09.633189Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=45.128395ms elapsed_secs=0.045128395
2025-08-17T10:10:12.129973Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T10:10:12.235083Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=50.445286ms elapsed_secs=0.050445286
2025-08-17T10:10:12.237547Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T10:10:12.366043Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=66.745646ms elapsed_secs=0.066745646
2025-08-17T10:10:55.040751Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T10:10:55.148417Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=49.099426ms elapsed_secs=0.049099426
2025-08-17T10:10:55.153723Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T10:10:55.256898Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=49.517229ms elapsed_secs=0.049517229
2025-08-17T10:10:55.781369Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T10:10:55.881482Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=48.135944ms elapsed_secs=0.048135944
2025-08-17T10:10:55.887801Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T10:10:55.988647Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=48.828759ms elapsed_secs=0.048828759
2025-08-17T10:10:57.309008Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T10:10:57.427928Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=62.225656ms elapsed_secs=0.062225656
2025-08-17T10:10:57.432203Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T10:10:57.563176Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=61.379039ms elapsed_secs=0.061379039
2025-08-17T10:11:28.605616Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T10:11:28.707263Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=48.21895ms elapsed_secs=0.04821895
2025-08-17T10:11:28.709870Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T10:11:28.920368Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=154.757677ms elapsed_secs=0.154757677
2025-08-17T10:12:06.655223Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T10:12:06.750775Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=46.828724ms elapsed_secs=0.046828724
2025-08-17T10:12:06.753162Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T10:12:06.797903Z DEBUG rustls::common_state: Sending warning alert CloseNotify    
2025-08-17T10:12:06.949370Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=143.625575ms elapsed_secs=0.143625575
2025-08-17T10:12:17.669352Z DEBUG rustls::common_state: Sending warning alert CloseNotify    
2025-08-17T10:12:17.724870Z DEBUG rustls::common_state: Sending warning alert CloseNotify    
2025-08-17T10:12:17.774999Z DEBUG rustls::common_state: Sending warning alert CloseNotify    
2025-08-17T10:12:33.852897Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=daily&month=8&day=17
2025-08-17T10:12:34.008605Z DEBUG sqlx::query: summary="SELECT EXTRACT(DAY FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    DAY\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\n  AND EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) = $3\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=5 rows_returned=5 elapsed=99.268307ms elapsed_secs=0.099268307
2025-08-17T10:12:36.266717Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=yearly
2025-08-17T10:12:36.416466Z DEBUG sqlx::query: summary="SELECT EXTRACT(YEAR FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=1 rows_returned=1 elapsed=98.732227ms elapsed_secs=0.098732227
2025-08-17T10:12:37.569899Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T10:12:37.683273Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=51.008822ms elapsed_secs=0.051008822
2025-08-17T10:12:38.298355Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=daily&month=8&day=17
2025-08-17T10:12:38.454473Z DEBUG sqlx::query: summary="SELECT EXTRACT(DAY FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    DAY\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\n  AND EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) = $3\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=5 rows_returned=5 elapsed=101.332282ms elapsed_secs=0.101332282
2025-08-17T10:12:43.490236Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T10:12:43.595793Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=50.417129ms elapsed_secs=0.050417129
2025-08-17T10:12:49.760056Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=daily&month=8&day=17
2025-08-17T10:12:49.864987Z DEBUG sqlx::query: summary="SELECT EXTRACT(DAY FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    DAY\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\n  AND EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) = $3\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=5 rows_returned=5 elapsed=49.960436ms elapsed_secs=0.049960436
2025-08-17T10:12:51.483723Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T10:12:51.588585Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=51.039273ms elapsed_secs=0.051039273
2025-08-17T10:12:53.037762Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=yearly
2025-08-17T10:12:53.144107Z DEBUG sqlx::query: summary="SELECT EXTRACT(YEAR FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=1 rows_returned=1 elapsed=51.038166ms elapsed_secs=0.051038166
2025-08-17T10:12:54.041177Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T10:12:54.150894Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=52.655119ms elapsed_secs=0.052655119
2025-08-17T10:12:55.023696Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=daily&month=8&day=17
2025-08-17T10:12:55.160668Z DEBUG sqlx::query: summary="SELECT EXTRACT(DAY FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    DAY\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\n  AND EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) = $3\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=5 rows_returned=5 elapsed=52.49331ms elapsed_secs=0.05249331
2025-08-17T10:13:01.759831Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T10:13:01.868883Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=49.769294ms elapsed_secs=0.049769294
2025-08-17T10:13:03.592916Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=yearly
2025-08-17T10:13:03.699368Z DEBUG sqlx::query: summary="SELECT EXTRACT(YEAR FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=1 rows_returned=1 elapsed=51.217664ms elapsed_secs=0.051217664
2025-08-17T10:13:05.762167Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=daily&month=8&day=17
2025-08-17T10:13:05.870331Z DEBUG sqlx::query: summary="SELECT EXTRACT(DAY FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    DAY\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\n  AND EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) = $3\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=5 rows_returned=5 elapsed=51.951406ms elapsed_secs=0.051951406
2025-08-17T10:13:25.090894Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /roles
2025-08-17T10:13:25.259054Z DEBUG sqlx::query: summary="SELECT id, resource, action, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  resource,\n  action,\n  label\nFROM\n  permissions\nORDER BY\n  resource,\n  action\n" rows_affected=13 rows_returned=13 elapsed=116.349027ms elapsed_secs=0.116349027
2025-08-17T10:13:25.286846Z DEBUG sqlx::query: summary="SELECT module_name AS key, ‚Ä¶" db.statement="\n\nSELECT\n  module_name AS key,\n  display_name AS label\nFROM\n  available_module\nORDER BY\n  display_name\n" rows_affected=7 rows_returned=7 elapsed=133.800118ms elapsed_secs=0.133800118
2025-08-17T10:13:25.339098Z DEBUG rustls::client::hs: No cached session for DnsName("ap-southeast-1.e4c6174f-6538-4e47-93bf-0a2503819047.aws.yugabyte.cloud")    
2025-08-17T10:13:25.339469Z DEBUG rustls::client::hs: Not resuming any session    
2025-08-17T10:13:25.438155Z DEBUG rustls::client::hs: Using ciphersuite TLS13_AES_256_GCM_SHA384    
2025-08-17T10:13:25.438364Z DEBUG rustls::client::tls13: Not resuming    
2025-08-17T10:13:25.438733Z DEBUG rustls::client::tls13: TLS1.3 encrypted extensions: []    
2025-08-17T10:13:25.438772Z DEBUG rustls::client::hs: ALPN protocol is None    
2025-08-17T10:13:25.438811Z DEBUG rustls::client::tls13: Got CertificateRequest CertificateRequestPayloadTLS13 { context: , extensions: [SignatureAlgorithms([ECDSA_NISTP256_SHA256, ECDSA_NISTP384_SHA384, ECDSA_NISTP521_SHA512, ED25519, ED448, Unknown(2057), Unknown(2058), Unknown(2059), RSA_PSS_SHA256, RSA_PSS_SHA384, RSA_PSS_SHA512, RSA_PKCS1_SHA256, RSA_PKCS1_SHA384, RSA_PKCS1_SHA512, Unknown(771), Unknown(769)]), AuthorityNames([DistinguishedName(305b31153013060355040a130c597567616279746520496e633142304006035504030c392a2e65346336313734662d363533382d346534372d393362662d3061323530333831393034372e6177732e79756761627974652e636c6f7564), DistinguishedName(30818b310b3009060355040613025553310b3009060355040813024341311230100603550407130953756e6e7976616c6531153013060355040a130c597567616279746520496e6331173015060355040b130e597567616279746520436c6f7564312b302906035504031322597567616279746520436c6f7564205375626f7264696e6174652043412070726f64), DistinguishedName(308184310b3009060355040613025553310b3009060355040813024341311230100603550407130953756e6e7976616c6531153013060355040a130c597567616279746520496e6331173015060355040b130e597567616279746520436c6f7564312430220603550403131b597567616279746520436c6f756420526f6f742043412070726f64)])] }    
2025-08-17T10:13:25.438849Z DEBUG rustls::client::common: Client auth requested but no cert/sigscheme available    
2025-08-17T10:13:25.443200Z DEBUG rustls::client::hs: No cached session for DnsName("ap-southeast-1.e4c6174f-6538-4e47-93bf-0a2503819047.aws.yugabyte.cloud")    
2025-08-17T10:13:25.443695Z DEBUG rustls::client::hs: Not resuming any session    
2025-08-17T10:13:25.448010Z DEBUG rustls::client::hs: No cached session for DnsName("ap-southeast-1.e4c6174f-6538-4e47-93bf-0a2503819047.aws.yugabyte.cloud")    
2025-08-17T10:13:25.448522Z DEBUG rustls::client::hs: Not resuming any session    
2025-08-17T10:13:25.538769Z DEBUG rustls::client::hs: Using ciphersuite TLS13_AES_256_GCM_SHA384    
2025-08-17T10:13:25.539283Z DEBUG rustls::client::tls13: Not resuming    
2025-08-17T10:13:25.539889Z DEBUG rustls::client::tls13: TLS1.3 encrypted extensions: []    
2025-08-17T10:13:25.540121Z DEBUG rustls::client::hs: ALPN protocol is None    
2025-08-17T10:13:25.540242Z DEBUG rustls::client::tls13: Got CertificateRequest CertificateRequestPayloadTLS13 { context: , extensions: [SignatureAlgorithms([ECDSA_NISTP256_SHA256, ECDSA_NISTP384_SHA384, ECDSA_NISTP521_SHA512, ED25519, ED448, Unknown(2057), Unknown(2058), Unknown(2059), RSA_PSS_SHA256, RSA_PSS_SHA384, RSA_PSS_SHA512, RSA_PKCS1_SHA256, RSA_PKCS1_SHA384, RSA_PKCS1_SHA512, Unknown(771), Unknown(769)]), AuthorityNames([DistinguishedName(305b31153013060355040a130c597567616279746520496e633142304006035504030c392a2e65346336313734662d363533382d346534372d393362662d3061323530333831393034372e6177732e79756761627974652e636c6f7564), DistinguishedName(30818b310b3009060355040613025553310b3009060355040813024341311230100603550407130953756e6e7976616c6531153013060355040a130c597567616279746520496e6331173015060355040b130e597567616279746520436c6f7564312b302906035504031322597567616279746520436c6f7564205375626f7264696e6174652043412070726f64), DistinguishedName(308184310b3009060355040613025553310b3009060355040813024341311230100603550407130953756e6e7976616c6531153013060355040a130c597567616279746520496e6331173015060355040b130e597567616279746520436c6f7564312430220603550403131b597567616279746520436c6f756420526f6f742043412070726f64)])] }    
2025-08-17T10:13:25.540825Z DEBUG rustls::client::common: Client auth requested but no cert/sigscheme available    
2025-08-17T10:13:25.547812Z DEBUG rustls::client::hs: Using ciphersuite TLS13_AES_256_GCM_SHA384    
2025-08-17T10:13:25.548132Z DEBUG rustls::client::tls13: Not resuming    
2025-08-17T10:13:25.548901Z DEBUG rustls::client::tls13: TLS1.3 encrypted extensions: []    
2025-08-17T10:13:25.549883Z DEBUG rustls::client::hs: ALPN protocol is None    
2025-08-17T10:13:25.549949Z DEBUG rustls::client::tls13: Got CertificateRequest CertificateRequestPayloadTLS13 { context: , extensions: [SignatureAlgorithms([ECDSA_NISTP256_SHA256, ECDSA_NISTP384_SHA384, ECDSA_NISTP521_SHA512, ED25519, ED448, Unknown(2057), Unknown(2058), Unknown(2059), RSA_PSS_SHA256, RSA_PSS_SHA384, RSA_PSS_SHA512, RSA_PKCS1_SHA256, RSA_PKCS1_SHA384, RSA_PKCS1_SHA512, Unknown(771), Unknown(769)]), AuthorityNames([DistinguishedName(305b31153013060355040a130c597567616279746520496e633142304006035504030c392a2e65346336313734662d363533382d346534372d393362662d3061323530333831393034372e6177732e79756761627974652e636c6f7564), DistinguishedName(30818b310b3009060355040613025553310b3009060355040813024341311230100603550407130953756e6e7976616c6531153013060355040a130c597567616279746520496e6331173015060355040b130e597567616279746520436c6f7564312b302906035504031322597567616279746520436c6f7564205375626f7264696e6174652043412070726f64), DistinguishedName(308184310b3009060355040613025553310b3009060355040813024341311230100603550407130953756e6e7976616c6531153013060355040a130c597567616279746520496e6331173015060355040b130e597567616279746520436c6f7564312430220603550403131b597567616279746520436c6f756420526f6f742043412070726f64)])] }    
2025-08-17T10:13:25.550005Z DEBUG rustls::client::common: Client auth requested but no cert/sigscheme available    
2025-08-17T10:13:25.769382Z DEBUG sqlx::query: summary="SELECT id, tenant_id, name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  name,\n  module\nFROM\n  roles\nWHERE\n  tenant_id = $1\nORDER BY\n  name\n" rows_affected=12 rows_returned=12 elapsed=196.824334ms elapsed_secs=0.196824334
2025-08-17T10:13:25.788264Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /roles
2025-08-17T10:13:25.863589Z DEBUG sqlx::query: summary="SELECT id, resource, action, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  resource,\n  action,\n  label\nFROM\n  permissions\nORDER BY\n  resource,\n  action\n" rows_affected=13 rows_returned=13 elapsed=181.771378ms elapsed_secs=0.181771378
2025-08-17T10:13:25.870558Z DEBUG sqlx::query: summary="SELECT module_name AS key, ‚Ä¶" db.statement="\n\nSELECT\n  module_name AS key,\n  display_name AS label\nFROM\n  available_module\nORDER BY\n  display_name\n" rows_affected=7 rows_returned=7 elapsed=179.875002ms elapsed_secs=0.179875002
2025-08-17T10:13:25.945849Z DEBUG sqlx::query: summary="SELECT id, tenant_id, name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  name,\n  module\nFROM\n  roles\nWHERE\n  tenant_id = $1\nORDER BY\n  name\n" rows_affected=12 rows_returned=12 elapsed=101.593892ms elapsed_secs=0.101593892
2025-08-17T10:13:37.092742Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /users
2025-08-17T10:13:37.285211Z DEBUG sqlx::query: summary="SELECT u.tenant_id, t.name AS ‚Ä¶" db.statement="\n\nSELECT\n  u.tenant_id,\n  t.name AS tenant_name,\n  u.user_id,\n  u.email,\n  u.name,\n  u.created_at\nFROM\n  users u\n  JOIN tenant t ON u.tenant_id = t.tenant_id\nORDER BY\n  u.created_at DESC\n" rows_affected=3 rows_returned=3 elapsed=140.713178ms elapsed_secs=0.140713178
2025-08-17T10:13:37.289451Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /users
2025-08-17T10:13:37.501929Z DEBUG sqlx::query: summary="SELECT u.tenant_id, t.name AS ‚Ä¶" db.statement="\n\nSELECT\n  u.tenant_id,\n  t.name AS tenant_name,\n  u.user_id,\n  u.email,\n  u.name,\n  u.created_at\nFROM\n  users u\n  JOIN tenant t ON u.tenant_id = t.tenant_id\nORDER BY\n  u.created_at DESC\n" rows_affected=3 rows_returned=3 elapsed=160.365179ms elapsed_secs=0.160365179
2025-08-17T10:13:38.426092Z DEBUG sqlx::query: summary="SELECT module_name, display_name FROM ‚Ä¶" db.statement="\n\nSELECT\n  module_name,\n  display_name\nFROM\n  available_module\nORDER BY\n  display_name\n" rows_affected=7 rows_returned=7 elapsed=98.983489ms elapsed_secs=0.098983489
2025-08-17T10:13:38.467507Z DEBUG sqlx::query: summary="SELECT t.tenant_id, t.enterprise_id, t.company_id, ‚Ä¶" db.statement="\n\nSELECT\n  t.tenant_id,\n  t.enterprise_id,\n  t.company_id,\n  t.name,\n  t.slug,\n  t.shard_id,\n  m.module_name as \"module_name?\"\nFROM\n  tenant t\n  LEFT JOIN tenant_module m ON m.tenant_id = t.tenant_id\nORDER BY\n  t.name\n" rows_affected=3 rows_returned=3 elapsed=134.999563ms elapsed_secs=0.134999563
2025-08-17T10:13:38.588059Z DEBUG sqlx::query: summary="SELECT module_name, display_name FROM ‚Ä¶" db.statement="\n\nSELECT\n  module_name,\n  display_name\nFROM\n  available_module\nORDER BY\n  display_name\n" rows_affected=7 rows_returned=7 elapsed=99.310309ms elapsed_secs=0.099310309
2025-08-17T10:13:38.637143Z DEBUG sqlx::query: summary="SELECT t.tenant_id, t.enterprise_id, t.company_id, ‚Ä¶" db.statement="\n\nSELECT\n  t.tenant_id,\n  t.enterprise_id,\n  t.company_id,\n  t.name,\n  t.slug,\n  t.shard_id,\n  m.module_name as \"module_name?\"\nFROM\n  tenant t\n  LEFT JOIN tenant_module m ON m.tenant_id = t.tenant_id\nORDER BY\n  t.name\n" rows_affected=3 rows_returned=3 elapsed=115.518543ms elapsed_secs=0.115518543
2025-08-17T10:13:39.463050Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /users
2025-08-17T10:13:39.565050Z DEBUG sqlx::query: summary="SELECT u.tenant_id, t.name AS ‚Ä¶" db.statement="\n\nSELECT\n  u.tenant_id,\n  t.name AS tenant_name,\n  u.user_id,\n  u.email,\n  u.name,\n  u.created_at\nFROM\n  users u\n  JOIN tenant t ON u.tenant_id = t.tenant_id\nORDER BY\n  u.created_at DESC\n" rows_affected=3 rows_returned=3 elapsed=48.954606ms elapsed_secs=0.048954606
2025-08-17T10:13:39.568097Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /users
2025-08-17T10:13:39.809463Z DEBUG sqlx::query: summary="SELECT u.tenant_id, t.name AS ‚Ä¶" db.statement="\n\nSELECT\n  u.tenant_id,\n  t.name AS tenant_name,\n  u.user_id,\n  u.email,\n  u.name,\n  u.created_at\nFROM\n  users u\n  JOIN tenant t ON u.tenant_id = t.tenant_id\nORDER BY\n  u.created_at DESC\n" rows_affected=3 rows_returned=3 elapsed=175.771405ms elapsed_secs=0.175771405
2025-08-17T10:13:40.905616Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T10:13:41.115411Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=150.795484ms elapsed_secs=0.150795484
2025-08-17T10:13:41.130092Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T10:13:41.232959Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=49.198737ms elapsed_secs=0.049198737
2025-08-17T10:13:41.866450Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list?is_company=true&limit=200
2025-08-17T10:13:41.970766Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=0 rows_returned=0 elapsed=49.920584ms elapsed_secs=0.049920584
2025-08-17T10:13:41.978252Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list?is_company=true&limit=200
2025-08-17T10:13:42.180916Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=0 rows_returned=0 elapsed=145.797532ms elapsed_secs=0.145797532
2025-08-17T10:27:01.923053Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T10:27:02.103365Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=125.122163ms elapsed_secs=0.125122163
2025-08-17T10:27:02.107949Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T10:27:02.217280Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=49.764734ms elapsed_secs=0.049764734
2025-08-17T10:27:02.993016Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list?is_company=true&limit=200
2025-08-17T10:27:02.994603Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /95ebfccb-9971-4841-90e3-a61173f2cb7d
2025-08-17T10:27:03.095297Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=0 rows_returned=0 elapsed=49.609911ms elapsed_secs=0.049609911
2025-08-17T10:27:03.097720Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list?is_company=true&limit=200
2025-08-17T10:27:03.159538Z DEBUG sqlx::query: summary="SELECT id, is_company, parent_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  is_company,\n  parent_id,\n  name,\n  display_name,\n  email,\n  phone,\n  mobile,\n  website,\n  street,\n  street2,\n  city,\n  state,\n  zip,\n  country_code,\n  notes,\n  NULLIF(tags_cached, '') AS \"tags_cached?: String\",\n  created_at,\n  updated_at\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=113.652734ms elapsed_secs=0.113652734
2025-08-17T10:27:03.162732Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /95ebfccb-9971-4841-90e3-a61173f2cb7d
2025-08-17T10:27:03.205735Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=0 rows_returned=0 elapsed=49.243192ms elapsed_secs=0.049243192
2025-08-17T10:27:03.321667Z DEBUG sqlx::query: summary="SELECT id, is_company, parent_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  is_company,\n  parent_id,\n  name,\n  display_name,\n  email,\n  phone,\n  mobile,\n  website,\n  street,\n  street2,\n  city,\n  state,\n  zip,\n  country_code,\n  notes,\n  NULLIF(tags_cached, '') AS \"tags_cached?: String\",\n  created_at,\n  updated_at\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=108.339836ms elapsed_secs=0.108339836
2025-08-17T10:27:03.938296Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T10:27:04.138207Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=146.912752ms elapsed_secs=0.146912752
2025-08-17T10:27:04.142533Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T10:27:04.245305Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=50.103187ms elapsed_secs=0.050103187
2025-08-17T10:27:04.874538Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T10:27:04.979265Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=49.927347ms elapsed_secs=0.049927347
2025-08-17T10:27:04.985741Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T10:27:05.179798Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=137.247066ms elapsed_secs=0.137247066
2025-08-17T10:27:06.980640Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T10:27:07.081875Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=48.632389ms elapsed_secs=0.048632389
2025-08-17T10:27:07.088386Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T10:27:07.190551Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=48.108375ms elapsed_secs=0.048108375
2025-08-17T10:27:07.526413Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T10:27:07.651402Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=51.182915ms elapsed_secs=0.051182915
2025-08-17T10:27:07.668191Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T10:27:07.773552Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=51.034638ms elapsed_secs=0.051034638
2025-08-17T10:27:08.040826Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T10:27:08.244649Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=151.854055ms elapsed_secs=0.151854055
2025-08-17T10:27:08.246732Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T10:27:08.456428Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=156.225611ms elapsed_secs=0.156225611
2025-08-17T10:29:07.971441Z DEBUG sqlx::query: summary="SELECT tenant_id, shard_id FROM ‚Ä¶" db.statement="\n\nSELECT\n  tenant_id,\n  shard_id\nFROM\n  tenant\nWHERE\n  slug = $1\n" rows_affected=0 rows_returned=1 elapsed=93.58262ms elapsed_secs=0.09358262
2025-08-17T10:29:08.151787Z DEBUG sqlx::query: summary="SELECT tenant_id, user_id, email, ‚Ä¶" db.statement="\n\nSELECT\n  tenant_id,\n  user_id,\n  email,\n  name,\n  password_hash\nFROM\n  users\nWHERE\n  email = $1\n  AND tenant_id = $2\n" rows_affected=0 rows_returned=1 elapsed=122.867521ms elapsed_secs=0.122867521
2025-08-17T10:29:14.499162Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T10:29:14.694003Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=137.982498ms elapsed_secs=0.137982498
2025-08-17T10:29:14.852180Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=108.007089ms elapsed_secs=0.108007089
2025-08-17T10:29:18.811389Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T10:29:19.338851Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T10:29:19.522497Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=132.305592ms elapsed_secs=0.132305592
2025-08-17T10:29:19.672697Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=101.233655ms elapsed_secs=0.101233655
2025-08-17T10:29:22.145906Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /roles
2025-08-17T10:29:22.243948Z DEBUG sqlx::query: summary="SELECT id, tenant_id, name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  name,\n  module\nFROM\n  roles\nWHERE\n  tenant_id = $1\nORDER BY\n  name\n" rows_affected=12 rows_returned=12 elapsed=48.973963ms elapsed_secs=0.048973963
2025-08-17T10:29:22.293161Z DEBUG sqlx::query: summary="SELECT module_name AS key, ‚Ä¶" db.statement="\n\nSELECT\n  module_name AS key,\n  display_name AS label\nFROM\n  available_module\nORDER BY\n  display_name\n" rows_affected=7 rows_returned=7 elapsed=98.244437ms elapsed_secs=0.098244437
2025-08-17T10:29:22.308517Z DEBUG sqlx::query: summary="SELECT id, resource, action, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  resource,\n  action,\n  label\nFROM\n  permissions\nORDER BY\n  resource,\n  action\n" rows_affected=13 rows_returned=13 elapsed=112.85341ms elapsed_secs=0.11285341
2025-08-17T10:29:23.893254Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /users
2025-08-17T10:29:23.994441Z DEBUG sqlx::query: summary="SELECT u.tenant_id, t.name AS ‚Ä¶" db.statement="\n\nSELECT\n  u.tenant_id,\n  t.name AS tenant_name,\n  u.user_id,\n  u.email,\n  u.name,\n  u.created_at\nFROM\n  users u\n  JOIN tenant t ON u.tenant_id = t.tenant_id\nORDER BY\n  u.created_at DESC\n" rows_affected=3 rows_returned=3 elapsed=49.14098ms elapsed_secs=0.04914098
2025-08-17T10:29:26.970640Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T10:29:27.071322Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=49.083941ms elapsed_secs=0.049083941
2025-08-17T10:29:31.008302Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=daily&month=8&day=17
2025-08-17T10:29:31.170396Z DEBUG sqlx::query: summary="SELECT EXTRACT(DAY FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    DAY\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\n  AND EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) = $3\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=5 rows_returned=5 elapsed=102.081352ms elapsed_secs=0.102081352
2025-08-17T10:29:32.536955Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=yearly
2025-08-17T10:29:32.694506Z DEBUG sqlx::query: summary="SELECT EXTRACT(YEAR FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=1 rows_returned=1 elapsed=100.962076ms elapsed_secs=0.100962076
2025-08-17T10:29:34.303918Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T10:29:34.404103Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=48.677356ms elapsed_secs=0.048677356
2025-08-17T10:29:36.127058Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T10:29:36.324179Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=132.627255ms elapsed_secs=0.132627255
2025-08-17T10:29:37.452510Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T10:29:37.552088Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=46.788021ms elapsed_secs=0.046788021
2025-08-17T10:29:38.840338Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /roles
2025-08-17T10:29:38.939893Z DEBUG sqlx::query: summary="SELECT module_name AS key, ‚Ä¶" db.statement="\n\nSELECT\n  module_name AS key,\n  display_name AS label\nFROM\n  available_module\nORDER BY\n  display_name\n" rows_affected=7 rows_returned=7 elapsed=50.199156ms elapsed_secs=0.050199156
2025-08-17T10:29:38.989103Z DEBUG sqlx::query: summary="SELECT id, tenant_id, name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  name,\n  module\nFROM\n  roles\nWHERE\n  tenant_id = $1\nORDER BY\n  name\n" rows_affected=12 rows_returned=12 elapsed=99.124717ms elapsed_secs=0.099124717
2025-08-17T10:29:38.999515Z DEBUG sqlx::query: summary="SELECT id, resource, action, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  resource,\n  action,\n  label\nFROM\n  permissions\nORDER BY\n  resource,\n  action\n" rows_affected=13 rows_returned=13 elapsed=113.665482ms elapsed_secs=0.113665482
2025-08-17T10:29:40.692826Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /users
2025-08-17T10:29:40.792987Z DEBUG sqlx::query: summary="SELECT u.tenant_id, t.name AS ‚Ä¶" db.statement="\n\nSELECT\n  u.tenant_id,\n  t.name AS tenant_name,\n  u.user_id,\n  u.email,\n  u.name,\n  u.created_at\nFROM\n  users u\n  JOIN tenant t ON u.tenant_id = t.tenant_id\nORDER BY\n  u.created_at DESC\n" rows_affected=3 rows_returned=3 elapsed=49.253474ms elapsed_secs=0.049253474
2025-08-17T10:29:42.656614Z DEBUG sqlx::query: summary="SELECT t.tenant_id, t.enterprise_id, t.company_id, ‚Ä¶" db.statement="\n\nSELECT\n  t.tenant_id,\n  t.enterprise_id,\n  t.company_id,\n  t.name,\n  t.slug,\n  t.shard_id,\n  m.module_name as \"module_name?\"\nFROM\n  tenant t\n  LEFT JOIN tenant_module m ON m.tenant_id = t.tenant_id\nORDER BY\n  t.name\n" rows_affected=3 rows_returned=3 elapsed=47.66641ms elapsed_secs=0.04766641
2025-08-17T10:29:42.691070Z DEBUG sqlx::query: summary="SELECT module_name, display_name FROM ‚Ä¶" db.statement="\n\nSELECT\n  module_name,\n  display_name\nFROM\n  available_module\nORDER BY\n  display_name\n" rows_affected=7 rows_returned=7 elapsed=79.671193ms elapsed_secs=0.079671193
2025-08-17T10:30:20.568268Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /users
2025-08-17T10:30:20.671545Z DEBUG sqlx::query: summary="SELECT u.tenant_id, t.name AS ‚Ä¶" db.statement="\n\nSELECT\n  u.tenant_id,\n  t.name AS tenant_name,\n  u.user_id,\n  u.email,\n  u.name,\n  u.created_at\nFROM\n  users u\n  JOIN tenant t ON u.tenant_id = t.tenant_id\nORDER BY\n  u.created_at DESC\n" rows_affected=3 rows_returned=3 elapsed=49.344243ms elapsed_secs=0.049344243
2025-08-17T10:30:22.007703Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /roles
2025-08-17T10:30:22.159534Z DEBUG sqlx::query: summary="SELECT module_name AS key, ‚Ä¶" db.statement="\n\nSELECT\n  module_name AS key,\n  display_name AS label\nFROM\n  available_module\nORDER BY\n  display_name\n" rows_affected=7 rows_returned=7 elapsed=102.438362ms elapsed_secs=0.102438362
2025-08-17T10:30:22.173133Z DEBUG sqlx::query: summary="SELECT id, resource, action, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  resource,\n  action,\n  label\nFROM\n  permissions\nORDER BY\n  resource,\n  action\n" rows_affected=13 rows_returned=13 elapsed=115.027875ms elapsed_secs=0.115027875
2025-08-17T10:30:22.186466Z DEBUG sqlx::query: summary="SELECT id, tenant_id, name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  name,\n  module\nFROM\n  roles\nWHERE\n  tenant_id = $1\nORDER BY\n  name\n" rows_affected=12 rows_returned=12 elapsed=122.592161ms elapsed_secs=0.122592161
2025-08-17T10:30:30.858289Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T10:30:30.963046Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=51.081357ms elapsed_secs=0.051081357
2025-08-17T10:30:32.220118Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T10:30:32.323018Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=50.611682ms elapsed_secs=0.050611682
2025-08-17T10:30:33.418891Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T10:30:33.535204Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=51.418628ms elapsed_secs=0.051418628
2025-08-17T10:30:34.662106Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T10:30:34.765828Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=49.985428ms elapsed_secs=0.049985428
2025-08-17T10:30:35.274967Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T10:30:35.382682Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=54.5675ms elapsed_secs=0.0545675
2025-08-17T10:30:36.001204Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T10:30:36.104945Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=51.867548ms elapsed_secs=0.051867548
2025-08-17T10:30:37.103572Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T10:30:37.109081Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /e48e0f6a-7636-47a7-b036-4c7fa41fa443
2025-08-17T10:30:37.210697Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=48.933531ms elapsed_secs=0.048933531
2025-08-17T10:30:37.262899Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=98.212142ms elapsed_secs=0.098212142
2025-08-17T10:30:37.454181Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=3 rows_returned=3 elapsed=130.409372ms elapsed_secs=0.130409372
2025-08-17T10:30:51.709019Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list?is_company=true&limit=200
2025-08-17T10:30:51.803913Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=0 rows_returned=0 elapsed=46.646036ms elapsed_secs=0.046646036
2025-08-17T10:30:53.404805Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T10:30:53.506017Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=49.426101ms elapsed_secs=0.049426101
2025-08-17T10:30:56.321196Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list?is_company=true&limit=200
2025-08-17T10:30:56.325873Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /95ebfccb-9971-4841-90e3-a61173f2cb7d
2025-08-17T10:30:56.422891Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=0 rows_returned=0 elapsed=48.961846ms elapsed_secs=0.048961846
2025-08-17T10:30:56.483154Z DEBUG sqlx::query: summary="SELECT id, is_company, parent_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  is_company,\n  parent_id,\n  name,\n  display_name,\n  email,\n  phone,\n  mobile,\n  website,\n  street,\n  street2,\n  city,\n  state,\n  zip,\n  country_code,\n  notes,\n  NULLIF(tags_cached, '') AS \"tags_cached?: String\",\n  created_at,\n  updated_at\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=104.229603ms elapsed_secs=0.104229603
2025-08-17T10:30:58.841664Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T10:30:58.950631Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=50.324714ms elapsed_secs=0.050324714
2025-08-17T10:30:59.423772Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T10:30:59.613199Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=130.469259ms elapsed_secs=0.130469259
2025-08-17T10:31:00.465304Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T10:31:00.465133Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /e48e0f6a-7636-47a7-b036-4c7fa41fa443
2025-08-17T10:31:00.567707Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=49.208132ms elapsed_secs=0.049208132
2025-08-17T10:31:00.584927Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=55.23208ms elapsed_secs=0.05523208
2025-08-17T10:31:00.773890Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=3 rows_returned=3 elapsed=132.245136ms elapsed_secs=0.132245136
2025-08-17T10:32:21.516984Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /e48e0f6a-7636-47a7-b036-4c7fa41fa443/update
2025-08-17T10:32:21.736828Z DEBUG sqlx::query: summary="UPDATE loan_contract SET contact_id ‚Ä¶" db.statement="\n\nUPDATE\n  loan_contract\nSET\n  contact_id = $1,\n  name = $2,\n  principal = $3,\n  interest_rate = $4,\n  term_months = $5,\n  date_start = $6,\n  date_end = $7,\n  collateral_description = $8,\n  collateral_value = $9,\n  updated_at = NOW()\nWHERE\n  id = $10\n  AND tenant_id = $11\nRETURNING\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\n" rows_affected=0 rows_returned=1 elapsed=115.30871ms elapsed_secs=0.11530871
2025-08-17T10:32:21.844315Z DEBUG sqlx::query: summary="DELETE FROM loan_transaction WHERE ‚Ä¶" db.statement="\n\nDELETE FROM\n  loan_transaction\nWHERE\n  contract_id = $1\n  AND tenant_id = $2\n" rows_affected=3 rows_returned=0 elapsed=105.046484ms elapsed_secs=0.105046484
2025-08-17T10:32:21.949023Z DEBUG sqlx::query: summary="INSERT INTO loan_transaction ( ‚Ä¶" db.statement="\n\nINSERT INTO\n  loan_transaction (\n    contract_id,\n    tenant_id,\n    contact_id,\n    transaction_type,\n    amount,\n    \"date\",\n    note\n  )\nVALUES\n  ($1, $2, $3, $4, $5, $6, $7)\n" rows_affected=1 rows_returned=0 elapsed=101.389097ms elapsed_secs=0.101389097
2025-08-17T10:32:21.999583Z DEBUG sqlx::query: summary="INSERT INTO loan_transaction ( ‚Ä¶" db.statement="\n\nINSERT INTO\n  loan_transaction (\n    contract_id,\n    tenant_id,\n    contact_id,\n    transaction_type,\n    amount,\n    \"date\",\n    note\n  )\nVALUES\n  ($1, $2, $3, $4, $5, $6, $7)\n" rows_affected=1 rows_returned=0 elapsed=48.854044ms elapsed_secs=0.048854044
2025-08-17T10:32:22.052115Z DEBUG sqlx::query: summary="INSERT INTO loan_transaction ( ‚Ä¶" db.statement="\n\nINSERT INTO\n  loan_transaction (\n    contract_id,\n    tenant_id,\n    contact_id,\n    transaction_type,\n    amount,\n    \"date\",\n    note\n  )\nVALUES\n  ($1, $2, $3, $4, $5, $6, $7)\n" rows_affected=1 rows_returned=0 elapsed=50.357697ms elapsed_secs=0.050357697
2025-08-17T10:32:22.103222Z DEBUG sqlx::query: summary="COMMIT" db.statement="" rows_affected=0 rows_returned=0 elapsed=48.84861ms elapsed_secs=0.04884861
2025-08-17T10:32:22.121629Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /e48e0f6a-7636-47a7-b036-4c7fa41fa443
2025-08-17T10:32:22.265798Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=92.805128ms elapsed_secs=0.092805128
2025-08-17T10:32:22.369842Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=3 rows_returned=3 elapsed=49.921093ms elapsed_secs=0.049921093
2025-08-17T10:33:02.264320Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /e48e0f6a-7636-47a7-b036-4c7fa41fa443/update
2025-08-17T10:33:02.488168Z DEBUG sqlx::query: summary="UPDATE loan_contract SET contact_id ‚Ä¶" db.statement="\n\nUPDATE\n  loan_contract\nSET\n  contact_id = $1,\n  name = $2,\n  principal = $3,\n  interest_rate = $4,\n  term_months = $5,\n  date_start = $6,\n  date_end = $7,\n  collateral_description = $8,\n  collateral_value = $9,\n  updated_at = NOW()\nWHERE\n  id = $10\n  AND tenant_id = $11\nRETURNING\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\n" rows_affected=0 rows_returned=1 elapsed=117.276902ms elapsed_secs=0.117276902
2025-08-17T10:33:02.595988Z DEBUG sqlx::query: summary="DELETE FROM loan_transaction WHERE ‚Ä¶" db.statement="\n\nDELETE FROM\n  loan_transaction\nWHERE\n  contract_id = $1\n  AND tenant_id = $2\n" rows_affected=3 rows_returned=0 elapsed=106.2786ms elapsed_secs=0.1062786
2025-08-17T10:33:02.706615Z DEBUG sqlx::query: summary="INSERT INTO loan_transaction ( ‚Ä¶" db.statement="\n\nINSERT INTO\n  loan_transaction (\n    contract_id,\n    tenant_id,\n    contact_id,\n    transaction_type,\n    amount,\n    \"date\",\n    note\n  )\nVALUES\n  ($1, $2, $3, $4, $5, $6, $7)\n" rows_affected=1 rows_returned=0 elapsed=108.169478ms elapsed_secs=0.108169478
2025-08-17T10:33:02.761398Z DEBUG sqlx::query: summary="INSERT INTO loan_transaction ( ‚Ä¶" db.statement="\n\nINSERT INTO\n  loan_transaction (\n    contract_id,\n    tenant_id,\n    contact_id,\n    transaction_type,\n    amount,\n    \"date\",\n    note\n  )\nVALUES\n  ($1, $2, $3, $4, $5, $6, $7)\n" rows_affected=1 rows_returned=0 elapsed=50.627811ms elapsed_secs=0.050627811
2025-08-17T10:33:02.815898Z DEBUG sqlx::query: summary="INSERT INTO loan_transaction ( ‚Ä¶" db.statement="\n\nINSERT INTO\n  loan_transaction (\n    contract_id,\n    tenant_id,\n    contact_id,\n    transaction_type,\n    amount,\n    \"date\",\n    note\n  )\nVALUES\n  ($1, $2, $3, $4, $5, $6, $7)\n" rows_affected=1 rows_returned=0 elapsed=52.53797ms elapsed_secs=0.05253797
2025-08-17T10:33:02.868066Z DEBUG sqlx::query: summary="INSERT INTO loan_transaction ( ‚Ä¶" db.statement="\n\nINSERT INTO\n  loan_transaction (\n    contract_id,\n    tenant_id,\n    contact_id,\n    transaction_type,\n    amount,\n    \"date\",\n    note\n  )\nVALUES\n  ($1, $2, $3, $4, $5, $6, $7)\n" rows_affected=1 rows_returned=0 elapsed=49.686718ms elapsed_secs=0.049686718
2025-08-17T10:33:02.923016Z DEBUG sqlx::query: summary="COMMIT" db.statement="" rows_affected=0 rows_returned=0 elapsed=54.589549ms elapsed_secs=0.054589549
2025-08-17T10:33:02.931437Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /e48e0f6a-7636-47a7-b036-4c7fa41fa443
2025-08-17T10:33:03.038153Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=48.567567ms elapsed_secs=0.048567567
2025-08-17T10:33:03.141478Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=4 rows_returned=4 elapsed=48.671481ms elapsed_secs=0.048671481
2025-08-17T10:33:56.151067Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /e48e0f6a-7636-47a7-b036-4c7fa41fa443/update
2025-08-17T10:33:56.365301Z DEBUG sqlx::query: summary="UPDATE loan_contract SET contact_id ‚Ä¶" db.statement="\n\nUPDATE\n  loan_contract\nSET\n  contact_id = $1,\n  name = $2,\n  principal = $3,\n  interest_rate = $4,\n  term_months = $5,\n  date_start = $6,\n  date_end = $7,\n  collateral_description = $8,\n  collateral_value = $9,\n  updated_at = NOW()\nWHERE\n  id = $10\n  AND tenant_id = $11\nRETURNING\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\n" rows_affected=0 rows_returned=1 elapsed=112.324183ms elapsed_secs=0.112324183
2025-08-17T10:33:56.466470Z DEBUG sqlx::query: summary="DELETE FROM loan_transaction WHERE ‚Ä¶" db.statement="\n\nDELETE FROM\n  loan_transaction\nWHERE\n  contract_id = $1\n  AND tenant_id = $2\n" rows_affected=4 rows_returned=0 elapsed=99.186887ms elapsed_secs=0.099186887
2025-08-17T10:33:56.564184Z DEBUG sqlx::query: summary="INSERT INTO loan_transaction ( ‚Ä¶" db.statement="\n\nINSERT INTO\n  loan_transaction (\n    contract_id,\n    tenant_id,\n    contact_id,\n    transaction_type,\n    amount,\n    \"date\",\n    note\n  )\nVALUES\n  ($1, $2, $3, $4, $5, $6, $7)\n" rows_affected=1 rows_returned=0 elapsed=95.350567ms elapsed_secs=0.095350567
2025-08-17T10:33:56.614988Z DEBUG sqlx::query: summary="INSERT INTO loan_transaction ( ‚Ä¶" db.statement="\n\nINSERT INTO\n  loan_transaction (\n    contract_id,\n    tenant_id,\n    contact_id,\n    transaction_type,\n    amount,\n    \"date\",\n    note\n  )\nVALUES\n  ($1, $2, $3, $4, $5, $6, $7)\n" rows_affected=1 rows_returned=0 elapsed=47.921511ms elapsed_secs=0.047921511
2025-08-17T10:33:56.664563Z DEBUG sqlx::query: summary="INSERT INTO loan_transaction ( ‚Ä¶" db.statement="\n\nINSERT INTO\n  loan_transaction (\n    contract_id,\n    tenant_id,\n    contact_id,\n    transaction_type,\n    amount,\n    \"date\",\n    note\n  )\nVALUES\n  ($1, $2, $3, $4, $5, $6, $7)\n" rows_affected=1 rows_returned=0 elapsed=46.910387ms elapsed_secs=0.046910387
2025-08-17T10:33:56.714574Z DEBUG sqlx::query: summary="INSERT INTO loan_transaction ( ‚Ä¶" db.statement="\n\nINSERT INTO\n  loan_transaction (\n    contract_id,\n    tenant_id,\n    contact_id,\n    transaction_type,\n    amount,\n    \"date\",\n    note\n  )\nVALUES\n  ($1, $2, $3, $4, $5, $6, $7)\n" rows_affected=1 rows_returned=0 elapsed=47.116602ms elapsed_secs=0.047116602
2025-08-17T10:33:56.762125Z DEBUG sqlx::query: summary="COMMIT" db.statement="" rows_affected=0 rows_returned=0 elapsed=47.273472ms elapsed_secs=0.047273472
2025-08-17T10:33:56.770465Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /e48e0f6a-7636-47a7-b036-4c7fa41fa443
2025-08-17T10:33:56.871063Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=48.402858ms elapsed_secs=0.048402858
2025-08-17T10:33:57.063026Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=4 rows_returned=4 elapsed=136.783581ms elapsed_secs=0.136783581
2025-08-17T10:34:12.547870Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /e48e0f6a-7636-47a7-b036-4c7fa41fa443/update
2025-08-17T10:34:12.790856Z DEBUG sqlx::query: summary="UPDATE loan_contract SET contact_id ‚Ä¶" db.statement="\n\nUPDATE\n  loan_contract\nSET\n  contact_id = $1,\n  name = $2,\n  principal = $3,\n  interest_rate = $4,\n  term_months = $5,\n  date_start = $6,\n  date_end = $7,\n  collateral_description = $8,\n  collateral_value = $9,\n  updated_at = NOW()\nWHERE\n  id = $10\n  AND tenant_id = $11\nRETURNING\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\n" rows_affected=0 rows_returned=1 elapsed=120.044703ms elapsed_secs=0.120044703
2025-08-17T10:34:12.898700Z DEBUG sqlx::query: summary="DELETE FROM loan_transaction WHERE ‚Ä¶" db.statement="\n\nDELETE FROM\n  loan_transaction\nWHERE\n  contract_id = $1\n  AND tenant_id = $2\n" rows_affected=4 rows_returned=0 elapsed=105.248499ms elapsed_secs=0.105248499
2025-08-17T10:34:13.001278Z DEBUG sqlx::query: summary="INSERT INTO loan_transaction ( ‚Ä¶" db.statement="\n\nINSERT INTO\n  loan_transaction (\n    contract_id,\n    tenant_id,\n    contact_id,\n    transaction_type,\n    amount,\n    \"date\",\n    note\n  )\nVALUES\n  ($1, $2, $3, $4, $5, $6, $7)\n" rows_affected=1 rows_returned=0 elapsed=100.464034ms elapsed_secs=0.100464034
2025-08-17T10:34:13.055280Z DEBUG sqlx::query: summary="INSERT INTO loan_transaction ( ‚Ä¶" db.statement="\n\nINSERT INTO\n  loan_transaction (\n    contract_id,\n    tenant_id,\n    contact_id,\n    transaction_type,\n    amount,\n    \"date\",\n    note\n  )\nVALUES\n  ($1, $2, $3, $4, $5, $6, $7)\n" rows_affected=1 rows_returned=0 elapsed=50.040345ms elapsed_secs=0.050040345
2025-08-17T10:34:13.107474Z DEBUG sqlx::query: summary="INSERT INTO loan_transaction ( ‚Ä¶" db.statement="\n\nINSERT INTO\n  loan_transaction (\n    contract_id,\n    tenant_id,\n    contact_id,\n    transaction_type,\n    amount,\n    \"date\",\n    note\n  )\nVALUES\n  ($1, $2, $3, $4, $5, $6, $7)\n" rows_affected=1 rows_returned=0 elapsed=50.230002ms elapsed_secs=0.050230002
2025-08-17T10:34:13.158646Z DEBUG sqlx::query: summary="INSERT INTO loan_transaction ( ‚Ä¶" db.statement="\n\nINSERT INTO\n  loan_transaction (\n    contract_id,\n    tenant_id,\n    contact_id,\n    transaction_type,\n    amount,\n    \"date\",\n    note\n  )\nVALUES\n  ($1, $2, $3, $4, $5, $6, $7)\n" rows_affected=1 rows_returned=0 elapsed=49.13894ms elapsed_secs=0.04913894
2025-08-17T10:34:13.211628Z DEBUG sqlx::query: summary="COMMIT" db.statement="" rows_affected=0 rows_returned=0 elapsed=50.773813ms elapsed_secs=0.050773813
2025-08-17T10:34:13.224476Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /e48e0f6a-7636-47a7-b036-4c7fa41fa443
2025-08-17T10:34:13.379558Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=96.478579ms elapsed_secs=0.096478579
2025-08-17T10:34:13.572455Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=4 rows_returned=4 elapsed=124.634562ms elapsed_secs=0.124634562
2025-08-17T10:34:38.187704Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T10:34:38.288918Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=49.077293ms elapsed_secs=0.049077293
2025-08-17T10:34:49.175789Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=daily&month=8&day=17
2025-08-17T10:34:49.280082Z DEBUG sqlx::query: summary="SELECT EXTRACT(DAY FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    DAY\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\n  AND EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) = $3\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=5 rows_returned=5 elapsed=50.509812ms elapsed_secs=0.050509812
2025-08-17T10:34:50.359181Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T10:34:50.461533Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=48.834211ms elapsed_secs=0.048834211
2025-08-17T10:34:51.118437Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=yearly
2025-08-17T10:34:51.281134Z DEBUG sqlx::query: summary="SELECT EXTRACT(YEAR FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=1 rows_returned=1 elapsed=101.672522ms elapsed_secs=0.101672522
2025-08-17T10:35:10.857060Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=daily&month=8&day=17
2025-08-17T10:35:11.004828Z DEBUG sqlx::query: summary="SELECT EXTRACT(DAY FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    DAY\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\n  AND EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) = $3\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=5 rows_returned=5 elapsed=93.331368ms elapsed_secs=0.093331368
2025-08-17T10:35:43.186343Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T10:35:43.288309Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=49.131343ms elapsed_secs=0.049131343
2025-08-17T10:35:43.339778Z DEBUG rustls::common_state: Sending warning alert CloseNotify    
2025-08-17T10:35:54.884411Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T10:35:54.884867Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /2db4cabd-565f-4b7c-a5f6-8140665c1330
2025-08-17T10:35:54.984258Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=48.245068ms elapsed_secs=0.048245068
2025-08-17T10:35:54.988624Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=52.463033ms elapsed_secs=0.052463033
2025-08-17T10:35:55.040248Z DEBUG rustls::common_state: Sending warning alert CloseNotify    
2025-08-17T10:35:55.087709Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=1 rows_returned=1 elapsed=51.415877ms elapsed_secs=0.051415877
2025-08-17T10:36:31.416166Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /users
2025-08-17T10:36:31.577549Z DEBUG sqlx::query: summary="SELECT u.tenant_id, t.name AS ‚Ä¶" db.statement="\n\nSELECT\n  u.tenant_id,\n  t.name AS tenant_name,\n  u.user_id,\n  u.email,\n  u.name,\n  u.created_at\nFROM\n  users u\n  JOIN tenant t ON u.tenant_id = t.tenant_id\nORDER BY\n  u.created_at DESC\n" rows_affected=3 rows_returned=3 elapsed=111.919334ms elapsed_secs=0.111919334
2025-08-17T10:36:33.602825Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /roles
2025-08-17T10:36:33.696839Z DEBUG sqlx::query: summary="SELECT id, tenant_id, name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  name,\n  module\nFROM\n  roles\nWHERE\n  tenant_id = $1\nORDER BY\n  name\n" rows_affected=12 rows_returned=12 elapsed=46.511562ms elapsed_secs=0.046511562
2025-08-17T10:36:33.699857Z DEBUG sqlx::query: summary="SELECT module_name AS key, ‚Ä¶" db.statement="\n\nSELECT\n  module_name AS key,\n  display_name AS label\nFROM\n  available_module\nORDER BY\n  display_name\n" rows_affected=7 rows_returned=7 elapsed=48.745037ms elapsed_secs=0.048745037
2025-08-17T10:36:33.703155Z DEBUG sqlx::query: summary="SELECT id, resource, action, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  resource,\n  action,\n  label\nFROM\n  permissions\nORDER BY\n  resource,\n  action\n" rows_affected=13 rows_returned=13 elapsed=51.561714ms elapsed_secs=0.051561714
2025-08-17T10:36:48.733430Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /roles
2025-08-17T10:36:48.892904Z DEBUG sqlx::query: summary="INSERT INTO roles (id, ‚Ä¶" db.statement="\n\nINSERT INTO\n  roles (id, tenant_id, name, module)\nVALUES\n  ($1, $2, $3, $4)\n" rows_affected=1 rows_returned=0 elapsed=105.270511ms elapsed_secs=0.105270511
2025-08-17T10:36:48.903777Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /role-permissions
2025-08-17T10:36:49.074453Z DEBUG sqlx::query: summary="INSERT INTO role_permissions (role_id, ‚Ä¶" db.statement="\n\nINSERT INTO\n  role_permissions (role_id, permission_id)\nVALUES\n  ($1, $2)\n" rows_affected=1 rows_returned=0 elapsed=118.161399ms elapsed_secs=0.118161399
2025-08-17T10:36:49.079798Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /roles
2025-08-17T10:36:49.180093Z DEBUG sqlx::query: summary="SELECT id, tenant_id, name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  name,\n  module\nFROM\n  roles\nWHERE\n  tenant_id = $1\nORDER BY\n  name\n" rows_affected=13 rows_returned=13 elapsed=49.431845ms elapsed_secs=0.049431845
2025-08-17T10:43:34.403464Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T10:43:38.793059Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T10:43:39.173476Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T10:43:39.341302Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=115.843944ms elapsed_secs=0.115843944
2025-08-17T10:43:39.389017Z DEBUG rustls::common_state: Sending warning alert CloseNotify    
2025-08-17T10:43:39.496471Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=100.176281ms elapsed_secs=0.100176281
2025-08-17T10:43:39.554011Z DEBUG rustls::common_state: Sending warning alert CloseNotify    
2025-08-17T10:43:42.113609Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T10:43:42.216731Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=50.057435ms elapsed_secs=0.050057435
2025-08-17T10:43:42.267006Z DEBUG rustls::common_state: Sending warning alert CloseNotify    
2025-08-17T10:43:42.685003Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T10:43:42.900622Z DEBUG rustls::client::hs: No cached session for DnsName("ap-southeast-1.e4c6174f-6538-4e47-93bf-0a2503819047.aws.yugabyte.cloud")    
2025-08-17T10:43:42.901039Z DEBUG rustls::client::hs: Not resuming any session    
2025-08-17T10:43:42.999482Z DEBUG rustls::client::hs: Using ciphersuite TLS13_AES_256_GCM_SHA384    
2025-08-17T10:43:42.999969Z DEBUG rustls::client::tls13: Not resuming    
2025-08-17T10:43:43.000220Z DEBUG rustls::client::tls13: TLS1.3 encrypted extensions: []    
2025-08-17T10:43:43.000350Z DEBUG rustls::client::hs: ALPN protocol is None    
2025-08-17T10:43:43.000440Z DEBUG rustls::client::tls13: Got CertificateRequest CertificateRequestPayloadTLS13 { context: , extensions: [SignatureAlgorithms([ECDSA_NISTP256_SHA256, ECDSA_NISTP384_SHA384, ECDSA_NISTP521_SHA512, ED25519, ED448, Unknown(2057), Unknown(2058), Unknown(2059), RSA_PSS_SHA256, RSA_PSS_SHA384, RSA_PSS_SHA512, RSA_PKCS1_SHA256, RSA_PKCS1_SHA384, RSA_PKCS1_SHA512, Unknown(771), Unknown(769)]), AuthorityNames([DistinguishedName(305b31153013060355040a130c597567616279746520496e633142304006035504030c392a2e65346336313734662d363533382d346534372d393362662d3061323530333831393034372e6177732e79756761627974652e636c6f7564), DistinguishedName(30818b310b3009060355040613025553310b3009060355040813024341311230100603550407130953756e6e7976616c6531153013060355040a130c597567616279746520496e6331173015060355040b130e597567616279746520436c6f7564312b302906035504031322597567616279746520436c6f7564205375626f7264696e6174652043412070726f64), DistinguishedName(308184310b3009060355040613025553310b3009060355040813024341311230100603550407130953756e6e7976616c6531153013060355040a130c597567616279746520496e6331173015060355040b130e597567616279746520436c6f7564312430220603550403131b597567616279746520436c6f756420526f6f742043412070726f64)])] }    
2025-08-17T10:43:43.000527Z DEBUG rustls::client::common: Client auth requested but no cert/sigscheme available    
2025-08-17T10:43:43.349027Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=193.699301ms elapsed_secs=0.193699301
2025-08-17T10:43:43.866996Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T10:43:44.052879Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=128.489189ms elapsed_secs=0.128489189
2025-08-17T10:43:44.540100Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T10:43:44.641888Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=49.07251ms elapsed_secs=0.04907251
2025-08-17T10:43:46.209121Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T10:43:46.214937Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /1c91cf36-9488-4fb0-9af6-43ec17364c22
2025-08-17T10:43:46.317954Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=48.69421ms elapsed_secs=0.04869421
2025-08-17T10:43:46.443495Z DEBUG rustls::client::hs: No cached session for DnsName("ap-southeast-1.e4c6174f-6538-4e47-93bf-0a2503819047.aws.yugabyte.cloud")    
2025-08-17T10:43:46.444281Z DEBUG rustls::client::hs: Not resuming any session    
2025-08-17T10:43:46.544498Z DEBUG rustls::client::hs: Using ciphersuite TLS13_AES_256_GCM_SHA384    
2025-08-17T10:43:46.546805Z DEBUG rustls::client::tls13: Not resuming    
2025-08-17T10:43:46.547752Z DEBUG rustls::client::tls13: TLS1.3 encrypted extensions: []    
2025-08-17T10:43:46.547995Z DEBUG rustls::client::hs: ALPN protocol is None    
2025-08-17T10:43:46.548300Z DEBUG rustls::client::tls13: Got CertificateRequest CertificateRequestPayloadTLS13 { context: , extensions: [SignatureAlgorithms([ECDSA_NISTP256_SHA256, ECDSA_NISTP384_SHA384, ECDSA_NISTP521_SHA512, ED25519, ED448, Unknown(2057), Unknown(2058), Unknown(2059), RSA_PSS_SHA256, RSA_PSS_SHA384, RSA_PSS_SHA512, RSA_PKCS1_SHA256, RSA_PKCS1_SHA384, RSA_PKCS1_SHA512, Unknown(771), Unknown(769)]), AuthorityNames([DistinguishedName(305b31153013060355040a130c597567616279746520496e633142304006035504030c392a2e65346336313734662d363533382d346534372d393362662d3061323530333831393034372e6177732e79756761627974652e636c6f7564), DistinguishedName(30818b310b3009060355040613025553310b3009060355040813024341311230100603550407130953756e6e7976616c6531153013060355040a130c597567616279746520496e6331173015060355040b130e597567616279746520436c6f7564312b302906035504031322597567616279746520436c6f7564205375626f7264696e6174652043412070726f64), DistinguishedName(308184310b3009060355040613025553310b3009060355040813024341311230100603550407130953756e6e7976616c6531153013060355040a130c597567616279746520496e6331173015060355040b130e597567616279746520436c6f7564312430220603550403131b597567616279746520436c6f756420526f6f742043412070726f64)])] }    
2025-08-17T10:43:46.548809Z DEBUG rustls::client::common: Client auth requested but no cert/sigscheme available    
2025-08-17T10:43:46.855474Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=166.06719ms elapsed_secs=0.16606719
2025-08-17T10:43:47.076105Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=1 rows_returned=1 elapsed=152.381959ms elapsed_secs=0.152381959
2025-08-17T10:43:51.129579Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T10:43:51.353364Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=169.732882ms elapsed_secs=0.169732882
2025-08-17T10:43:52.085355Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /95ebfccb-9971-4841-90e3-a61173f2cb7d
2025-08-17T10:43:52.086334Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list?is_company=true&limit=200
2025-08-17T10:43:52.204228Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=0 rows_returned=0 elapsed=64.115898ms elapsed_secs=0.064115898
2025-08-17T10:43:52.257376Z DEBUG sqlx::query: summary="SELECT id, is_company, parent_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  is_company,\n  parent_id,\n  name,\n  display_name,\n  email,\n  phone,\n  mobile,\n  website,\n  street,\n  street2,\n  city,\n  state,\n  zip,\n  country_code,\n  notes,\n  NULLIF(tags_cached, '') AS \"tags_cached?: String\",\n  created_at,\n  updated_at\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=115.465661ms elapsed_secs=0.115465661
2025-08-17T10:44:07.352843Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T10:44:07.784397Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list?is_company=true&limit=200
2025-08-17T10:44:07.789501Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /95ebfccb-9971-4841-90e3-a61173f2cb7d
2025-08-17T10:44:07.802410Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T10:44:07.916561Z DEBUG sqlx::query: summary="SELECT id, is_company, parent_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  is_company,\n  parent_id,\n  name,\n  display_name,\n  email,\n  phone,\n  mobile,\n  website,\n  street,\n  street2,\n  city,\n  state,\n  zip,\n  country_code,\n  notes,\n  NULLIF(tags_cached, '') AS \"tags_cached?: String\",\n  created_at,\n  updated_at\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=72.630376ms elapsed_secs=0.072630376
2025-08-17T10:44:07.918808Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=0 rows_returned=0 elapsed=73.877045ms elapsed_secs=0.073877045
2025-08-17T10:44:07.944105Z DEBUG rustls::client::hs: No cached session for DnsName("ap-southeast-1.e4c6174f-6538-4e47-93bf-0a2503819047.aws.yugabyte.cloud")    
2025-08-17T10:44:07.946180Z DEBUG rustls::client::hs: Not resuming any session    
2025-08-17T10:44:08.053691Z DEBUG rustls::client::hs: Using ciphersuite TLS13_AES_256_GCM_SHA384    
2025-08-17T10:44:08.053973Z DEBUG rustls::client::tls13: Not resuming    
2025-08-17T10:44:08.054674Z DEBUG rustls::client::tls13: TLS1.3 encrypted extensions: []    
2025-08-17T10:44:08.054829Z DEBUG rustls::client::hs: ALPN protocol is None    
2025-08-17T10:44:08.054963Z DEBUG rustls::client::tls13: Got CertificateRequest CertificateRequestPayloadTLS13 { context: , extensions: [SignatureAlgorithms([ECDSA_NISTP256_SHA256, ECDSA_NISTP384_SHA384, ECDSA_NISTP521_SHA512, ED25519, ED448, Unknown(2057), Unknown(2058), Unknown(2059), RSA_PSS_SHA256, RSA_PSS_SHA384, RSA_PSS_SHA512, RSA_PKCS1_SHA256, RSA_PKCS1_SHA384, RSA_PKCS1_SHA512, Unknown(771), Unknown(769)]), AuthorityNames([DistinguishedName(305b31153013060355040a130c597567616279746520496e633142304006035504030c392a2e65346336313734662d363533382d346534372d393362662d3061323530333831393034372e6177732e79756761627974652e636c6f7564), DistinguishedName(30818b310b3009060355040613025553310b3009060355040813024341311230100603550407130953756e6e7976616c6531153013060355040a130c597567616279746520496e6331173015060355040b130e597567616279746520436c6f7564312b302906035504031322597567616279746520436c6f7564205375626f7264696e6174652043412070726f64), DistinguishedName(308184310b3009060355040613025553310b3009060355040813024341311230100603550407130953756e6e7976616c6531153013060355040a130c597567616279746520496e6331173015060355040b130e597567616279746520436c6f7564312430220603550403131b597567616279746520436c6f756420526f6f742043412070726f64)])] }    
2025-08-17T10:44:08.055158Z DEBUG rustls::client::common: Client auth requested but no cert/sigscheme available    
2025-08-17T10:44:08.391489Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=187.242627ms elapsed_secs=0.187242627
2025-08-17T10:44:08.570003Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=126.751688ms elapsed_secs=0.126751688
2025-08-17T10:44:12.885703Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /roles
2025-08-17T10:44:13.057777Z DEBUG sqlx::query: summary="SELECT id, tenant_id, name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  name,\n  module\nFROM\n  roles\nWHERE\n  tenant_id = $1\nORDER BY\n  name\n" rows_affected=13 rows_returned=13 elapsed=118.259097ms elapsed_secs=0.118259097
2025-08-17T10:44:13.084632Z DEBUG sqlx::query: summary="SELECT module_name AS key, ‚Ä¶" db.statement="\n\nSELECT\n  module_name AS key,\n  display_name AS label\nFROM\n  available_module\nORDER BY\n  display_name\n" rows_affected=7 rows_returned=7 elapsed=136.731313ms elapsed_secs=0.136731313
2025-08-17T10:44:13.106579Z DEBUG sqlx::query: summary="SELECT id, resource, action, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  resource,\n  action,\n  label\nFROM\n  permissions\nORDER BY\n  resource,\n  action\n" rows_affected=13 rows_returned=13 elapsed=157.141887ms elapsed_secs=0.157141887
2025-08-17T10:44:16.789747Z DEBUG sqlx::query: summary="SELECT module_name, display_name FROM ‚Ä¶" db.statement="\n\nSELECT\n  module_name,\n  display_name\nFROM\n  available_module\nORDER BY\n  display_name\n" rows_affected=7 rows_returned=7 elapsed=101.34906ms elapsed_secs=0.10134906
2025-08-17T10:44:16.830044Z DEBUG sqlx::query: summary="SELECT t.tenant_id, t.enterprise_id, t.company_id, ‚Ä¶" db.statement="\n\nSELECT\n  t.tenant_id,\n  t.enterprise_id,\n  t.company_id,\n  t.name,\n  t.slug,\n  t.shard_id,\n  m.module_name as \"module_name?\"\nFROM\n  tenant t\n  LEFT JOIN tenant_module m ON m.tenant_id = t.tenant_id\nORDER BY\n  t.name\n" rows_affected=3 rows_returned=3 elapsed=136.265258ms elapsed_secs=0.136265258
2025-08-17T10:44:19.536156Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T10:44:19.994701Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T10:44:20.053772Z DEBUG sqlx::query: summary="SELECT module_name, display_name FROM ‚Ä¶" db.statement="\n\nSELECT\n  module_name,\n  display_name\nFROM\n  available_module\nORDER BY\n  display_name\n" rows_affected=7 rows_returned=7 elapsed=48.738502ms elapsed_secs=0.048738502
2025-08-17T10:44:20.149452Z DEBUG sqlx::query: summary="SELECT t.tenant_id, t.enterprise_id, t.company_id, ‚Ä¶" db.statement="\n\nSELECT\n  t.tenant_id,\n  t.enterprise_id,\n  t.company_id,\n  t.name,\n  t.slug,\n  t.shard_id,\n  m.module_name as \"module_name?\"\nFROM\n  tenant t\n  LEFT JOIN tenant_module m ON m.tenant_id = t.tenant_id\nORDER BY\n  t.name\n" rows_affected=3 rows_returned=3 elapsed=140.155629ms elapsed_secs=0.140155629
2025-08-17T10:44:20.170407Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=120.615791ms elapsed_secs=0.120615791
2025-08-17T10:44:20.314881Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=95.493851ms elapsed_secs=0.095493851
2025-08-17T10:44:23.366445Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T10:44:23.606476Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=169.260283ms elapsed_secs=0.169260283
2025-08-17T10:44:27.453541Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T10:44:28.106140Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T10:44:28.212583Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T10:44:28.306142Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=146.902514ms elapsed_secs=0.146902514
2025-08-17T10:44:28.399810Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=133.262498ms elapsed_secs=0.133262498
2025-08-17T10:44:28.570127Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=115.648359ms elapsed_secs=0.115648359
2025-08-17T10:44:35.152686Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T10:44:35.811160Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T10:44:35.898285Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T10:44:35.916582Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=48.73882ms elapsed_secs=0.04873882
2025-08-17T10:44:36.007731Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=51.142925ms elapsed_secs=0.051142925
2025-08-17T10:44:36.113129Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=52.961984ms elapsed_secs=0.052961984
2025-08-17T10:44:40.182356Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T10:44:40.820722Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T10:44:40.909949Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T10:44:40.932554Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=51.006324ms elapsed_secs=0.051006324
2025-08-17T10:44:41.012714Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=50.126798ms elapsed_secs=0.050126798
2025-08-17T10:44:41.138071Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=59.798348ms elapsed_secs=0.059798348
2025-08-17T10:44:44.849031Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /users
2025-08-17T10:44:45.040709Z DEBUG sqlx::query: summary="SELECT u.tenant_id, t.name AS ‚Ä¶" db.statement="\n\nSELECT\n  u.tenant_id,\n  t.name AS tenant_name,\n  u.user_id,\n  u.email,\n  u.name,\n  u.created_at\nFROM\n  users u\n  JOIN tenant t ON u.tenant_id = t.tenant_id\nORDER BY\n  u.created_at DESC\n" rows_affected=3 rows_returned=3 elapsed=136.272778ms elapsed_secs=0.136272778
2025-08-17T10:44:50.686755Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T10:44:51.156744Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /users
2025-08-17T10:44:51.168061Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T10:44:51.286190Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=56.027095ms elapsed_secs=0.056027095
2025-08-17T10:44:51.338665Z DEBUG sqlx::query: summary="SELECT u.tenant_id, t.name AS ‚Ä¶" db.statement="\n\nSELECT\n  u.tenant_id,\n  t.name AS tenant_name,\n  u.user_id,\n  u.email,\n  u.name,\n  u.created_at\nFROM\n  users u\n  JOIN tenant t ON u.tenant_id = t.tenant_id\nORDER BY\n  u.created_at DESC\n" rows_affected=3 rows_returned=3 elapsed=131.003365ms elapsed_secs=0.131003365
2025-08-17T10:44:51.383161Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=48.21397ms elapsed_secs=0.04821397
2025-08-17T10:44:53.336155Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T10:44:53.810060Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /users
2025-08-17T10:44:53.831503Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T10:44:53.935068Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=50.251878ms elapsed_secs=0.050251878
2025-08-17T10:44:54.023380Z DEBUG sqlx::query: summary="SELECT u.tenant_id, t.name AS ‚Ä¶" db.statement="\n\nSELECT\n  u.tenant_id,\n  t.name AS tenant_name,\n  u.user_id,\n  u.email,\n  u.name,\n  u.created_at\nFROM\n  users u\n  JOIN tenant t ON u.tenant_id = t.tenant_id\nORDER BY\n  u.created_at DESC\n" rows_affected=3 rows_returned=3 elapsed=152.401762ms elapsed_secs=0.152401762
2025-08-17T10:44:54.036293Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=49.068438ms elapsed_secs=0.049068438
2025-08-17T10:44:57.869044Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T10:44:58.331393Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /users
2025-08-17T10:44:58.346466Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T10:44:58.457242Z DEBUG sqlx::query: summary="SELECT u.tenant_id, t.name AS ‚Ä¶" db.statement="\n\nSELECT\n  u.tenant_id,\n  t.name AS tenant_name,\n  u.user_id,\n  u.email,\n  u.name,\n  u.created_at\nFROM\n  users u\n  JOIN tenant t ON u.tenant_id = t.tenant_id\nORDER BY\n  u.created_at DESC\n" rows_affected=3 rows_returned=3 elapsed=51.429318ms elapsed_secs=0.051429318
2025-08-17T10:44:58.489512Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=76.48806ms elapsed_secs=0.07648806
2025-08-17T10:44:58.586978Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=48.803853ms elapsed_secs=0.048803853
2025-08-17T10:45:01.578899Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /roles
2025-08-17T10:45:01.680306Z DEBUG sqlx::query: summary="SELECT id, tenant_id, name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  name,\n  module\nFROM\n  roles\nWHERE\n  tenant_id = $1\nORDER BY\n  name\n" rows_affected=13 rows_returned=13 elapsed=49.52361ms elapsed_secs=0.04952361
2025-08-17T10:45:01.740707Z DEBUG sqlx::query: summary="SELECT module_name AS key, ‚Ä¶" db.statement="\n\nSELECT\n  module_name AS key,\n  display_name AS label\nFROM\n  available_module\nORDER BY\n  display_name\n" rows_affected=7 rows_returned=7 elapsed=106.093285ms elapsed_secs=0.106093285
2025-08-17T10:45:01.743302Z DEBUG sqlx::query: summary="SELECT id, resource, action, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  resource,\n  action,\n  label\nFROM\n  permissions\nORDER BY\n  resource,\n  action\n" rows_affected=13 rows_returned=13 elapsed=112.662616ms elapsed_secs=0.112662616
2025-08-17T10:45:04.435547Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T10:45:04.835876Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /roles
2025-08-17T10:45:04.854801Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T10:45:04.938183Z DEBUG sqlx::query: summary="SELECT id, resource, action, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  resource,\n  action,\n  label\nFROM\n  permissions\nORDER BY\n  resource,\n  action\n" rows_affected=13 rows_returned=13 elapsed=51.842414ms elapsed_secs=0.051842414
2025-08-17T10:45:04.993936Z DEBUG sqlx::query: summary="SELECT module_name AS key, ‚Ä¶" db.statement="\n\nSELECT\n  module_name AS key,\n  display_name AS label\nFROM\n  available_module\nORDER BY\n  display_name\n" rows_affected=7 rows_returned=7 elapsed=108.457395ms elapsed_secs=0.108457395
2025-08-17T10:45:05.042649Z DEBUG sqlx::query: summary="SELECT id, tenant_id, name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  name,\n  module\nFROM\n  roles\nWHERE\n  tenant_id = $1\nORDER BY\n  name\n" rows_affected=13 rows_returned=13 elapsed=138.330487ms elapsed_secs=0.138330487
2025-08-17T10:45:05.045507Z DEBUG rustls::client::hs: No cached session for DnsName("ap-southeast-1.e4c6174f-6538-4e47-93bf-0a2503819047.aws.yugabyte.cloud")    
2025-08-17T10:45:05.047176Z DEBUG rustls::client::hs: Not resuming any session    
2025-08-17T10:45:05.151744Z DEBUG rustls::client::hs: Using ciphersuite TLS13_AES_256_GCM_SHA384    
2025-08-17T10:45:05.153054Z DEBUG rustls::client::tls13: Not resuming    
2025-08-17T10:45:05.154408Z DEBUG rustls::client::tls13: TLS1.3 encrypted extensions: []    
2025-08-17T10:45:05.155274Z DEBUG rustls::client::hs: ALPN protocol is None    
2025-08-17T10:45:05.156436Z DEBUG rustls::client::tls13: Got CertificateRequest CertificateRequestPayloadTLS13 { context: , extensions: [SignatureAlgorithms([ECDSA_NISTP256_SHA256, ECDSA_NISTP384_SHA384, ECDSA_NISTP521_SHA512, ED25519, ED448, Unknown(2057), Unknown(2058), Unknown(2059), RSA_PSS_SHA256, RSA_PSS_SHA384, RSA_PSS_SHA512, RSA_PKCS1_SHA256, RSA_PKCS1_SHA384, RSA_PKCS1_SHA512, Unknown(771), Unknown(769)]), AuthorityNames([DistinguishedName(305b31153013060355040a130c597567616279746520496e633142304006035504030c392a2e65346336313734662d363533382d346534372d393362662d3061323530333831393034372e6177732e79756761627974652e636c6f7564), DistinguishedName(30818b310b3009060355040613025553310b3009060355040813024341311230100603550407130953756e6e7976616c6531153013060355040a130c597567616279746520496e6331173015060355040b130e597567616279746520436c6f7564312b302906035504031322597567616279746520436c6f7564205375626f7264696e6174652043412070726f64), DistinguishedName(308184310b3009060355040613025553310b3009060355040813024341311230100603550407130953756e6e7976616c6531153013060355040a130c597567616279746520496e6331173015060355040b130e597567616279746520436c6f7564312430220603550403131b597567616279746520436c6f756420526f6f742043412070726f64)])] }    
2025-08-17T10:45:05.157163Z DEBUG rustls::client::common: Client auth requested but no cert/sigscheme available    
2025-08-17T10:45:05.463797Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=176.926929ms elapsed_secs=0.176926929
2025-08-17T10:45:05.563077Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=49.209263ms elapsed_secs=0.049209263
2025-08-17T10:45:09.462712Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T10:45:09.566550Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=50.455039ms elapsed_secs=0.050455039
2025-08-17T10:45:12.421900Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T10:45:13.056729Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T10:45:13.169638Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=56.557626ms elapsed_secs=0.056557626
2025-08-17T10:45:13.173170Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T10:45:13.278624Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=51.316422ms elapsed_secs=0.051316422
2025-08-17T10:45:13.378357Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=47.679533ms elapsed_secs=0.047679533
2025-08-17T10:45:17.265308Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T10:45:17.425691Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=99.554821ms elapsed_secs=0.099554821
2025-08-17T10:45:20.203366Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T10:45:20.668489Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T10:45:20.689376Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T10:45:20.817734Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=65.203661ms elapsed_secs=0.065203661
2025-08-17T10:45:20.883422Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=153.323419ms elapsed_secs=0.153323419
2025-08-17T10:45:20.921252Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=47.976893ms elapsed_secs=0.047976893
2025-08-17T10:45:23.285756Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T10:45:23.728988Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T10:45:23.741766Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T10:45:23.834047Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=49.260332ms elapsed_secs=0.049260332
2025-08-17T10:45:23.848801Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=51.379275ms elapsed_secs=0.051379275
2025-08-17T10:45:23.963581Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=60.771609ms elapsed_secs=0.060771609
2025-08-17T10:45:26.704099Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T10:45:26.818380Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=50.015271ms elapsed_secs=0.050015271
2025-08-17T10:45:29.665512Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T10:45:30.086661Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T10:45:30.102679Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T10:45:30.197960Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=52.223608ms elapsed_secs=0.052223608
2025-08-17T10:45:30.208445Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=53.171132ms elapsed_secs=0.053171132
2025-08-17T10:45:30.316745Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=53.952645ms elapsed_secs=0.053952645
2025-08-17T10:45:32.427371Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /profile
2025-08-17T10:45:32.840804Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T10:45:32.855265Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T10:45:32.970813Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=60.043905ms elapsed_secs=0.060043905
2025-08-17T10:45:32.971726Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=73.062372ms elapsed_secs=0.073062372
2025-08-17T10:45:33.168975Z DEBUG sqlx::query: summary="SELECT module_name FROM available_module ‚Ä¶" db.statement="\n\nSELECT\n  module_name\nFROM\n  available_module\nORDER BY\n  module_name\n" rows_affected=7 rows_returned=7 elapsed=132.532762ms elapsed_secs=0.132532762
2025-08-17T10:46:19.598834Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T10:46:19.712684Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=55.798436ms elapsed_secs=0.055798436
2025-08-17T10:46:44.149991Z DEBUG sqlx::query: summary="SELECT tenant_id, shard_id FROM ‚Ä¶" db.statement="\n\nSELECT\n  tenant_id,\n  shard_id\nFROM\n  tenant\nWHERE\n  slug = $1\n" rows_affected=0 rows_returned=1 elapsed=98.12833ms elapsed_secs=0.09812833
2025-08-17T10:46:44.302946Z DEBUG sqlx::query: summary="SELECT tenant_id, user_id, email, ‚Ä¶" db.statement="\n\nSELECT\n  tenant_id,\n  user_id,\n  email,\n  name,\n  password_hash\nFROM\n  users\nWHERE\n  email = $1\n  AND tenant_id = $2\n" rows_affected=0 rows_returned=1 elapsed=100.365029ms elapsed_secs=0.100365029
2025-08-17T10:46:50.326386Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /me/modules
2025-08-17T10:46:50.430687Z DEBUG sqlx::query: summary="SELECT EXISTS ( SELECT ‚Ä¶" db.statement="\n\nSELECT\n  EXISTS (\n    SELECT\n      1\n    FROM\n      user_roles ur\n      JOIN roles r ON r.tenant_id = ur.tenant_id\n      AND r.id = ur.role_id\n    WHERE\n      ur.tenant_id = $1\n      AND ur.user_id = $2\n      AND r.name = 'admin'\n  )\n" rows_affected=0 rows_returned=1 elapsed=50.880169ms elapsed_secs=0.050880169
2025-08-17T10:46:50.592268Z DEBUG sqlx::query: summary="SELECT role_id FROM user_roles ‚Ä¶" db.statement="\n\nSELECT\n  role_id\nFROM\n  user_roles\nWHERE\n  tenant_id = $1\n  AND user_id = $2\n" rows_affected=4 rows_returned=4 elapsed=105.696697ms elapsed_secs=0.105696697
2025-08-17T10:46:50.790835Z DEBUG sqlx::query: summary="SELECT DISTINCT split_part(p.resource, '.', ‚Ä¶" db.statement="\n\nSELECT\n  DISTINCT split_part(p.resource, '.', 2) AS module_key\nFROM\n  role_permissions rp\n  JOIN permissions p ON p.id = rp.permission_id\nWHERE\n  rp.role_id = ANY($1) -- $1: uuid[]\n  AND p.resource LIKE 'module.%'\n  AND p.action = 'access'\nORDER BY\n  1\n" rows_affected=4 rows_returned=4 elapsed=147.71846ms elapsed_secs=0.14771846
2025-08-17T10:46:55.606437Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T10:46:55.719012Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=52.634202ms elapsed_secs=0.052634202
2025-08-17T10:46:56.606843Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T10:46:56.607938Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /e48e0f6a-7636-47a7-b036-4c7fa41fa443
2025-08-17T10:46:56.779419Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=108.649777ms elapsed_secs=0.108649777
2025-08-17T10:46:56.823840Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=159.938592ms elapsed_secs=0.159938592
2025-08-17T10:46:56.942492Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=4 rows_returned=4 elapsed=108.880681ms elapsed_secs=0.108880681
2025-08-17T10:46:59.892974Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T10:47:00.007105Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=49.713048ms elapsed_secs=0.049713048
2025-08-17T10:47:00.788826Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T10:47:00.791216Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /1e1f4286-5474-4043-8e7d-a8721da008fa
2025-08-17T10:47:00.986067Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=136.539998ms elapsed_secs=0.136539998
2025-08-17T10:47:01.003202Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=150.156812ms elapsed_secs=0.150156812
2025-08-17T10:47:01.108383Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=2 rows_returned=2 elapsed=52.211631ms elapsed_secs=0.052211631
2025-08-17T10:47:06.582112Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T10:47:06.690823Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\nORDER BY\n  date_start DESC\n" rows_affected=6 rows_returned=6 elapsed=53.313614ms elapsed_secs=0.053313614
2025-08-17T10:47:07.461901Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T10:47:07.462146Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /1e1f4286-5474-4043-8e7d-a8721da008fa
2025-08-17T10:47:07.562802Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=49.22268ms elapsed_secs=0.04922268
2025-08-17T10:47:07.581949Z DEBUG sqlx::query: summary="SELECT id, tenant_id, contact_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  contact_id,\n  name,\n  principal,\n  interest_rate,\n  term_months,\n  date_start,\n  date_end,\n  collateral_description,\n  collateral_value,\n  storage_fee_rate,\n  storage_fee,\n  current_principal,\n  current_interest,\n  accumulated_interest,\n  total_paid_interest,\n  total_settlement_amount,\n  state,\n  created_at,\n  updated_at\nFROM\n  loan_contract\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=55.194791ms elapsed_secs=0.055194791
2025-08-17T10:47:07.692145Z DEBUG sqlx::query: summary="SELECT lt.id, lt.contract_id, lt.tenant_id, ‚Ä¶" db.statement="\n\nSELECT\n  lt.id,\n  lt.contract_id,\n  lt.tenant_id,\n  lt.contact_id,\n  lt.transaction_type,\n  lt.amount,\n  lt.date,\n  lt.note,\n  -- C√°c tr∆∞·ªùng t√≠nh to√°n ƒë·ªÉ Option<> nh·∫≠n None, s·∫Ω ƒë∆∞·ª£c calculator.rs ƒëi·ªÅn sau\n  NULL :: int4 AS \"days_from_prev?\",\n  NULL :: int8 AS \"interest_for_period?\",\n  NULL :: int8 AS \"accumulated_interest?\",\n  NULL :: int8 AS \"principal_balance?\",\n  lt.created_at,\n  lt.updated_at\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND lt.contract_id = $2\nORDER BY\n  lt.date ASC,\n  lt.id ASC\n" rows_affected=2 rows_returned=2 elapsed=49.870953ms elapsed_secs=0.049870953
2025-08-17T10:47:10.701950Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=monthly
2025-08-17T10:47:10.893432Z DEBUG sqlx::query: summary="SELECT EXTRACT(MONTH FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=3 rows_returned=3 elapsed=132.920746ms elapsed_secs=0.132920746
2025-08-17T10:47:13.743175Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=daily&month=8&day=17
2025-08-17T10:47:13.954921Z DEBUG sqlx::query: summary="SELECT EXTRACT(DAY FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    DAY\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\n  AND EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) = $2\n  AND EXTRACT(\n    MONTH\n    FROM\n      lt.date\n  ) = $3\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=5 rows_returned=5 elapsed=152.522938ms elapsed_secs=0.152522938
2025-08-17T10:47:15.283907Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /stats?year=2025&range=yearly
2025-08-17T10:47:15.446010Z DEBUG sqlx::query: summary="SELECT EXTRACT(YEAR FROM lt.date) ‚Ä¶" db.statement="\n\nSELECT\n  EXTRACT(\n    YEAR\n    FROM\n      lt.date\n  ) AS group_key,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('disbursement', 'additional') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_issued,\n  SUM(\n    CASE\n      WHEN lt.transaction_type IN ('principal', 'interest') THEN lt.amount\n      ELSE 0\n    END\n  ) :: numeric AS total_repaid\nFROM\n  loan_transaction lt\nWHERE\n  lt.tenant_id = $1\nGROUP BY\n  group_key\nORDER BY\n  group_key\n" rows_affected=1 rows_returned=1 elapsed=105.768554ms elapsed_secs=0.105768554
2025-08-17T10:47:17.909158Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list
2025-08-17T10:47:18.017735Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=1 rows_returned=1 elapsed=48.84676ms elapsed_secs=0.04884676
2025-08-17T10:47:19.127648Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /list?is_company=true&limit=200
2025-08-17T10:47:19.134548Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /95ebfccb-9971-4841-90e3-a61173f2cb7d
2025-08-17T10:47:19.233813Z DEBUG sqlx::query: summary="SELECT id, COALESCE(NULLIF(name,''), display_name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  COALESCE(\n    NULLIF(name, ''),\n    display_name,\n    email,\n    phone,\n    '(kh√¥ng t√™n)'\n  ) AS \"name!: String\",\n  display_name,\n  email,\n  phone,\n  is_company,\n  NULLIF(tags_cached, '') AS \"tags?: String\"\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND (\n    $2 :: bool IS NULL\n    OR is_company = $2\n  )\nORDER BY\n  created_at DESC\nLIMIT\n  $3 OFFSET $4\n" rows_affected=0 rows_returned=0 elapsed=49.192556ms elapsed_secs=0.049192556
2025-08-17T10:47:19.299942Z DEBUG sqlx::query: summary="SELECT id, is_company, parent_id, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  is_company,\n  parent_id,\n  name,\n  display_name,\n  email,\n  phone,\n  mobile,\n  website,\n  street,\n  street2,\n  city,\n  state,\n  zip,\n  country_code,\n  notes,\n  NULLIF(tags_cached, '') AS \"tags_cached?: String\",\n  created_at,\n  updated_at\nFROM\n  contact\nWHERE\n  tenant_id = $1\n  AND id = $2\n" rows_affected=0 rows_returned=1 elapsed=109.255738ms elapsed_secs=0.109255738
2025-08-17T10:47:20.803380Z DEBUG axum::core::auth: üîê Middleware nh·∫≠n request: /roles
2025-08-17T10:47:20.899318Z DEBUG sqlx::query: summary="SELECT module_name AS key, ‚Ä¶" db.statement="\n\nSELECT\n  module_name AS key,\n  display_name AS label\nFROM\n  available_module\nORDER BY\n  display_name\n" rows_affected=7 rows_returned=7 elapsed=48.775832ms elapsed_secs=0.048775832
2025-08-17T10:47:20.903610Z DEBUG sqlx::query: summary="SELECT id, resource, action, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  resource,\n  action,\n  label\nFROM\n  permissions\nORDER BY\n  resource,\n  action\n" rows_affected=13 rows_returned=13 elapsed=52.878003ms elapsed_secs=0.052878003
2025-08-17T10:47:20.955039Z DEBUG sqlx::query: summary="SELECT id, tenant_id, name, ‚Ä¶" db.statement="\n\nSELECT\n  id,\n  tenant_id,\n  name,\n  module\nFROM\n  roles\nWHERE\n  tenant_id = $1\nORDER BY\n  name\n" rows_affected=13 rows_returned=13 elapsed=99.40537ms elapsed_secs=0.09940537
2025-08-17T10:47:22.239764Z DEBUG sqlx::query: summary="SELECT t.tenant_id, t.enterprise_id, t.company_id, ‚Ä¶" db.statement="\n\nSELECT\n  t.tenant_id,\n  t.enterprise_id,\n  t.company_id,\n  t.name,\n  t.slug,\n  t.shard_id,\n  m.module_name as \"module_name?\"\nFROM\n  tenant t\n  LEFT JOIN tenant_module m ON m.tenant_id = t.tenant_id\nORDER BY\n  t.name\n" rows_affected=3 rows_returned=3 elapsed=51.244941ms elapsed_secs=0.051244941
2025-08-17T10:47:22.302112Z DEBUG sqlx::query: summary="SELECT module_name, display_name FROM ‚Ä¶" db.statement="\n\nSELECT\n  module_name,\n  display_name\nFROM\n  available_module\nORDER BY\n  display_name\n" rows_affected=7 rows_returned=7 elapsed=123.099794ms elapsed_secs=0.123099794
